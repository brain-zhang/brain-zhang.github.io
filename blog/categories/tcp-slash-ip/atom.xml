<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TCP/IP | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/tcp-slash-ip/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2019-01-06T18:18:36+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TCP/IP Illustrated Note2]]></title>
    <link href="https://happy123.me/blog/2016/06/11/tcp-slash-ip-illustrated-note2/"/>
    <updated>2016-06-11T22:26:09+08:00</updated>
    <id>https://happy123.me/blog/2016/06/11/tcp-slash-ip-illustrated-note2</id>
    <content type="html"><![CDATA[<h2>traceroute</h2>

<h4>原理</h4>

<p>开始时发送一个TTL字段为1的UDP数据报，然后将TTL字段每次加一，以确定路径中的每个路由器。每个路由器在丢弃UDP数据报时都返回一个ICMP超时报文2，而最终目的的主机则产生一个ICMP端口不可达的报文。</p>

<h4>IP源站选路选项</h4>

<ul>
<li>严格的源路由选择</li>
</ul>


<p>发送端指明IP数据包所必须采用的确切路由。如果一个路由器发现源路由所指定的下一个路由不在其直接连接的网络上，那么它会返回一个“源站路由失败”的ICMP差错报文。</p>

<ul>
<li>宽松的源站选路</li>
</ul>


<p>发送端指明了一个数据报经过的IP地址清单，但是数据报在清单上指明的任意两个地址之间可以通过其它路由器。</p>

<h2>IP选路</h2>

<p>一个简单的路由表</p>

<pre><code>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         192.168.159.2   0.0.0.0         UG    0      0        0 eth0
192.168.159.0   *               255.255.255.0   U     0      0        0 eth0
192.168.159.0   *               255.255.255.0   U     0      0        0 eth1
</code></pre>

<p>注意Flags一列，它有5种不同的标志:</p>

<ul>
<li>U (route is up) 路由启用</li>
<li>H (target is a host) 目标是主机</li>
<li>G (use gateway) 使用网关</li>
<li>R (reinstate route for dynamic routing)</li>
<li>D (dynamically installed by daemon or redirect)</li>
<li>M (modified from routing daemon or redirect)</li>
</ul>


<p>主机表项比网络表项具有更高的优先级，而网络表项比默认项具有更高的优先级。</p>

<h2>UDP</h2>

<p>UDP长度字段指的是UDP首部和UDP数据的总长度</p>

<p>UDP校验和覆盖UDP首部和数据，而IP首部校验和只覆盖IP首部</p>

<p>永远不要完全相信数据链路的CRC校验，应该始终打开端到端的校验和功能。另外，即使是打开了，也要小心，UDP和TCP的校验和也不是可以百分百信赖的。</p>

<p>注意两个ICMP报文和UDP的交互：ICMP不可达报文和ICMP源站抑制差错报文</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP Illustrated Note1]]></title>
    <link href="https://happy123.me/blog/2016/06/05/tcp-slash-ip-illustrated-note1/"/>
    <updated>2016-06-05T21:59:52+08:00</updated>
    <id>https://happy123.me/blog/2016/06/05/tcp-slash-ip-illustrated-note1</id>
    <content type="html"><![CDATA[<p>又开始重读&lt;TCP/IP详解>。发现真的是年纪大了&hellip;.T_T，看了就忘，做笔记也用处不大。</p>

<p>打算每天读完一部分，在这里捡一些重要的地方记一下。</p>

<h2>ARP</h2>

<p>习得技能:</p>

<ul>
<li><code>tcpdump -e</code> 可以显示硬件层地址</li>
</ul>


<h2>IP</h2>

<p>重要提示:</p>

<ul>
<li>传输之前需要把首部转换成网络字节序。注意，仅仅是首部就可以。</li>
</ul>


<h2>ICMP</h2>

<p>重要提示:</p>

<ul>
<li><p>在对ICMP差错报文响应时，永远不会生成另一份ICMP差错报文</p></li>
<li><p>当发放一份ICMP差错报文时，始终包含IP首部和产生ICMP差错报文的IP数据包的前8个字节。这样就可以精准知道谁产生的ICMP差错</p></li>
<li><p>ICMP的典型应用:</p>

<ul>
<li><p>掩码请求和应答 (大多数主机在收到请求后都会产生应答，而不是指定的主机应答，这其实是实现上的冗余)</p></li>
<li><p>时间戳请求和应答</p></li>
</ul>
</li>
<li><p>多宿主机发送报文给自己的某个接口，其实都是给回环地址的，这样产生的ICMP应答其实搞不明白原始报文发给哪个接口</p></li>
</ul>


<h2>Ping</h2>

<p>习得技能:</p>

<ul>
<li><p><code>Ping -S</code> 每秒一个往返请求</p></li>
<li><p><code>Ping -R</code> 记录路由，但是有限制，最大只能存放9个IP地址，而且只记录路由出口</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用TCP/IP进行网际互连 (笔记)]]></title>
    <link href="https://happy123.me/blog/2014/11/05/yong-tcp-slash-ipjin-xing-wang-ji-hu-lian-bi-ji/"/>
    <updated>2014-11-05T08:19:18+08:00</updated>
    <id>https://happy123.me/blog/2014/11/05/yong-tcp-slash-ipjin-xing-wang-ji-hu-lian-bi-ji</id>
    <content type="html"><![CDATA[<p>还是要补习基础知识啊。</p>

<p>譬如TCP的状态机转换，我每次都得花很长很长的时间才能反应过来什么时候会进入TIME_WAIT,CLOSE_WAIT&hellip;.</p>

<p>譬如一个pcap包，看了很长很长时间才发现是个规避糊涂窗口的Nagle算法&hellip;</p>

<p>譬如这本书，每次扫一遍好像都能知道怎么回事，过了段时间就又雾里看花了&hellip;.</p>

<p>这次通读一遍，又发现一些有意思的东西，记一下:</p>

<h3>底层网络技术回顾</h3>

<ul>
<li><p>最初的电话系统是面向连接的电路交换，后期(就是现在)的IP网络是基于分组交换的</p>

<p>  讲起来很简单，实际上为了实现分组交换网上的通信质量达到电路直接交换的效果，还是要付出很大努力，才能克服时延、抖动、通信质量等多个问题</p></li>
<li><p>以太网容量</p>

<p>  当前以太网不是为一对计算机之间提供可能的最高吞吐率而优化的，而是为更多网点介入和更多通信总量优化的。当前10G以太网的帧长度和格式还是保持10M网的标准，从这方面看，10G以太网在物理层的协议上还是有优化余地的。</p></li>
<li><p>POE可以提供48V,不超过15.4W的功率消耗，这个数字还是挺可观的</p></li>
<li><p>关于以太网的一些特点</p>

<p>  CSMA/CD 是很简单但有效的手段，值得后来的分布式系统借鉴</p>

<p>  以太网在物理层上只是"尽最大努力交付(best effort delivery)&ldquo;，但如果碰到问题，错误不会得到通知，数据包会丢弃</p>

<p>  frame帧大小 64B~1518B</p>

<p>  线缆的集合造就集线器，集线器升级为连接任意多的以太网就变成网桥，网桥提供自适应的帧转发，这样任意多的以太网就集合为一个物理网络，他们也遵循CSMA/CD。网桥提供更完善的隔离和配置方案就变成了交换机。</p>

<p>  以太网的地址(MAC)是要向IEEE买的</p>

<p>  以太网基础上升级为WIFI就有了两个很重要的技能:</p>

<pre><code>* 可作为接入点基站
* 可作为接入点连接(点对点),也就是WI-MAX
</code></pre></li>
</ul>


<h3>网际互联的模型</h3>

<ul>
<li><p>路由器的工作，某种情况下和DHT很相似，不过实现的约束更多一些</p></li>
<li><p>定向广播地址，主机号都为1</p></li>
<li><p>受限广播地址，255.255.255.255 (本地子网广播)</p></li>
<li><p>0.0.0.0有时候也用于广播，这是早期BSD实现的一个bug。后来有些软件为了兼容，也这么实现了。</p></li>
<li><p>0.0.0.0 表示无路由目标，有些应用把绑定这个的设置，认为是绑定全部本地IP。类似于一些设置中，设为0就相当于该项设置无限制。</p></li>
<li><p>127.0.0.1 是本地环回地址, 专供自己访问自己, 速度大( 不用经过整个协议栈 )</p></li>
<li><p>地址管理早期是由<a href="https://www.iana.org/about">IANA</a> 管理的，早期的IANA地址维护者仅仅是一个人,<a href="http://en.wikipedia.org/wiki/Jon_Postel">Jon Postel</a>，这位传奇人物在1998年过世，后来IANA成长为更完善的组织，ICANN是也,目前由ICANN管理地址相关分配工作。</p></li>
<li><p>IBM的地址段是9.0.0.0，AT&amp;T的地址段是12.0.0.0</p></li>
</ul>


<h3>ARP</h3>

<ul>
<li>没什么好讲的了，这个是最熟悉的</li>
</ul>


<h3>无连接网络</h3>

<pre><code>* 错误会被丢弃!!!

* IP报文已经包含了源-目的地址

* 分片控制

* 优先级

* 校验和

* 路由信息和时间戳
</code></pre>

<h3>ICMP</h3>

<ul>
<li>最好和Ping结合起来学习</li>
</ul>


<p>最后，读这本书后面的应用层也很好玩，能延伸想象很多东西，比如现在Linux下虚拟网卡的实现，Vmware如何虚拟物理网卡的，还有早期浩方上如果实现虚拟局域网的，很多原来看起来Magic的东西，其实原理很简单，平时多想想会很有趣。</p>

<p>从TCP/IP的设计来看，我们的网络应用还是停留在很"初级"的阶段，还没有完全发挥出他的潜力。未来肯定还会出现像P2P软件这样神奇的颠覆者，TCP/IP所承载的流量也会一次次变化，如果把TCP/IP比作海的话，不知道下一位弄潮儿是谁。</p>
]]></content>
  </entry>
  
</feed>
