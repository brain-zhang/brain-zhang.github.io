<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blockchain | Living a Simple Life is a Happy Life]]></title>
  <link href="https://brain-zhang.github.io/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="https://brain-zhang.github.io/"/>
  <updated>2025-04-09T10:38:19+08:00</updated>
  <id>https://brain-zhang.github.io/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于区块链未来的一些预测]]></title>
    <link href="https://brain-zhang.github.io/blog/2025/03/22/guan-yu-qu-kuai-lian-wei-lai-de-yu-ce/"/>
    <updated>2025-03-22T10:55:01+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2025/03/22/guan-yu-qu-kuai-lian-wei-lai-de-yu-ce</id>
    <content type="html"><![CDATA[<p>最近在翻阅Solana的源码，Solana的POH技术非常有意思，目前它的性能也远远超越了Ethereum，有一些思考和预测记录一下:</p>

<ol>
  <li>POS和POW之争会一直持续下去；</li>
  <li>人们投资数字货币的初衷，是不相信人管理的系统，而相信数学； 所以POW是根基</li>
  <li>但是区块链技术和数字货币要跟现实打通，就必须接受那些有控制欲的人类组织的管理，所以即使没有能源消耗问题，POS一定会有市场</li>
  <li>POS链是由人来博弈的，凡是人类争夺控制权的游戏，就一定会有非常多的开局，所以POS链未来会百花齐放，也许每一个国家、每一个公司、每一个组织，甚至每一个人都会发行自己的POS公链</li>
  <li>POW链永远只有一条公链占据绝对统治地位，因为这是个完全自由竞争的市场，长期算力一定会汇聚到共识最大的那条链</li>
  <li>最后POW的主场景是价值存储，POS的主场景是应用创新；</li>
  <li>POW的链变化少，可能比特币会长期存活并占据C位，而POS技术不断迭代，可能会你方唱罢我登场</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lnd Low Rescan Speed for Startup]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/06/05/lnd-low-rescan-speed-for-startup/"/>
    <updated>2021-06-05T17:31:07+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/06/05/lnd-low-rescan-speed-for-startup</id>
    <content type="html"><![CDATA[<p>Lnd启动的时候需要扫描最近数百个区块来验证安全性，做rescan动作的时候慢的出奇，有时候需要30分钟才能完成这个动作：</p>

<p>https://github.com/lightningnetwork/lnd/issues/760</p>

<p>如果单独启动Lnd可以耐着性子等，但是如果用Lit(lightning-network-termial) 启动的话，因为它集成了数个服务，所以在等Lnd RPC服务就绪前，往往等不到扫描完毕就超时退出了…</p>

<p>因为Lit Debug Log没有打全，我对于这个问题百思不得其解，其在bitcoin Regnet, Testnet, Mainnet上面的表现各不相同….</p>

<p>最后找到的一劳永逸的解决办法有两个：</p>

<ol>
  <li>
    <p>换btcd，不要用bitcoin core了</p>
  </li>
  <li>
    <p>换ssd硬盘，花钱解决</p>
  </li>
</ol>

<p>话说，bitcoin core还好一点，Ethereum一个全节点的成本已经越来越高了，硬盘需求已经直奔2T SSD了；对于个人来说，在AWS上启动一个2T云硬盘的vps着实花费不小；</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Close Lightning Channels by Lnd-cli?]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli/"/>
    <updated>2021-01-03T16:54:10+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli</id>
    <content type="html"><![CDATA[<p>越来越有老年痴呆的倾向，这个命令至少Google过3次了，每次都忘，被自己蠢哭了~~</p>

<p><code>
lncli closechannel &lt;fund_txid&gt; [fund_tx_vout_NO]
</code></p>

<p>不要忘了vout_NO，不然会报错”channel not found”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Systemd Startup Script for Bitcoind?]]></title>
    <link href="https://brain-zhang.github.io/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind/"/>
    <updated>2020-12-29T16:22:42+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind</id>
    <content type="html"><![CDATA[<h2 id="setup-bitcoindservice">setup bitcoind.service</h2>

<p><code>
vim /etc/systemd/system/bitcoind.service
</code></p>

<p>```
[Unit]
Description=Bitcoin daemon
After=network.target</p>

<p>[Service]
ExecStart=/opt/node/bitcoin/bin/bitcoind -daemon -conf=/opt/node/bitcoin/blockdata/bitcoin.conf -pid=/run/bitcoind/bitcoind.pid
# Creates /run/bitcoind owned by bitcoin
RuntimeDirectory=bitcoind
RuntimeDirectoryPreserve=yes
User=ubuntu
Type=forking
PIDFile=/run/bitcoind/bitcoind.pid
Restart=on-failure
StandardOutput=/var/log/bitcoind.log
StandardError=/var/log/bitcoind.log</p>

<h1 id="hardening-measures">Hardening measures</h1>
<p>####################</p>

<h1 id="provide-a-private-tmp-and-vartmp">Provide a private /tmp and /var/tmp.</h1>
<p>PrivateTmp=true</p>

<h1 id="mount-usr-boot-and-etc-read-only-for-the-process">Mount /usr, /boot/ and /etc read-only for the process.</h1>
<p>ProtectSystem=full</p>

<h1 id="disallow-the-process-and-all-of-its-children-to-gain">Disallow the process and all of its children to gain</h1>
<p># new privileges through execve().
NoNewPrivileges=true</p>

<h1 id="use-a-new-dev-namespace-only-populated-with-api-pseudo-devices">Use a new /dev namespace only populated with API pseudo devices</h1>
<p># such as /dev/null, /dev/zero and /dev/random.
PrivateDevices=true</p>

<p>[Install]
WantedBy=multi-user.target</p>

<p>```</p>

<h2 id="reload-systemctl-daemon">Reload systemctl daemon</h2>

<p><code>
systemctl daemon-reload
</code></p>

<h2 id="enabled-new-bitcoind-service">Enabled new bitcoind service</h2>

<p><code>
systemctl enable bitcoind
</code></p>

<h2 id="commands-to-start-or-stop-the-service">Commands to start or stop the service</h2>

<p><code>
systemctl stop bitcoind
systemctl start bitcoind
</code></p>

<h2 id="show-service-status">Show service status</h2>

<p><code>
systemctl status bitcoind.service
</code></p>

<p>More info in:</p>

<p>https://github.com/bitcoin/bitcoin/tree/master/contrib/init</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Logging on Solidity Contract With Truffle Suite]]></title>
    <link href="https://brain-zhang.github.io/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite/"/>
    <updated>2020-07-17T17:33:45+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite</id>
    <content type="html"><![CDATA[<p>Ethereum的智能合约调试起来很麻烦，到目前为止还是没有一个方便的类似于console.log()或printf的调用；</p>

<p>一般都是通过Event的方法来打印log；这种办法在写单元测试的时候很麻烦；</p>

<p>目前最接近于官方的手段是构造一个公用的Console库合约，然后链接到主合约里面来用；</p>

<p>https://github.com/trufflesuite/truffle-logger-example</p>

<p>这个PR一直没有Merge到TruffleSuite的新版本中，我们只能先临时手工Copy下代码来Monkey Patch一下；</p>

<p>步骤如下：</p>

<ul>
  <li>首先在主合约的同级目录添加Console.sol合约:</li>
</ul>

<p><code>
wget https://raw.githubusercontent.com/trufflesuite/truffle/truffleLogger/packages/core/lib/logging/Console.sol
</code></p>

<ul>
  <li>然后在部署脚本里面增加这个库的链接(以官方示例MetaCoin为例)</li>
</ul>

<p><code>
$ vim migrations/2_deploy_contracts.js
</code></p>

<p>```
const Console = artifacts.require(“Console”);
const MetaCoin = artifacts.require(“MetaCoin”);</p>

<p>module.exports = function(deployer) {
      deployer.deploy(Console);
        deployer.link(Console, MetaCoin);
          deployer.deploy(MetaCoin);
          };</p>

<p>```</p>

<ul>
  <li>在需要打印log的单元测试中引入Console.sol</li>
</ul>

<p><code>
$ vim test/TestMetaCoin.sol
</code></p>

<p>```
import “../contracts/Console.sol”;</p>

<p>…..
    console.log(“xxxxxx”);
```</p>
]]></content>
  </entry>
  
</feed>
