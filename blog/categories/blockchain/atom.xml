<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blockchain | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2019-11-18T15:28:37+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Lightning Node Cheat Sheet]]></title>
    <link href="https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet/"/>
    <updated>2019-11-18T15:14:19+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet</id>
    <content type="html"><![CDATA[<p>运营一个闪电节点的基本命令速查；</p>

<!-- more -->

<h2 id="bitcoin-core">Bitcoin Core</h2>

<h4 id="section">启动</h4>

<p><code>
bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/
</code></p>

<p>如果需要一些老接口</p>

<p><code>
bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/ --deprecatedrpc=signrawtransaction
</code></p>

<h4 id="bitcoinconf">bitcoin.conf</h4>

<p>```
rpcuser=user
rpcpassword=password
#rpcallowip=127.0.0.1/16
rpcallowip=0.0.0.0/0
rpcport=8332
test.rpcport=8332
rpcthreads=10
server=1
rest=1
testnet=0
zmqpubrawblock=tcp://127.0.0.1:28332
zmqpubrawtx=tcp://127.0.0.1:28333</p>

<h1 id="walletnotifyusrbinecho-hello">walletnotify=/usr/bin/echo “hello”</h1>
<p>```</p>

<h2 id="lnd">Lnd</h2>

<p>接口丰富，自带rpc和restapi接口，迭代速度快；</p>

<p>https://github.com/lightningnetwork/lnd</p>

<h4 id="section-1">部署</h4>

<p><code>
lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=user --bitcoind.rpcpass='password' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=207.246.105.100 --no-macaroons 2&gt;&amp;1 &gt;&gt; lndtest.log
</code></p>

<h4 id="section-2">常用命令</h4>

<ul>
  <li>解锁钱包</li>
</ul>

<p><code>
lncli  --network=testnet unlock
lncli  --network=testnet newaddr
</code></p>

<ul>
  <li>查看余额</li>
</ul>

<p><code>
lncli  --network=testnet walletbalance
lncli  --network=testnet listunspent
</code></p>

<ul>
  <li>连接到一个闪电节点</li>
</ul>

<p><code>
lncli  --network=testnet connect "027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8@3.13.29.161:9735"
</code></p>

<ul>
  <li>打开一个通道</li>
</ul>

<p><code>
lncli  --network=testnet openchannel --node_key 027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8 100000
</code></p>

<ul>
  <li>支付</li>
</ul>

<p><code>
lncli  --network=testnet sendpayment --pay_req "lntb10n1pw6gf60pp5jxwg30u3k7qw2lzef7cnpy6tmnd80q2v5ytglf5tdaalrejhprzsdqhvf6xxmt9ypkxuepqw3jhxaqcqzpg9jsccqelkelayq89ydgrhxwf0hv2ffkdu2y6l27vtpmscszxj3pjsh..."
</code></p>

<ul>
  <li>接收付款</li>
</ul>

<p><code>
lncli  --network=testnet addinvoice --memo "invoice for lnd.fun test3" --amt 100000
</code></p>

<ul>
  <li>关闭通道</li>
</ul>

<p><code>
lncli  --network=testnet closechannel "1243f60a54c4c6b8ab5d124a0c701792e085ab13a68da135ca3ffbabb461f1cc"
</code></p>

<ul>
  <li>链上发送全部余额</li>
</ul>

<p><code>
lncli  --network=testnet sendcoins tbxxxxxx  --sweepall
</code></p>

<h2 id="c-lightning">C-lightning</h2>

<p>接口简洁，能直接集成lightning-charge；</p>

<p>https://github.com/ElementsProject/lightning</p>

<h4 id="section-3">部署</h4>

<ul>
  <li>c-lightning提供了systemctl 服务脚本:</li>
</ul>

<p>```
cat /etc/systemd/system/lightning.service</p>

<p>[Unit]
Description=c-Lightning daemon</p>

<p>[Service]
ExecStart=/usr/bin/lightningd –pid-file=/root/.lightning/lightning.pid –daemon
PIDFile=/root/.lightning/lightning.pid
User=root
Type=forking
Restart=always
RestartSec=10</p>

<p>[Install]
WantedBy=multi-user.target
```</p>

<ul>
  <li>配置文件:</li>
</ul>

<p>```
~/.lightning/config</p>

<p>alias=brain_zhang_lightning_testnode
log-level=debug
#network=bitcoin
network=testnet
bitcoin-rpcuser=user
bitcoin-rpcpassword=password
bitcoin-rpcconnect=127.0.0.1
bitcoin-rpcport=18332
log-file=/var/log/lightning.log
bind-addr=
announce-addr=x.x.x.x:9735
```</p>

<ul>
  <li>注册、启动服务</li>
</ul>

<p><code>
systemctl enable lightning
systemctl start lightning
</code></p>

<h4 id="section-4">常用命令</h4>

<ul>
  <li>建立一个新地址</li>
</ul>

<p><code>
lightning-cli newaddr
</code></p>

<ul>
  <li>查看线上钱包地址</li>
</ul>

<p><code>
lightning-cli dev-listaddrs
</code></p>

<ul>
  <li>连接node (1ml.com node)</li>
</ul>

<p><code>
lightning-cli connect 02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248@23.237.77.12:9735
</code></p>

<ul>
  <li>建立通道</li>
</ul>

<p><code>
lightning-cli fundchannel id satoshi [feerate] [announce] [minconf]
</code></p>

<ul>
  <li>查看链上和链下余额</li>
</ul>

<p><code>
lightning-cli listfunds
</code></p>

<ul>
  <li>支付</li>
</ul>

<p>Send payment specified by {bolt11} with {amount}</p>

<p><code>
lightning-cli pay bolt11 [msatoshi] [label] [riskfactor] [maxfeepercent] [retry_for] [maxdelay] [exemptfee]
</code></p>

<ul>
  <li>收款</li>
</ul>

<p>Create an invoice for {msatoshi} with {label} and {description} with optional {expiry} seconds (default 1 hour), optional {fallbacks} address list(default empty list) and optional {preimage}</p>

<p><code>
lightning-cli invoice msatoshi label description [expiry] [fallbacks] [preimage] [exposeprivatechannels]
</code></p>

<h2 id="c-lightning--lightning-charge">C-lightning &amp;&amp; lightning-charge</h2>

<p>https://github.com/btcme/lightning-charge</p>

<h4 id="section-5">部署</h4>

<p>lightning-charge最好用docker直接集成c-lightning一把启动，比如我已经运行了一个bitcoin core全节点，可以直接下面的命令启动:</p>

<p><code>
docker run -d -u `id -u` -v `pwd`/data:/data -p 9735:9735 -p 9112:9112 \
             -e API_TOKEN=mySecretToken \
             -e NETWORK=testnet  \
             -e BITCOIND_URI="http://user:password@172.18.0.1:18332" \
             shesek/lightning-charge
</code>
注意BITCOIND_URL的IP是docker容器内向外连接的，如果不是用net的方式启动，要填docker的网桥地址；</p>

<ul>
  <li>查询运行状况</li>
</ul>

<p><code>
curl http://api-token:mySecretToken@localhost:9112/info
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -1]]></title>
    <link href="https://happy123.me/blog/2019/11/05/hello-lightning-network-1/"/>
    <updated>2019-11-05T17:17:48+08:00</updated>
    <id>https://happy123.me/blog/2019/11/05/hello-lightning-network-1</id>
    <content type="html"><![CDATA[<h2 id="section">简明闪电网络科普-1</h2>

<p>我们之前写文章评价道，闪电网络是次世代的支付技术，它不仅仅是一个支付技术，更是建立在比特币主网上的二层网络协议，将来会有许许多多新奇的应用建立在上面，它会为比特币开启下一个十年；</p>

<p>但是闪电网络还在实现的早期阶段，能耐心去读懂它的白皮书的人已经非常少了，更不用提现在飞速发展的<a href="https://github.com/lightningnetwork/lightning-rfc/">BOLT规范</a>了；这其实跟比特币刚诞生时是一样的，在动辄就大谈“区块链技术改变未来”的那一群人中，有几人会真正花时间，去把已经发表11年的比特币8页白皮书弄个明白呢？</p>

<p>闪电网络的基本原理其实非常简单，在我们之前的文章中已经花费了大量篇幅去介绍；但是在实现过程中，还有数不清的工程细节上的权衡；由于现在的实现还只是一个雏形，我们实操闪电网络交易的时候会有各种各样的“？”，我打算写一个系列文章，把一些有趣或者让人困惑的地方抽丝剥茧，记录一下自己的学习过程，也把这项迷人的技术介绍给更多人。</p>

<p>我们将在这篇文章中讨论闪电网络的通道入站容量(Inbound Capacity)问题。</p>

<!-- more -->

<p>凡是亲身体验闪电网络钱包的人，都是这样一个过程:</p>

<ol>
  <li>发送小额的比特币给钱包链上地址</li>
  <li>连接到一个闪电网络节点，创建一个通道，并放置一些币到通道中；</li>
  <li>通过闪电网络发送一笔支付交易</li>
</ol>

<p>到目前为止，一切顺利(当然，对于技术小白来讲，这三个步骤已经足够艰辛了)；然后他会立即遇到闪电网络中第一个令人困惑的问题：</p>

<ul>
  <li>我如何收款？</li>
</ul>

<p>在解决这个问题之前，我们需要复习一些基础知识；你会惊奇的发现，我们前文所说的<code>工程上的细节</code>到底是多么细节的东西；</p>

<h4 id="local-balance-and-remote-balance">本地余额与远程余额 (local balance and remote balance)</h4>

<p>当我们初次建立一个支付通道时，用<code>lncli listchannels</code>探测，一般必要信息是这样的:</p>

<p><code>
        {
            "active": true,
            "remote_pubkey": "xxxxxxxxxx",
            "channel_point": "zzzzzzzzzz:0",
            "chan_id": "17405554940800000000",
            "capacity": "279359",
            "local_balance": "279176",
            "remote_balance": "0",
            "commit_fee": "183",
            "commit_weight": "600",
            "fee_per_kw": "253",
            "unsettled_balance": "0",
            "total_satoshis_sent": "0",
            "total_satoshis_received": "0",
            "num_updates": "48",
            "pending_htlcs": [
            ],
            "csv_delay": 144,
            "private": false,
            "initiator": true,
            "chan_status_flags": "ChanStatusDefault",
            "local_chan_reserve_sat": "2793",
            "remote_chan_reserve_sat": "2793",
            "static_remote_key": false
        },
</code></p>

<p>我们先来关注一下 <code>local_balance</code>和<code>remote_balance</code>这两个参数；</p>

<p>如果还记得我们之前的<a href="https://happy123.me/blog/2019/01/06/bi-te-bi-de-jiao-yi-7/">科普文章</a>的话；构建闪电通道的第一个步骤是建立一笔Funding TX；
这需要双方拿出一定量的比特币放入通道中，这样就会有固定数量的比特币被锁定到通道中，称为通道容量(capacity); 通道发起方投入的金额称为本地余额(local_balance)，对端投入的金额称为远程余额(remote_balance)；</p>

<p>在上面这个例子中，我们看到作为通道发起方，local_balance是279176 satoshi，remote_balance是0，代表对端仅仅是跟我们建立通道链接，并没有放币进来；</p>

<p>local_balance和remote_balance可以在不关闭通道的情况下多次更新，但是如果不关闭或者拼接通道，通道容量无法更改；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg0.png" alt="img" /></p>

<blockquote>
  <p>我们可以把它想象成一个沙漏，虽然沙子的总量是固定的，但是我们可以在沙漏的上下部之间移动啥子，如果想要改变沙子的总量，就需要打破沙漏；</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg1.png" alt="img" /></p>

<blockquote>
  <p>如图：以你的视角来看，你和ROBERT的通道容量是8 btc, local_balance是5btc，remote_balance是3btc; 以ROBERT的视角来看，他的local_balance是3btc，remote_balance是5btc</p>
</blockquote>

<p>每次你付款时，都会把local_balance的部分余额推给对端的ROBERT。 同样的，当收到一笔付款时，local_balance也会增加，remote_balance会减少；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg2.png" alt="img" /></p>

<blockquote>
  <p>如图：当你支付ROBERT 1BTC时，你的local_balance减少1BTC，而remote_balance增加1BTC;</p>
</blockquote>

<p>回到我们最初的例子，因为remote_balance的余额是0 satoshi，所以在只有这一个通道的情况下，你最多发送279176 satoshi，却无法接受付款；</p>

<p>可能聪明的你已经想到了，作为主动发起通道连接的一方，在通道中放入资金是天经地义的，但是对方却没有义务配合你放入资金；为了能获得remote_balance，你需要给对方一点好处才行，目前请求remote_balance的通道连接已经变成了一种服务，你需要<code>购买</code>这样的服务，以便在建立支付通道的时候能有remote_balance余额；</p>

<p>比如这个服务商：</p>

<p>https://yalls.org/about/</p>

<p>那么，购买这种服务，保证自己的支付通道中拥有remote_balance，有什么作用呢？为什么我们收款必须要依赖于它呢？</p>

<h4 id="inbound-and-outbound-capacity">进出容量(Inbound and Outbound Capacity)</h4>

<p>现在，我们已经更清楚的了解了是什么决定了通道的容量以及local_balance和remote_balance 平衡更新的方式，接下来我们考虑一下，如果你是连接节点网络的一部分，会发生什么情况？</p>

<p>两个对等点不需要直接建立支付通道来互相支付。相反，他们可以通过路由节点中转支付。在路由的每一跳，都会发生对应通道内local_balance和remote_balance余额的更新。</p>

<p>假设你想要通过闪电网络出售一个披萨。你至少需要连接到一个闪电网络节点。你会仔细的选择人气尽可能高的节点，为你的顾客–SOPHIE和ANGELA提供收款服务；</p>

<p>这个时候的闪电网络拓扑是这样的：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg3.png" alt="img" /></p>

<blockquote>
  <p>你打开了一个连接到LNTOP的支付通道，并在其中放入2个BTC，你的local_balance是2BTC，remote_balance为0BTC</p>
</blockquote>

<p>现在，ANGELA想要买个披萨，并通过LNTOP支付给你。但是，你与LNTOP的支付通道里，remote_balance为0，所以LNTOP无法付款给你；</p>

<p>在某个特定时刻，你可以接收到的金额或者入站容量(Inbound Capacity)受到remote_balance的限制。你不能收到比你的邻接节点能发送给你的更多的金额。</p>

<p>类似的，你可以发送的金额，或者说出站容量(Outbound Capacity)也同样受到local_balance的限制。</p>

<p>当你用LNTOP打开一个通道时，你决定想要锁定多少比特币，即你的local_balance；类似的，如果LNTOP与你打开一个通道，他们将确定你的初始remote_balance。这具有重要意义。虽然选择local_balance允许你决定初始Outbound Capacity，但你无法控制remote_balance和Inbound Capacity。</p>

<p>如果你今天启动你的闪电节点，并简单的打开一个通道到你选择的另一个节点，你可能会惊奇的发现，自己没有Inbound Capacity，从而无法通过闪电网络接收付款；这对于一个商家来说绝对是大问题；</p>

<p>幸运的是，有好几种方法来获得Inboound Capacity，包括上面提到的，花钱给一些商家，让他们来为你提供一些remote_balance；</p>

<p>…TODO  方法待另一篇文章介绍</p>

<h4 id="section-1">这样就解决问题了吗？</h4>

<p>嗯……，当然不会这么简单……在一个复杂的网络中，即使你在直接相连的通道中有足够的remote_balance，但你不能保证支付路径上的每一个节点都有充足的remote_balance； 让我们揭示网络中所有节点的local_balance和remote_balance，来更好的理解资金如何流动。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg4.png" alt="img" /></p>

<blockquote>
  <p>如图: LNTOP是一个大的中转节点，与他相邻的每个节点都有LNTOP提供的remote_balance</p>
</blockquote>

<p>这样你与LNTOP的支付通道中，你的remote_balance为3BTC， 而LNTOP与ANGELA的支付渠道中，LNTOP的remote_balance为2BTC，这样ANGELA最多能发送给你2BTC；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg5.gif" alt="img" /></p>

<blockquote>
  <p>如图：ANGELA为你发送了1BTC</p>
</blockquote>

<p>但是在这个网络中，SOPHIE甚至不能发送1BTC给你。如果你看一下SOPHIE和你之间的支付路线，就会发现LNTOP没有接收SOPHIE付款的能力；</p>

<p>对于收款，要求每个路由节点与你(接收方)之间都需要与前一个相邻的节点具有足够的Inbound Capacity；因此，即使你可能通过相邻节点获得了Inbound Capacity，但是整个支付路径上的某些节点可能并没有足够的Inbound Capacity；这样你仍然不能完成收款；</p>

<p>最致命的一点是，这种”显示所有节点的remote_balance和local_balance”的事情在闪电网络中是做不到的；作为网络的一个节点，我们只能知道其他支付通道的容量，而不知道它是如何在相连的两个节点之间分配资金的；</p>

<h4 id="section-2">谁会受影响</h4>

<p>在闪电网络中，并不是所有的节点都有同等的需求。查看我们的示例，全网至少会有三种类型的节点：</p>

<h5 id="section-3">商人节点</h5>

<p>商人节点主要需求是收款，因此，他需要Inbound Capacity，并且从客户到商人节点之间的支付路径上每一个节点，都要有足够的Inbound Capacity;</p>

<h5 id="section-4">用户节点</h5>

<p>用户主要通过闪电网络发送资金，偶尔也会从朋友那里收到一些钱； 对于这些用户，他们的关键是要连接到的节点具有足够的资金能路由给商家；这些用户需要保有少量的remote_balance即可；</p>

<h5 id="section-5">路由节点</h5>

<p>这些节点通过网络路由支付并为此收费。LNTOP就是这样的例子；</p>

<p>他们的工作是探测可用的支付路径。所以他们需要上游与终端用户的Inbound Capacity，以及下游与商家的Outbound Capacity；此外，它们的收费必须与市场上其他的公司竞争，他们还需要确保可靠性、充裕的流动性；这是一项艰难的工作，不是吗？</p>

<p>有很多攻击闪电网络的言论是：只有那些资金充裕的大公司才能有足够的精力和财力运行路由节点，根据马太效应，用户也会倾向于选择这些公司运营的节点服务；这样就会慢慢造成寡头垄断，最终比特币变成一个中心化的东西，变成一个大公司的玩物；</p>

<p>真的是这样的吗？</p>

<h4 id="section-6">结论</h4>

<p>我们讨论了一个支付通道具有的特性，其通道容量、local_balance、remote_balance、Inbound Capacity, Outbound Capacity； 我们看到，闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>但我得说，这些批评者过于心急了；就像比特币诞生初期，很多传统的经济学家批评比特币的<code>通缩</code>特性一样；</p>

<p>为了解决这些问题，社区以一个惊人的创新速度不断提出解决方法，包括WIP、Lightning Loop、多路径余额合并平衡等等；我们也将会在后面的文章中一一介绍；</p>

<p>最后，数字货币世界还是处于蛮荒狂野时代，不是那么多事情都是理所当然的; 每个人的言论都需要批判吸收； </p>

<p>乔帮主的训诫还是需要时时温习：饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</p>

<h4 id="section-7">引用</h4>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eltoo-闪电和离线契约更新机制]]></title>
    <link href="https://happy123.me/blog/2019/09/13/eltoo-shan-dian-he-chi-xian-qi-yue-geng-xin-ji-zhi/"/>
    <updated>2019-09-13T10:29:32+08:00</updated>
    <id>https://happy123.me/blog/2019/09/13/eltoo-shan-dian-he-chi-xian-qi-yue-geng-xin-ji-zhi</id>
    <content type="html"><![CDATA[<p class="info">在我们之前的文章中，对闪电网络的来龙去脉和原理做了详尽的分析；我们提出，相对于现在的传统支付技术，闪电网络技术有一个不可思议的跨越，用时髦一点的话来说，这是次世代的支付技术，假以时日，我相信它的未来不可限量；</p>

<p>闪电网络可以说是比特币二层网络技术的急先锋，它除了开拓比特币的支付愿景，还在很多层面对将来二层网络的发展提出了很多基础协议功能；这一切目前都收集在闪电网络基础技术规范，简称BOLT(Basis of Lightning Technology文档中；</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>

<!-- more -->

<p>仔细阅读BOLT就会发现，闪电网络并不是一个单一的协议，它是一整套协议，并且许多部分都被设计为可替代的；最典型的就是支付通道的部分；</p>

<p>为了保证支付通道双方不作弊，需要给作弊方施加足够的惩罚威慑，目前的支付通道采用的惩罚机制称为 “L2-penalty”机制；这是是JosephPoon和Thaddeus Dryja在原版Lightning Network白皮书中发明的协议;因此也被称为<code>Poon-Dryja通道</code>;</p>

<p>除了这种实现，其实还有另外一种双向支付通道协议，称为[双工小额支付渠道（DMC）]，由Decker和Wattenhofer [2015年]发明。Christian Decker是Blockstream的开发人员，后来blockstream将这个协议进一步完善，发展为Eltoo规范，并在2018年提出；</p>

<p>Eltoo简化了惩罚机制，效率更高，不仅能用于支付渠道当中，还有一个更广泛的应用，打开人任意多方(&lt;7)在二层网络上实现智能合约的可能性；</p>

<p>这个原理讲起来脑洞很大，我读它的论文的时候又一次感叹: 还有这种操作？</p>

<p>看来比特币社区的技术发展已经远远走到了时代的前面，你不能说比特币的技术是老旧的，以目前的发展来看，比特币的底层架构之稳健，足够支持更多的未来黑科技运行在上面；</p>

<p>…….TODO 需要填坑</p>

<p>Eltoo的实施需要一个软分叉，需要现有的比特币主网支持名为<code>SIGHASH_NOINPUT</code>的操作符，结合Schnorr 签名技术，将来会实现许多非常有意思的功能；</p>

<p>最后再强调一遍，闪电网络不仅仅是一个支付的技术，他为比特币二层网络的各种应用构建提供了基础，相信在未来，会出现很多神奇的应用，有多神奇我无法想象；但这个技术绝不是一时的噱头，现在种种迹象表明，它会为比特币开启下一个十年；</p>

<p>引用资料:</p>

<p>https://blockstream.com/2018/04/30/en-eltoo-next-lightning/</p>

<p>https://blockstream.com/eltoo.pdf</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理想中的比特币全节点实现]]></title>
    <link href="https://happy123.me/blog/2019/08/18/li-xiang-zhong-de-bi-te-bi-quan-jie-dian-shi-xian/"/>
    <updated>2019-08-18T15:59:29+08:00</updated>
    <id>https://happy123.me/blog/2019/08/18/li-xiang-zhong-de-bi-te-bi-quan-jie-dian-shi-xian</id>
    <content type="html"><![CDATA[<p>虽然比特币已经运行十年，各式各样的比特币全节点实现已经很多了，但是我觉得还是有必要再增添一员；</p>

<p>我理想中的比特币全节点实现是这样的:</p>

<ul>
  <li>他的核心是模块化可拆分的</li>
  <li>他的核心不包括挖矿和钱包，可以为这两个功能提供接口作为插件来实现，但是不要耦合到核心里面</li>
  <li>他要实现BIP-157和BIP-158，不能为了导入一个新私钥就重新扫描一遍区块链</li>
  <li>他要兼容Lightning，并实现其瞭望塔功能</li>
  <li>交易存储最好用merkle-patricia-tree来实现，如此一来像ElectrumX这样的服务节点就可以去掉了</li>
  <li>他必须原生支持所有的SPV钱包调用，并形成一个BIP规范</li>
  <li>他必须可以是纯SPV，可以是全Block，也可以从一个checkpoint之后只存储需要的block</li>
  <li>最后，他最好能运行在一台1Core 1G 1M的小VPS上面</li>
</ul>

<p>我好像真贪心呢^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闪电网络慢慢成长]]></title>
    <link href="https://happy123.me/blog/2019/05/21/shan-dian-wang-luo-man-man-cheng-chang/"/>
    <updated>2019-05-21T09:44:25+08:00</updated>
    <id>https://happy123.me/blog/2019/05/21/shan-dian-wang-luo-man-man-cheng-chang</id>
    <content type="html"><![CDATA[<p>学习一件事情的最好办法就是尽可能去用。</p>

<p>我在Bitcoin Testnet上面运行一个LND全节点已经有很长时间了，对现在闪电网络的进化速度都有了直观的体验：<code>积跬步，至千里</code>；</p>

<!-- more -->

<p>首先必须先承认，现在要完整的体验闪电网络，即从后台构建+前端使用整个流程，是非常麻烦的，恐怕只有对其原理有比较深入了解的人才能完成这个过程；简单说一下:</p>

<h4 id="linux">1.需要Linux环境</h4>

<h4 id="bitcoin---">2.需要运行一个bitcoin全节点，因为都是命令行操作，所以要<code>手工创建钱包</code> -&gt; <code>转账确保钱包有余额</code></h4>

<ul>
  <li>bitcoin.conf的配置文件模板</li>
</ul>

<p>```
rpcuser=xxxxx
rpcpassword=xxxxx
rpcallowip=127.0.0.1/16
rpcport=18332
test.rpcport=18332
rpcthreads=10
server=1
rest=1
testnet=1
zmqpubrawblock=tcp://127.0.0.1:28332
zmqpubrawtx=tcp://127.0.0.1:28333</p>

<p>```</p>

<ul>
  <li>启动bitcoind</li>
</ul>

<p>```
bitcoin/bin/bitcoind –conf=~/bitcoin.conf –datadir=/opt/bitcoin/blockdata/ </p>

<p>```</p>

<ul>
  <li>同步后找到当前钱包收款地址</li>
</ul>

<p>```
bitcoin-cli listaddressgroupings</p>

<p>```</p>

<ul>
  <li>
    <p>发送一笔转账到此地址，也可以直接去<a href="https://bitcoinfaucet.uo1.net/send.php">bitcoinfaucet</a>领一些测试币</p>
  </li>
  <li>
    <p>确认钱包余额</p>
  </li>
</ul>

<p>```
bitcoin-cli getwalletinfo</p>

<p>```</p>

<h4 id="lnd-daemon">3.运行一个LND Daemon</h4>

<p>这方面有几个主流选择，lightning labs的<a href="https://github.com/lightningnetwork/lnd">lnd</a>，或者<a href="https://github.com/ElementsProject/lightning">c-lightning</a>，或者<a href="https://github.com/mit-dci/lit">lit</a></p>

<p>lnd支持比较广泛，我们用其0.6beta版本搭建；</p>

<ul>
  <li>按照项目文档构建Go编译环境，编译生成lnd和lnd-cli两个可执行文件</li>
  <li>启动lnd daemon(注意这里没有启用验证，在mainnet上面切不可这么做)</li>
</ul>

<p>```
lnd –bitcoin.active –bitcoin.testnet –debuglevel=debug –bitcoin.node=bitcoind –bitcoind.rpcuser=xxxxx  –bitcoind.rpcpass=’xxxxx’ –bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 –bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 –no-macaroons</p>

<p>```</p>

<ul>
  <li>之后lnd会通过bitcoind node同步区块头，大概需要10分钟</li>
  <li>创建lnd的钱包，保存seed，便于之后恢复</li>
</ul>

<p>```
lncli –network=testnet create</p>

<p>```</p>

<ul>
  <li>创建一个segwit地址</li>
</ul>

<p>```
lncli –network=testnet newaddress np2wkh
2NF5UC1ZgQzb8Ustm9JCTbQQTU5Ca438WWf</p>

<p>```</p>

<ul>
  <li>打一些测试币给这个地址</li>
</ul>

<p>```
/bitcoin-cli sendtoaddress 2NF5UC1ZgQzb8Ustm9JCTbQQTU5Ca438WWf 0.005</p>

<p>```</p>

<ul>
  <li>看一下钱包信息，收到款没有</li>
</ul>

<p>```
lncli –no-macaroons –network=testnet walletbalance</p>

<p>```</p>

<h4 id="section">4. 建立通道</h4>

<ul>
  <li>直接到<a href="https://1ml.com/testnet/">1ml.com</a>找最近连接数最多的节点, 比如<a href="https://1ml.com/testnet/node/038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9">Node: aranguren.org</a>:</li>
</ul>

<p>```
node ID:038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.95.10:9735</p>

<p>```</p>

<ul>
  <li>连接这个节点：</li>
</ul>

<p>```
lncli –no-macaroons –network=testnet connect 038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.95.10:9735</p>

<p>```</p>

<ul>
  <li>建立通道，放一笔钱进去</li>
</ul>

<p>```
lncli –no-macaroons –network=testnet openchannel –node_key=038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9 40000</p>

<p>```</p>

<ul>
  <li>需要一段时间同步，然后看一下通道状态:</li>
</ul>

<p>```
lncli –network=testnet listchannels</p>

<p>```</p>

<h4 id="section-1">5. 支付</h4>

<ul>
  <li>首先到<a href="https://testnet.satoshis.place/">testnet.satoshis.place</a>涂鸦两笔，得到一个支付地址:</li>
</ul>

<p>```
lntb1pwwykwhpp5jw4tekxmsqjwepw4070em7xe7gw3v8mxtenexmsp2np3pcc40jwqdqqxqruyqrzjqfcxsh9gr28y6ngphmk90q05ejfydpq89tjjc5rl36lfmtcv424hk9e8sgqqqvsqqqqqqqlgqqqqqeqqjqjpfnq26e2flenp79ywpyyftg3najf3wtpvkwuuw2h9y3dzdn7kc3342h6uzgf69ms8sx6fxsh5j2jcwzulr3dufryn9ljadm0wuj9fcpm86fax</p>

<p>```</p>

<ul>
  <li>lnd-cli支付</li>
</ul>

<p>```
lncli  sendpayment –pay_req lntb1pwwykwhpp5jw4tekxmsqjwepw4070em7xe7gw3v8mxtenexmsp2np3pcc40jwqdqqxqruyqrzjqfcxsh9gr28y6ngphmk90q05ejfydpq89tjjc5rl36lfmtcv424hk9e8sgqqqvsqqqqqqqlgqqqqqeqqjqjpfnq26e2flenp79ywpyyftg3najf3wtpvkwuuw2h9y3dzdn7kc3342h6uzgf69ms8sx6fxsh5j2jcwzulr3dufryn9ljadm0wuj9fcpm86fax 500</p>

<p>```</p>

<h4 id="section-2">6. 收款</h4>

<p>lnd构建一个收款节点比较麻烦，我们可以借助一个实现了lnd hub全功能的钱包来体验，推荐 <a href="https://github.com/ACINQ/eclair">elcair</a>；</p>

<p><a href="https://bluewallet.io/">BlueWallet</a>也是一个非常受欢迎的闪电网络钱包，不过他并没有实现完整的lightning hub的功能，作为想要完全掌控一切的玩家不太合适，当然对于普通用户来说，BlueWallet更易用：</p>

<p>https://medium.com/bluewallet/bluewallet-brings-zero-configuration-lightning-payments-to-ios-and-android-30137a69f071</p>

<ul>
  <li>关于 elcair如何构建一个收款地址的过程，可以参考:</li>
</ul>

<p>https://medium.com/@ACINQ/enabling-receive-on-eclair-mobile-2e1b87bd1e3a</p>

<ul>
  <li>老实说，使用elcair的过程也需要一点技术，至少要搞明白我们之前讲述闪电网络技术原理的那篇文章</li>
</ul>

<h4 id="section-3">7. 总结</h4>

<p>好啦，相信小白看到这里已然头昏眼花，并发出怒吼：这么复杂的东西谁会用啊！</p>

<p>我得说，在使用闪电网络的过程中，我体会到了巨大的乐趣，就跟我第一次手工完成一笔比特币交易一样的乐趣！</p>

<p>回想互联网之初，发个电子邮件也需要精通命令行操作的<code>专家人士</code>来完成，跟现在闪电网络的使用体验完全一样！</p>

<p>我也相信随着产业发展，这项技术迟早会变得跟电子邮件一样，在IPAD上动动手指就完成一切，我憧憬着这一天。</p>

<p>然后我们看一下现在闪电网络面临的一些技术和实务上的挑战：</p>

<ol>
  <li>目前还没有完全靠谱的，敢于宣称可安全用于生产的基础软件实现，大家都在beta版</li>
  <li>目前运行一个lnd，需要配置一个bitcoin fullnode，而且是一对一的，成本比较高，虽然运行一个全节点可以取得一些手续费，但是其风险和收益不成对比；bitmex有<a href="https://blog.bitmex.com/the-lightning-network-part-2-routing-fee-economics/">一篇文章</a>详细分析了现在运行一个闪电网络节点的收益情况；</li>
  <li>现在lit项目和Neutrino项目都朝着<code>运行一个支持闪电节点的SPV节点</code>这个方向努力，但距离完成还有很长时间；</li>
  <li>在我们之前的文章分析中，每一个钱包，都需要一个类似<code>瞭望塔</code>的模块，来监控通道的状态；围绕这个实现，目前有两大流派：一类就是elcair 钱包自己继承这个功能，这就要求用户的钱包不能脱离网络超过两周；第二类就是BlueWallet的实现，让用户放弃掌控一切，由钱包服务商托管；这两种方案各有优劣，之后还要看市场和众多黑客们的测试结果；</li>
  <li>Electrum目前也在进行闪电网络的实现，他们采用了改造ElectrumX server端，增加一个和lnd连接的中间通讯层的方法，并且ElectrumX是可以复用的，以后如果lnd实现了Neutrino，可以完成<code>ElectrumX+Lnd+Neutrino</code>的部署，估计这样成本低，运营的好的话，能赚点小钱；</li>
</ol>

<p>最后的最后：</p>

<ul>
  <li>
    <p>闪电网络的成长目前是一个非常壮丽的场景，堪比互联网发展之初；</p>
  </li>
  <li>
    <p>终于出现了这样一种基础金融技术:</p>
    <ul>
      <li>可以支持个人开银行，没有任何法律、宗教、地域、政府的隔阂；</li>
      <li>只要有网络和你的信用，就可以面向全球用户做一个银行家；</li>
      <li>而且你的银行没有柜台、没有繁琐的开户流程，没有金碧辉煌的大楼，只需要一个联网的手机而已；但这是世界上最讲信用的，最具有扩展性的，最安全的银行；</li>
      <li>你的用户也无需繁琐的身份证明，政策限制，高昂的手续费，屈服于传统银行的被冻结账户的风险，甚至都不需要物理的货币和钱包，只需要在脑子里记住一串密语而已；而对于将来的那些<code>世界银行家</code>来说，你的信用就是一切。酷!!!</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
</feed>
