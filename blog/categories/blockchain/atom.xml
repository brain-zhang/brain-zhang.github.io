<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blockchain | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2019-12-10T08:56:26+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -3]]></title>
    <link href="https://happy123.me/blog/2019/11/30/hello-lightning-network-3/"/>
    <updated>2019-11-30T09:12:24+08:00</updated>
    <id>https://happy123.me/blog/2019/11/30/hello-lightning-network-3</id>
    <content type="html"><![CDATA[<p>在前面几篇文章中我们评论道：闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>为了理解这个问题，我们对于闪电网络的原理做了详细的探讨，现在是谈谈社区的一些解决方案的时候了；</p>

<p>我们这篇文章就来探讨为了解决Inbound Capacity问题，目前lightningLab的一个实验项目：</p>

<p><a href="https://github.com/lightninglabs/loop">loop</a></p>

<!-- more -->

<h4 id="inbound-capacity">再次回忆Inbound Capacity</h4>

<p>想一下，我们什么时候需要注入Inbound Capacity；简单来说，有两种典型的场景：</p>

<ol>
  <li>商家收款，Inbound Capacity消耗殆尽</li>
  <li>小白初次体验闪电钱包，向朋友收款，需要开辟第一个收款通道</li>
</ol>

<p>在一个人人都使用闪电的理想未来中，这个系统是自平衡的。你付给别人的钱和你从他们那里得到的钱一样多，而资金只是不停地来回流动。然而，在今天的闪电网络状态下，这并不符合实际情况。例如，一个商人通过闪电销售产品，但通过另一种支付方式支付其供应商可能会积累越来越多的平衡在其闪电渠道，直到客户不能再支付。所有的资金都移到了商人那边。</p>

<p>现在最普遍的解决办法就是向三方服务商购买通道服务。这就造成了一个让比特币老手匪夷所思的疑问：不是说闪电网络好用吗？怎么收个款这么折腾？难道我要收款，还得先求别人来给我铺路？</p>

<p>为什么我不能自己动手，丰衣足食呢？还有，假如我是商家，收款的时候还得时时操心额度够不够，这不是折腾吗？</p>

<p>这是非常正常的质疑，因此我们一再说闪电网络还处于发展期，有很多基础设施不够完善；</p>

<h2 id="loop">LOOP</h2>

<ul>
  <li>在我们的想象中，闪电网络应该提供这样一种服务：</li>
</ul>

<p>让用户能够用来自钱包或交易所的链上比特币来填充他们的闪电通道。当用户通过闪电网络进行一系列支付时，她的Inbound 余额就会下降。然后，她可以使用这个服务从一个普通的比特币链上钱包或通过一个交易所账户，在闪电通道上重新注入资金，并在必要时继续增加额外的资金。</p>

<p>这项服务还应该允许用户使用非托管的比特币合约，安全地将资金从闪电网络中转移到其他地方。有了LOOP，用户、企业和路由节点运营商就能够无限期地保持闪电通道的开放，从而使网络更高效、更稳定、使用更便宜。</p>

<p>在这个场景中，不论是用户的链上钱包，还是闪电通道，只要还有余额，就能没有感知的继续付款和收款，直到余额消费完毕为止；</p>

<p>用户的体验应该是打开钱包，即可完成每一笔支付和收款交易，而不用去操心通道余额，Inbound Capacity这些烦心问题；</p>

<p>要做到这些，Loop的解决方案是利用闪电通道付款(把资金从你这边推出)，然后在一个链上地址收到钱。你有效地将支付循环回你自己，因此得名闪电循环(Loop)。</p>

<p>任何通道都可以反复循环。不需要打开新的通道，用户可以选择他们想要循环出去的对等点。这是与“销售”服务和用户之间的通道的现有服务相比的一个优势。</p>

<p>有了这些服务，任何支付给用户的收入将支付路由费用。它们绑定到目标服务的路由策略。除此之外，许多用户使用相同的服务打开通道会造成单点故障。客户端Lightning Loop软件和协议是开源的，并且是经过mit许可的，而服务器端则可以通过使用比特币合约来完全验证。</p>

<p>我们当然可以成立一个托管方来完成一切操作，但是，在去中心化的背景下，为每一个用户提供这样的能力也是非常重要的；让我们看看Loop是如何做到这一切的；</p>

<h4 id="loop-1">一个最基本的LOOP循环</h4>

<p>一个最基本的LOOP循环包含下面这几个步骤：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191130/bg1.jpg" alt="img" /></p>

<p>我们假设商家的名字叫Bob，他想用自己的链上钱包充值一个闪电通道，他连接到了一个LOOP服务，这个LOOP服务可以是Bob自己架设，也可以是不需要信任的第三方假设的；</p>

<ol>
  <li>Bob生成一个秘密散列预原像值R，以及散列结果H</li>
  <li>Bob将与此散列H绑定的付款发送到Lightning Loop服务器。服务器还不能消费这笔款项，因为它还不知道R。相反，它会一直持有这笔支付交易，直到它得到原像R。此部分使用hodl发票实现。</li>
  <li>服务器将一个链上事务发布到一个输出(交易C1a)，该输出可以通过公开原像R(一笔P2SH交易)来消费，这是一笔链上的HTLC交易</li>
  <li>Bob将监控到这笔交易，他提供了R值消费了这笔交易(称为sweep tx)，此时R值成为一个公共知识</li>
  <li>服务器同样监控到这笔交易的消费，它从其中提取R值，并使用它来处理它仍然持有的闪电支付。最后一步完成交换。</li>
</ol>

<p>如果服务器保留闪电支付，并且从不发布链上事务，那么支付将超时，资金将返回给用户。这构成了服务的非托管性质。在超时的情况下，用户会受到轻微的惩罚，因为Loop将锁定他们的资金直到超时。</p>

<h4 id="section">预付款</h4>

<p>LOOP服务器需要花钱构造一个HTLC 链上交易。如果Bob不消费这笔交易，LOOP服务器将失去这笔钱。如果不进行检查，这可能会引入一个DoS攻击方法，将循环系统的空闲UTXOs消耗一空。</p>

<p>为了防止这种情况发生，Bob需要在交换付款的同时进行第二次闪电付款，称为预付款(prepayment)。这个想法是，如果交换没有成功，但是服务器发布了链上 HTLC(C1a)，服务器保留预付款作为对矿商费用损失的补偿。</p>

<h4 id="bobhtlc">Bob消费链上HTLC</h4>

<p>当Bob的消费HTLC(C1a)的交易进入mempool(上面的步骤4)时，就会显示原像R值。从那时起，原像R将被视为公共知识，Bob应该期待他们的闪电付款尽快成功确认。正是出于这个原因，Bob需要确保消费交易得到确认。有一件事可能会延迟确认，那就是以过低的矿商费发布消费交易。但是，用户可以使用诸如RBF和CPFP等费用提升工具来确保及时的确认。</p>

<p>在Lightning Loop中，通过启用RBF并尝试用基于最新费用估计的新交易替换每个块中的sweep交易来处理未确认的交易风险。交易费用的上限是用户在开始交换时指定的最大矿商费用，以避免在链上支付过高的费用。</p>

<h4 id="section-1">时间压力</h4>

<p>不幸的是，对于用户Bob来说，确认扫描交易的时间是有限的。LOOP服务器需要一种方法，如果Bob没有发布R值来消费这笔链上交易C1a，服务器也可以收回资金。因此，链上交换输出同时被一个散列和一个时间锁定，这使得它成为一个类似于常规闪电支付中使用的HTLC的hashtime locked contract (HTLC)。</p>

<p>当交换被启动时，服务器会选择HTLC的实际到期高度，并根据循环客户端实现可接受的最小值进行检查。如果服务器建议的到期时间太短，将不会构造C1a，并且交换将终止。这样做的原因是，用户需要有一个合理的机会来确认C1a的消费交易。</p>

<p>当用户通过在内存池中插入消费交易来公开原像R时，计时器开始计时。用户需要在达到到期高度并打开服务器回收路径之前确认交易。</p>

<p>当Bob公布了R值，但他的消费交易却因为费用太低而迟迟无法确认，当接近到期高度时，Bob可能需要更积极地提高收费。他甚至可能想要超过设定的最大矿商费，因为另一种选择可能是失去全部掉期金额。</p>

<h4 id="section-2">服务器如何保证公正</h4>

<p>LOOP的目标是以一种不考虑服务器行为的方式实现它。它应该考虑服务器作恶的情况。例如，从服务器接收到的所有值和on-chain HTLC的参数都由客户机在本地进行检查。如果任何操作超出了可接受的范围，则LOOP交换将中止。</p>

<p>尽管做了这些准备，但Loop还实现了一个“公平”的服务器。只要对方可以选择不同的行为，LOOP Server就会选择对用户最有利的行为。相对的，有些对手服务器会抓住任何机会来最大化利润。由于掉期是非托管性的，幸运的是，这样的机会并不多。它们大多出现在用户不愉快的流程和错误方面。</p>

<p>取消掉期支付就是一个例证。当链上的HTLC过期且超时交易得到充分确认后，服务器需要收回资金时，将立即取消所持有的通道中的付款。它本来可以持有它更久，希望由于某种原因，原像R仍然会出现在mempool当中，但公平的服务器不会这样做。</p>

<h4 id="section-3">递归循环</h4>

<p>有了LOOP，就有可能使用一定数量的资金X来获得比X大得多的流入流动性。用收到的链上基金，可以注入到打开的另一个通道中去，这个通道的资金也可以循环出去。只要还有资金，这个过程就可以继续下去，因为每一步都需要向矿工、路由节点和循环服务支付费用。这个方法称为“环回”。</p>

<p>这样做的最终结果是，路由节点会向用户的节点提交大量资金。对他们来说，希望他们能从中赚取一些路由费用。</p>

<p>这也强调了路由节点监视它们的通道并关闭不产生任何返回的通道的必要性。</p>

<p>将链上资金注入闪电通道的行为我们称之为 LoopIn，将闪电通道的资金支付回链上钱包的行为我们称之为LoopOut。</p>

<p>Bob的LoopIn只可以为自己的通道注资，来源资金可以来自自己的钱包，也可以通过指定一笔外部的on-chain HTLC交易给通道注资；如果某个交易所支持这种Loop方式，也许将来你可以直接从交易所托管的在线钱包中提取资金到你的闪电通道中；</p>

<p>而LoopOut既可以付款给自己，也可以指定一个三方钱包地址，这在发工资的时候可能很有用；</p>

<h4 id="section-4">缺陷</h4>

<p>为了防止DoS攻击，使用LOOP服务需要一笔预付款。预付款数额是名义上的，最多是几千satoshis。在API和CLI中，执行交换的用户可以预先看到他们同意的预付金额。</p>

<p>除此之外，还需要使用HTLCs对传入和传出的CLTV输出进行标准超时处理。这与Lightning中所需的时间锁管理级别没有什么不同。然而，良好的费用选择启发式的影响可以降低到最低。</p>

<h4 id="section-5">结论</h4>

<p>可以看到，与循环输出提供的独特优势相比，上述几点缺陷微不足道。它为用户提供了从任何人获得流入流动性的灵活性。它不会推动集中式的网络拓扑结构，并提供了重用现有通道的方法，从而延长了通道的生存期。</p>

<h2 id="section-6">实践</h2>

<h4 id="loop-2">架设一个LOOP服务</h4>

<p>Loop目前只能跟lnd搭配使用，我们在同一台机器上，模拟Bob商户，在不需要别人帮助的情况下为自己的闪电通道Inbound注资；</p>

<ul>
  <li>lnd的编译需要特殊开关才能支持loop:</li>
</ul>

<p><code>
git clone https://github.com/lightningnetwork/lnd.git
cd lnd
make install tags="signrpc walletrpc chainrpc invoicesrpc routerrpc"
</code></p>

<ul>
  <li>启动lnd</li>
</ul>

<p><code>
nohup ./lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=xxxxx --bitcoind.rpcpass='xxxxx' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=x.x.x.x 2&gt;&amp;1 &gt; lndtest.log &amp;
</code></p>

<p>启动之后你会发现多了几个macaroon验证文件，关于macaroon，我们以后会写文章介绍；</p>

<p><code>
ls ~/.lnd/data/chain/bitcoin/testnet/
admin.macaroon  chainnotifier.macaroon  channel.backup  invoice.macaroon  invoices.macaroon  macaroons.db  readonly.macaroon  router.macaroon  signer.macaroon  wallet.db  walletkit.macaroon
</code></p>

<ul>
  <li>
    <p>如果没有闪电通道的话，建立一个闪电通道，此步骤参考之前的文章</p>
  </li>
  <li>
    <p>编译loop</p>
  </li>
</ul>

<p><code>
git clone https://github.com/lightninglabs/loop.git
cd loop/cmd
go install ./...
</code></p>

<p>编译之后会得到两个可执行文件，服务程序loopd，以及命令行cli交互工具loop;</p>

<ul>
  <li>启动loopd</li>
</ul>

<p><code>
nohup loopd &gt;&gt; loopd.log 2&gt;&amp;1 &amp;
</code></p>

<ul>
  <li>将链上钱包的钱注入到已有的闪电网络通道中</li>
</ul>

<p>因为我们是自助服务，所以我们使用loop out提取一部分链下的资金，回收到自己的链上钱包中，同时为自己的通道注入流动性</p>

<p>在注入之前，我们已经建立了一个持有1000000 satoshi的通道，不过这1000000 satoshi都在我们自己<code>local_balance</code>一端，我们的<code>remote_balance</code>此时是0；</p>

<p>我们执行</p>

<p><code>
./loop out 500000 tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx
./loop monitor
</code></p>

<p>持续监控log输出，我们发现此时通道状态变成了这样：</p>

<p>```
channel:
    “channels”: [
        {
            “active”: true,
            “remote_pubkey”: “xxxxx”,
            “channel_point”: “zzzzzz:1”,
            “chan_id”: “111111111111”,
            “capacity”: “1000000”,
            “local_balance”: “498627”,
            “remote_balance”: “0”,
            “commit_fee”: “271”,
            “commit_weight”: “944”,
            “fee_per_kw”: “253”,
            “unsettled_balance”: “501102”,
            “total_satoshis_sent”: “0”,
            “total_satoshis_received”: “0”,
            “num_updates”: “21”,
            “pending_htlcs”: [
                {
                    “incoming”: false,
                    “amount”: “1338”,
                    “hash_lock”: “eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=”,
                    “expiration_height”: 1609844
                },
                {
                    “incoming”: false,
                    “amount”: “1338”,
                    “hash_lock”: “eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=”,
                    “expiration_height”: 1609844
                },
                {
                    “incoming”: false,
                    “amount”: “499764”,
                    “hash_lock”: “+xsofcSn9Y+Wx94vkx66rl5rgQoDthVBI4Pvhp6lhX4=”,
                    “expiration_height”: 1609988
                }
            ],
            “csv_delay”: 144,
            “private”: false,
            “initiator”: true,
            “chan_status_flags”: “ChanStatusDefault”,
            “local_chan_reserve_sat”: “10000”,
            “remote_chan_reserve_sat”: “10000”,
            “static_remote_key”: false
        }
    ]
}</p>

<p>```</p>

<p>通道中现在有了htlc交易，并设定了一个过期块高度;</p>

<p>此时loopd的输出如下：</p>

<p>```
2019-11-24 10:58:48.403 [INF] LOOP: Offchain swap destination: xxxxxxxxxxxxxxxxxxxxxxxxxx
2019-11-24 10:58:53.073 [INF] LOOPD: Loop out request received
2019-11-24 10:58:53.073 [INF] LOOP: LoopOut 0.005 BTC to tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx (channel: <nil>)
2019-11-24 10:58:53.078 [INF] LOOP: Initiating swap request at height 1609561
2019-11-24 10:58:53.423 [INF] LOOP: fb1b28 Htlc address: tb1qku40cmlsrmdtyqp6vgpjw9vpe8jkcp3ullxa9u5yphpdequc6f4qa60ts8
2019-11-24 10:58:53.424 [INF] LOOP: fb1b28 state Initiated
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending swap payment lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm (id:fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e)
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending prepayment lntb13370n1pwanu0dpp50rhm7qj4lvw5g723h95ejvlp7zwdf622hvkduaxm4y7ycpumzu0sdq2wpex2urp0ycqzxgxq97zvuqkhdq3yvlvljdkz2h3u5s37q2h6mxt4w3ynucnf6psckwpc80l3y944h09ruj2m2zacyshuch7hdwzl86n6nva0lan8lyg3rhshqsn0qprgdyel (id:78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f )
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Register conf ntfn for swap script on chain (hh=1609561)
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609561)
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Waiting for either htlc on-chain confirmation or  off-chain payment failure</nil></p>

<p>```</p>

<p>注意，这里产生了两笔闪电支付，分别是注入通道的资金(swap payment)，以及预付款(prepayment)；Loop服务端立即发布了链上交易，期待得到swap payment的原像R值；</p>

<p>然后我们等待链上交易的确认:</p>

<p><code>
2019-11-24 10:59:02.029 [INF] LOOPD: Monitor request received
2019-11-24 11:10:41.583 [INF] LOOP: Received block 1609562
2019-11-24 11:10:41.585 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609562)
2019-11-24 11:28:10.032 [INF] LOOPD: Loop out terms request received
2019-11-24 11:28:10.091 [INF] LOOPD: Loop in terms request received
2019-11-24 11:28:53.934 [INF] LNDC: Payment 78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f completed
2019-11-24 11:29:36.256 [INF] LOOPD: Monitor request received
2019-11-24 11:30:27.928 [INF] LOOP: Received block 1609563
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609563)
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Swap script confirmed on chain
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc tx eac746dd4c7f28edd277a39aa4771b651f0faf1d11f82bacf03e668b35a5658b at height 1609563
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc value: 0.005 BTC
2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 state PreimageRevealed
2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 Sweep on chain HTLC to address tb1q3d8l6wgqprl7tgtgwlqcxq8fts8vf5cwezww9s with fee 0.00000138 BTC (tx 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc)
2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Htlc spend by tx: 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc
2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Wait for server pulling off-chain payment(s)
2019-11-24 11:45:01.841 [INF] LNDC: Payment fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e completed
2019-11-24 11:45:01.841 [INF] LOOP: fb1b28 Swap completed: Success (final cost: server 0.000006 BTC, onchain 0.00000138 BTC, offchain 0.00000502 BTC)
2019-11-24 11:45:01.842 [INF] LOOP: fb1b28 state Success
</code></p>

<p>客户端迅速消费了链上交易，一个区块确认之后，整个交换过程完成：</p>

<p>```
success swap payment:</p>

<pre><code>    {
        "payment_hash": "fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e",
        "value": "499263",
        "creation_date": "1574564333",
        "path": [
            "03052ae5c77d75264a13ab0d34520bd8260de9542e7d930cbe6bc5137485f065f3",
            "03d5e17a3c213fe490e1b0c389f8cfcfcea08a29717d50a9f453735e0ab2a7c003",
            "03fe1c271da46da5cf632beb84551c4100064d830b89dc46f8975123803cc93ff3",
            "0223acffd7f363b4591ce860eda870fea352e981212d8a25e96a0ebea37faae288"
        ],
        "fee": "501",
        "payment_preimage": "b975dc85897b707865dcff54b96511568f86622c89020a2678171e083001717a",
        "value_sat": "499263",
        "value_msat": "499263000",
        "payment_request": "lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm",
        "status": "SUCCEEDED",
        "fee_sat": "501",
        "fee_msat": "501762"
    }
</code></pre>

<p>```</p>

<p>此时的通道状态:</p>

<p><code>
{
    "channels": [
        {
            "active": true,
            "remote_pubkey": "xxxxx",
            "channel_point": "zzzzzz:1",
            "chan_id": "111111111111",
            "capacity": "1000000",
            "local_balance": "498714",
            "remote_balance": "501102",
            "commit_fee": "184",
            "commit_weight": "724",
            "fee_per_kw": "253",
            "unsettled_balance": "0",
            "total_satoshis_sent": "501102",
            "total_satoshis_received": "0",
            "num_updates": "23",
            "pending_htlcs": [
            ],
            "csv_delay": 144,
            "private": false,
            "initiator": true,
            "chan_status_flags": "ChanStatusDefault",
            "local_chan_reserve_sat": "10000",
            "remote_chan_reserve_sat": "10000",
            "static_remote_key": false
        }
    ]
}
</code></p>

<p>我们loop循环出通道的一半资金返回到我们的链上钱包，同时在通道另一端注入了流动性；总体花费：</p>

<ol>
  <li>pre payment 费用</li>
  <li>on-chain HTLC 矿工费</li>
  <li>on-chain HTLC 花费交易(sweep tx)的矿工费</li>
</ol>

<p>最后，我们自立更生，为一个通道注入的Inbound流动性。</p>

<h2 id="section-7">小结</h2>

<p>与比特币刚出现时的情况一样，整个过程漫长而枯燥，批评者会说：哦，太麻烦了，太糟糕了；我不能想象会有人用这种东西！！</p>

<p>不要着急，LOOP技术为闪电网络通道的资金管理提供了无限的可能性；个人运行一个LOOP Server的成本非常低，并且可以想象，在闪电网络的极大繁荣期，并不是只有大公司才能以极大的资金量提供闪电通道的服务，小商家通过精细的运营和筹划，在安全保证本金的前提下，运营一个 LOOP节点来获得手续费用，其性价比会超过运营一个超大规模的闪电节点；就像换汇一样，如果开放自由市场，国家控制的大银行无疑在换汇服务中有极大的优势，但能提供更低廉、更方便的换汇服务的，往往是街头不起眼的小商小贩；</p>

<p>不要因为它现在只是一棵幼苗而轻视它，也许二十年后，它会成长为一棵参天大树。</p>

<h4 id="stay-hungry-stay-foolish">饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</h4>

<h4 id="section-8">引用</h4>

<p>https://blog.lightning.engineering/posts/2019/03/20/loop.html</p>

<p>https://blog.lightning.engineering/technical/posts/2019/04/15/loop-out-in-depth.html</p>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>

<p>https://blog.lightning.engineering/posts/2018/05/30/routing.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -2]]></title>
    <link href="https://happy123.me/blog/2019/11/26/hello-lightning-network-2/"/>
    <updated>2019-11-26T17:14:16+08:00</updated>
    <id>https://happy123.me/blog/2019/11/26/hello-lightning-network-2</id>
    <content type="html"><![CDATA[<p>在上一篇文章中我们评论道：闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>为了研究如何解决Inbound Capacity的问题，我们还需要复习并深化闪电网络的一些基础知识；即RSMC 和HTLC；这些基础我们曾在<a href="https://happy123.me/blog/2019/01/06/bi-te-bi-de-jiao-yi-7/">之前的文章中</a>简要介绍过，但只是对网上的资料做了一番整理，人云亦云而已，实在是辜负了闪电网络；</p>

<p>如果把闪电网络比作一支跌宕起伏的乐章，那RSMC和HTLC就是其中最华彩的两个小节，围绕这两个基础技术所衍生的种种细节Tooltips就是其中的伴奏，整个乐章美不胜收。那么，让我们沉下心来仔细体味吧；</p>

<!-- more -->

<h2 id="rsmc-recoverable-sequence-maturity-contract----rsmc">RSMC (Recoverable Sequence Maturity Contract) – 序列到期可撤销合约RSMC</h2>

<h4 id="funding-tx">Funding Tx</h4>

<p>让我们再回忆一下链下(off-chain)交易的双方要解决的信任问题：Alice和Bob想要实现公正的，双方都无法作弊的多次交易，他们需要做什么；</p>

<p>首先他们需要向对方展示一下自己有支付的能力，放到现实世界里面做个类比，我们买房摇号时要冻结一笔保证金，这样双方能够放心；</p>

<p>买房者的保证金放到银行账户上，银行来确保开发商不会挪用，但在去中心化的世界里面，如何向对方证明自己的资金实力呢？毕竟，比特币世界里面，可没有中心化的银行；</p>

<p>这需要双方各自将一笔保证金打到一个2-2 多重签名地址当中，这样只要这笔资金不被挪用，就会在这段时间内表明双方的资金实力；</p>

<p>这笔交易被称之为Funding Tx，一般翻译为保证金交易；Funding Tx交易输出的资金需要Alice和Bob两个人的签名同意才能动用；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg0-1.jpg" alt="img" /></p>

<p>Funding Tx构造之后，最终资金如何花费需要取得双方的同意，当双方产生分歧时，这笔钱就有可能冻结在这个地址永远无法花费，所以此时还不能广播上链；所以支付通道建立初期， 状况是这样的：</p>

<ol>
  <li>Alice和Bob 通过协商，构造了Funding Tx交易；双方都需要将自己的资金打入一个2-2多重签名地址；</li>
  <li>Funding Tx交易的UTXO需要两人签名才能花费，而此时Alice没有Bob的签名，Bob也没有Alice的签名，只算个口头协议而已</li>
  <li>由于担心之后存在的分歧，Funding Tx交易还不能广播到链上</li>
</ol>

<h4 id="commitment-tx">Commitment Tx</h4>

<p>Funding Tx需要解决几个问题，才能让人放心大胆的广播出去：</p>

<ol>
  <li>需要防止某一方 <code>损人不利己</code> – 永远不同意释放这笔资金，然后这笔钱就一直冻结在这里了；</li>
  <li>相互签名之后，需要防止某一方全部提款走人，每一方只能花费自己应得资金；在上图中，要保证当前状态下，Alice和Bob各自只能花费0.5BTC</li>
</ol>

<p>于是我们产生了一个初步的方案：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg0-2.jpg" alt="img" /></p>

<p>Alice构造了C1a交易，这笔交易的Input是Funing Tx的output，但是输出上做了限制，它将资金分配到了两个output:</p>

<ul>
  <li>需要Alice2和Bob的签名才能花费 (0.5BTC)</li>
  <li>直接还给Bob 0.5BTC</li>
</ul>

<p>这样的交易输出保证Bob不会吃亏，在任何情况下，Alice解约，Bob会立即收到自己的0.5BTC；</p>

<p>但是Alice呢？Alice的0.5BTC怎么办呢？ Alice会对Bob说：我够意思吧，任何情况下，你都能拿回自己的0.5BTC，那么，你如果能对 Alice2&amp;Bob的Output提供签名，那就太好了，这样我们就能达成交易了，这样任何时候都不会让你吃亏；</p>

<p>同样的，Bob也会构造C1b交易，他会说：好吧，Alice，你确实是个诚信的人；你的做法启发了我，为了能随时解约，我也同样构造了一笔交易，无论何时，你都能拿回自己应得的0.5个BTC，而这笔交易也需要你签署一下；</p>

<p>双方的这两笔交易我们称之为 Commitment Tx(承诺交易)；</p>

<p>我们可以想象，Alice和Bob两个人高高兴兴的互相为对方的交易签名，并为合作双方不用依靠别人就达成了如此巧妙而公平的交易而洋洋自得；</p>

<p>此时，无论是Funding TX，还是双方的Commitment Tx，都还没有广播出去; 但是似乎在达成了Commitment Tx之后，可以广播Funding Tx了；</p>

<p>但是且慢!！ 我们建立资金通道的目的是什么？</p>

<p>当然是为了解决资金的链下双向流通问题，目前双方在不依靠第三方公证人的前提下，成功冻结了一笔保证金，可是怎么让这笔保证金流动起来呢？</p>

<h4 id="rsmc">RSMC</h4>

<p>聪明的Alice和Bob再次对他们的通道交易做了升级，现在通道里面的交易变成了这样：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg1.jpg" alt="img" /></p>

<p>在Alice一方， 又增加了一笔交易， 即RD1a；</p>

<p>RD1a消费了C1a的第一个输出，即 <code>Alice2 &amp; Bob 0.5btc</code>， 而RD1a直接输出给Alice，但是这笔交易有一个限制条件，即seq=1000，即如果广播C1a的话，要等1000个block之后，RD1a才会生效；</p>

<p>C1a, C1b两笔交易花费的是同一个输出，故他们两个交易只有一个能进块。若Alice广播C1a，则Bob立即拿到0.5BTC（C1a的第二个输出），而Alice需要等C1a得到1000个确认，才能通过RD1a的输出拿到0.5BTC。另一方，若Bob广播C1b，则Alice立即拿到0.5BTC，Bob等待C1b得到1000个确认，才能通过RD1b拿到0.5BTC。也就是说，单方广播交易终止合约的那一方会延迟拿到币，而另一放则立即拿币。</p>

<p>上述过程以及结构图的描述，就是创建RSMC的全部过程。</p>

<h4 id="section">交易更新</h4>

<p>Alice和Bob各自0.5BTC的余额，此时Alice从Bob处购买了一件商品，价格为0.1BTC，那么余额应该变为Alice 0.4BTC，Bob 0.6BTC。</p>

<p>于是创建新的Commitment Tx，对于Alice来说是C2a 和RD2a，对于Bob来说是C2b和RD2b，过程与上面类似。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg2.jpg" alt="img" /></p>

<p>交易更新时的交易结构–此时两个状态均是有效的，那么最核心的问题来了，如何才能彻底废弃掉C1a和C1b呢？</p>

<p>RSMC采用了一个非常巧妙的方法，在C1a的第一个输出中，采用了Alice2和Bob的多重签名，Alice将Alice2 的私钥交给Bob，即表示Alice放弃C1a，承认C2a。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg3.jpg" alt="img" /></p>

<p>Alice交出Alice2的私钥给Bob，那么Bob就可以修改RD1a的输出给他自己，形成新的交易BR1a。</p>

<p>若Alice破坏合约存在C2a的情况下依然广播出C1a，那么Alice的惩罚就是失去她全部的币。</p>

<p>Alice交出Alice2的私钥，或者对交易BR1a进行签名，两者是等同的，都是对C1a的放弃。反之亦然，Bob交出Bob2的私钥给Alice即意味放弃C1b，而仅能认可C2b。</p>

<p>引入sequence的目的是，阻止后续交易进块（RD1a），给出一个实施惩罚窗口期，当发现对方破坏合约时，可以有1000个块确认的时间去实施惩罚交易，即广播BR1a代替RD1a。若错过1000个块时间窗口，则无法再实施惩罚了（RD1a进块了）。</p>

<h4 id="section-1">小结</h4>

<p>Alice和Bob两人通过不断的协商和推敲，最终建立了这样一个通道：</p>

<ol>
  <li>两人各自拿出一笔资金来放入这个通道中</li>
  <li>每个人都可以随时随地自由解约，同时任何情况下两人的资金都不会有损失</li>
  <li>通道的资金可以在两方协商同意的情况下任意分配，而不需要交易广播上链</li>
</ol>

<p>在达成了Funding Tx、C1a, C2a, RD1a, RD2a 这些交易之后，Alice和Bob两人就可以广播Funding Tx了，这是唯一需要广播的交易，建立通道后，双方所有的交易就是更新Commitment Tx的过程了，这些更新都可以通过链下完成，交易速度理论上只取决于Alice及Bob两方的网络和机器性能，可以很轻易的提升至数千TPS；</p>

<h2 id="htlc-hashed-timelock-contract---htlc">HTLC (Hashed Timelock Contract) –哈希时间锁定合约HTLC</h2>

<h4 id="section-2">交易中转</h4>

<p>RSMC要求交易的双方一定要都缴纳一笔保证金，我每天都跟不同的商家打交道，不能跟每个人都去建立RSMC，存入一笔资金吧。而且通道的建立和关闭都是需要链上广播的，如果要建立多个支付通道，交易费用也不容小觑，这有点本末倒置了吧。</p>

<p>为了解决这个问题，闪电网络又引入了HTLC ( Hashed Timelock Contract )，中文意思是“哈希的带时钟的合约”。这个其实就是限时转账。理解起来也很简单，通过智能合约，双方约定转账方先冻结一笔钱，并提供一个哈希值，如果在一定时间内有人能提出一个字符串，使得它哈希后的值跟已知值匹配（实际上意味着转账方授权了接收方来提现），则这笔钱转给接收方。</p>

<p>推广一步，甲想转账给丙，丙先发给甲一个哈希值。甲可以先跟乙签订一个合同，如果你在一定时间内能告诉我一个暗语，我就给你多少钱。乙于是跑去跟丙签订一个合同，如果你告诉我那个暗语，我就给你多少钱。丙于是告诉乙暗语，拿到乙的钱，乙又从甲拿到钱。最终达到结果是甲转账给丙。这样甲和丙之间似乎构成了一条完整的虚拟的“支付通道”。而乙就做了中转节点。</p>

<p>Alice想要支付0.5BTC给Bob，但她并没有一个渠道来和他进行交易。幸运的是，她和Charlie有一个交易渠道，而Charlie正好和Bob有一个交易渠道。这样Alice就能借助Charlie的交易渠道，通过哈希时间锁定合约（HTLC）来和Bob进行交易了。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg4.png" alt="img" /></p>

<p>为了完成这次交易，Alice就会给Bob发短信说：“嘿！我要给你付笔款。”这时Bob自己将收到一个随机数字（R），接着Bob便会回一个被哈希的数字（H）（你可以认为被哈希的数字R是随机数字的一种加密形式）给Alice。</p>

<p>然后Alice的钱包紧接着就会联系Charlie说：“嘿，Charlie。如果你给我生成（H）的未加密值（R），那么我就同意更新我们渠道的支付分配，这样你就可以得到的就会比0.5BTC多一点，我得的比0.5少一点。”</p>

<p>尽管Charlie并不知道R，但他也会同意。之后Charlie便会去找Bob说：“嘿，Bob。如果你给我那个能生成H的未加密的值R，我将同意更新我们渠道的支付分配，这样你就可以得到的会比0.5BTC多一点，我得到的比0.5少一点。”因为R就是从Bob这里生成的，所以他肯定知道。接着他马上将R告诉Charlie，并更新了其渠道的支付分配。然后Charlie将R告诉给了Alice之后也更新他们的渠道，最后交易完成，Alice以脱链的形式付给Bob0.5BTC。</p>

<p>交易中转说起来很简单，但它也要解决一些工程细节问题：</p>

<ol>
  <li>如何构造一笔交易，保证Charlie 只有收到R值的时候才能花费</li>
  <li>如果交易由于超时或者网络原因中断，如何回退交易</li>
  <li>这笔交易其实是Alice和Bob之间的事情，形成一条交易路径时却要通知所有参与转发交易的节点，如何保护隐私？</li>
</ol>

<p>让我们用一个更复杂的例子来好好理清这个交易过程吧！</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg1-0.jpg" alt="img" /></p>

<p>在这个例子中，我们有五个参与者：Alice、Bob、Carol、Diana和Eric。这五名参与者彼此之间已经开设了支付通道。Alice和Bob有支付通道。Bob连接Carol，Carol连接到Diana，Diana连接Eric。为了简单起见，我们假设每个通道每个参与者都注资2个比特币资金，每个通道的总容量为4个比特币。</p>

<p>现在Alice想要给Eric支付1个比特币，通过我们的交易中转机制，她发现了一条支付通道：Alice-&gt;Bob-&gt;Carol-&gt;Diana-&gt;Eric；然后支付步骤如下：</p>

<ol>
  <li>Alice向Eric发出支付请求，Eric的LN节点使用随机数生成器创建一个密钥R。Eric的节点没有向任何人泄露这个秘密。相反，Eric的节点计算密钥R对应的散列H，并将此散列值H发送到Alice的节点</li>
  <li>Alice的节点构造一个HTLC，支付到散列H(P2SH交易)，并具有10个区块时间锁用于（当前块+10）退款，数量为1.003比特币。额外的0.003比特币将用于补偿参与此支付路由的中间节点。Alice将此HTLC提供给Bob，从和Bob之间的通道余额中扣除1.003比特币，并将其提交给HTLC。该HTLC具有以下含义：“如果Bob知道密钥，Alice将其通道余额的1.003比特币支付给Bob，或者如果超过10个区块时间后，则退还到Alice的账号”。Alice和Bob之间的通道余额现在由Commitment Tx表示，其中有三个输出：Bob的2比特币余额，Alice的0.997比特币余额，Alice的HTLC中承诺的1.003比特币。承诺交易再从Alice的余额中减去HTLC中的金额。</li>
  <li>Bob现在有一个承诺，如果他能够在接下来的10个区块生产时间内获得密钥R，他可以获取Alice锁定的1.003。手上有了这一承诺，Bob的节点在和Carol的支付通道上构建了一个HTLC。Bob的HTLC提交一笔HTLC（这是一笔P2SH交易，输出1.002比特币及9个区块时间锁），如果Carol拥有密钥R，她就可以兑换这个HTLC。Bob知道，如果Carol要获取他的HTLC，她必须出示密钥R。如果Bob在9个区块的时间内有R，他可以用它给自己兑换Alice的HTLC。通过承诺自己的通道余额9个区块的时间，他也赚了0.001比特币。如果Carol无法获取他的HTLC，并且他也无法获取Alice的HTLC，那么一切都将恢复到之前的通道余额，没有人会亏损。Bob和Carol之间的通道余额现在是：2比特币给Carol，0.998比特币给Bob，1.002比特币由Bob承诺给HTLC。</li>
  <li>Carol现在有一个承诺，如果她在接下来的9个区块时间内获得R，她可以获取Bob的锁定1.002比特币。现在她可以在她与Diana的通道上构建HTLC承诺。她提交了一个1.001比特币的HTLC（一笔P2SH交易，输出1.001比特币及8个区块时间锁），如果Diana有密钥R，她就可以兑换。从Carol的角度来看，如果能够实现，她就可以获得0.001比特币，否则也没有失去任何东西。她提交给Diana的HTLC，只有在R是已知的情况下才可行，到那时候她可以从Bob那里索取HTLC。Carol和Diana之间的通道余额现在是：2比特币给Diana，0.999比特币给Carol，1.001比特币由Carol承诺给HTLC。</li>
  <li>最后，Diana可以提供给Eric一个HTLC，1比特币到散列H及7个区块时间锁。Diana与Eric之间的通道余额现在是：2比特币给Eric，1比特币给Diana，1比特币由Diana承诺给HTLC。</li>
  <li>Eric拥有密钥R，他可以获取Diana提供的HTLC。他将R发送给Diana，并获取1比特币，添加到他的通道余额中。通道余额现在是：1比特币给Diana，3比特币给Eric。</li>
  <li>现在，Diana有密钥R，因此，她现在可以获取来自Carol的HTLC。Diana将R发送给Carol，并将1.001比特币添加到其通道余额中。现在Carol与Diana之间的通道余额是：0.999比特币给Carol，3.001比特币给Diana。Diana已经“赚了”参与这个付款路线0.001比特币。</li>
  <li>Carol 拿到密钥R，重复了同样的事情，他获取了来自Bob的HTLC的1.002个比特币，将他们的通道余额设为：0.998比特币给Bob，3.002比特币给Carol</li>
  <li>最后，Bob获取来自Alice的HTLC）。他们的通道余额更新为：0.997比特币给Alice，3.003比特币给Bob。</li>
</ol>

<p>在没有向Eric打开支付通道的情况下，Alice已经支付给Eric 1比特币。付款路线中的中间方无须互相信任。在他们的通道内做一个短时间的资金承诺，他们就可以赚取一小笔费用，唯一的风险是，如果通道关闭或路由付款失败，退款有段短的延迟时间。</p>

<h4 id="section-3">路由加密</h4>

<p>LN节点之间的所有通信都是点对点加密的。另外，节点有一个长期公钥，它们用作标识符并且彼此认证对方；</p>

<p>在前面的例子中，Alice的节点使用这些路由发现机制之一来查找将她的节点连接到Eric的节点的一个或多个路径。一旦Alice的节点构建了路径，她将通过网络初始化该路径，传播一系列加密和嵌套的指令来连接每个相邻的支付通道。</p>

<p>重要的是，这个路径只有Alice的节点才知道。付款路线上的所有其他参与者只能看到相邻的节点。从Carol的角度来看，这看起来像是从Bob到Diana的付款。Carol不知道Bob实际上是中继转发Alice的汇款。她也不知道Diana将会向Eric中继转发付款。</p>

<p>这是闪电网络的一个重要特征，因为它确保了付款的隐私，并且使得很难对其应用监控、审查以及黑名单机制。但是，Alice如何建立这种付款路径，而不向中间节点透露任何内容呢？</p>

<p>闪电网络实现了一种基于<a href="https://cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf">Sphinx</a> 方案的洋葱路由协议。该路由协议确保支付发送者可以通过闪电网络构建和通信路径，使得：</p>

<ul>
  <li>
    <p>中间节点可以验证和解密其部分路由信息，并找到下一跳。</p>
  </li>
  <li>
    <p>除了上一跳和下一跳，他们不能获取路径上任何其他节点。</p>
  </li>
  <li>
    <p>他们无法识别支付路径的长度，或者他们自己在该路径中的位置。</p>
  </li>
  <li>
    <p>路径的每个部分都被加密，使得网络级别的攻击者不能将来自路径的不同部分的数据包相互关联。</p>
  </li>
</ul>

<p>使用这种洋葱路由协议，Alice将路径的每个节点信息封装在一层加密中，从尾端开始倒过来运算。她用Eric的公钥加密了Eric的消息。该消息封装在加密到Diana的消息中，并将Eric标识为下一个收件人。给Diana的消息封装在加密到Carol的公钥的消息中，并将Diana识别为下一个收件人。对Carol的消息被Bob的密钥加密。这样一来，Alice已经构建了这个加密的多层“洋葱”的消息。她发送给Bob，他只能解密和解开外层。在里面，Bob发现了一封给Carol的消息，他可以转发给Carol，但不能自己破译。按照路径，消息被转发、解密、转发等，一路到Eric那里。每个参与者只知道各自这一跳的前一个和下一个节点。</p>

<p>路径中的每个节点都包含有关HTLC必须扩展到下一个跳的信息，HTLC中的要发送的数量，要包括的费用以及CLTV锁定到期时间（以块为单位）。随着路由信息的传播，节点将HTLC承诺转发到下一跳。</p>

<p>此时，你可能想知道节点如何不知道路径的长度及其在该路径中的位置。毕竟，它们收到一个消息，并将其转发到下一跳。难道它不会将路径缩短，或者允许他们推断出路径长短和位置？为了防止这种情况，路径总是固定在20跳，并用随机数据填充。每个节点都会看到下一跳和一个要转发的固定长度的加密消息。只有最终的收件人看得到没有下一跳。对于其他人来说，似乎总是有20多跳要走。</p>

<h4 id="section-4">总览</h4>

<p>中转交易和路由加密技术解决了回退交易以及隐私保护的问题；</p>

<p>那么，剩下的就是最重要的问题，就是如何在双方的支付通道中，在Commitment Tx的基础上，构造HTLC交易，同时不会影响原有Commitment Tx的所有功能？</p>

<p>我们即将探究闪电网络最后的，也是最精细的一个部分，就是HTLC的细节实现，堪称这支交响乐中最细腻的部分；</p>

<h4 id="htlc">HTLC细节</h4>

<p>让我们再从头想想吧， HTLC本质上也是一个双方资金分配的问题，只不过这笔资金的解锁需要一个符合散列H值的原像R值，这就是一笔P2SH交易而已；</p>

<p>但普通的P2SH交易并不能满足这个场景的所有需求，因为我们还需要在交易失败的时候设置回退机制，资金还要能回退回来；</p>

<p>回到我们上图的例子中，在路由的第一跳，我们想象中的Alice付给Bob的HTLC交易逻辑是这样的：</p>

<p><code>
OP IF
OP HASH160 &lt;Hash160（R）&gt; OP EQUALVERIFY
2 &lt;Alice2&gt; &lt;Bob2&gt; OP CHECKMULTISIG
OP ELSE
2 &lt; Alice1&gt; &lt;Bob1&gt; OP CHECKMULTISIG
OP ENDIF
</code></p>

<p>这个脚本从单一的 HTLC 输出花费有两种可能的路径:</p>

<ul>
  <li>在第一个路径（定义为 OP IF）将资金发送给 Bob，如果 Bob 可以产生R。这个UTXO是可以立即花费的；</li>
  <li>第二条路径是交易失败，被赎回的时候触发的， 它需要设置一个10 Block的时间锁定，当它被赎回时，需要10个block的时间才能上链，这段时间为支付路径上的每一个中转节点提供了回退的时间窗口；</li>
</ul>

<p>那么让我们再次继续RSMC中的例子，假设Alice和Bob已经在Funding Tx的基础上建立了Commitment Tx，并且每个人都注入了0.5BTC，现在Alice想要为Bob构造一个输出为0.1BTC的HTLC，细节是这样的：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/htlc2-1.jpg" alt="img" /></p>

<p>这个图跟我们在更新Commitment Tx的时候没有多大区别，最大的不同就是我们多了一个Output: 即C2a,C2b中的Output2;</p>

<p>这个输出就代表着0.1BTC的HTLC的完整逻辑；要花费它可以有两种方式，就是我们上面所定义的两种路径：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/htlc2-2.jpg" alt="img" /></p>

<p>我们以Alice的视角，来观察C2a交易中的HTLC输出，拆分为HT1a和HED1a；</p>

<p>HED1a的输出很简单，就是只需要Bob2签名以及原像R，Bob就能立即得到0.1BTC；</p>

<p>HT1a就复杂了，它解决了交易失败时，如何交易回退的问题：</p>

<p>让我们仔细再想想，支付通道更新的过程中，C1a,C2a, C1b, C2b等等交易完全是不上链的，如果Bob没有在指定时间内提供原像R，Alice如何收回自己的0.1BTC呢？</p>

<p>等等，这个问题好熟悉的感觉！！ 没错，这个问题其实与我们如何花费Funding Tx如出一辙！ 对于HTLC交易的处理跟Funding Tx的处理可以采取一样的方法：</p>

<h5 id="htlcrsmc-">就是将HTLC交易放到一个RSMC 当中去！！</h5>

<p>经历了漫长的探索，我们最终得到了闪电网络白皮书中这样一张大图：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg1-1.png" alt="img" /></p>

<ul>
  <li>当我们以Alice视角来看待HT1a交易时： </li>
</ul>

<p>对于付款人（Alice），“中转”交易作为 HTLC 执行交付交易（HED1a）被发送，其不受阻于 RSMC。假定支付路径成立，而且 Alice 证明公布的承诺交易C2a是最近的话。如果 Bob 可以产生原像 R，他将能够在该承诺交易C2a在 blockchain 上公布之后赎回资金。当然只有 Alice 给 Bob她的 HED1a 签名Alice2，Bob 才可以公布 HED1a。</p>

<p>如果交易失败， Alice 公布她的承诺交易HT1a，本次交易需要multisig（Alice1，Bob1）。但是，需要三天的锁定期，Alice才可以公布HTLC Timeout交易（HT1a）。这项交易是一个 RSMC。HT1a的输出HTRD1a需要Alice3和Bob3的 multisig，并且1000个block之后才能入块； 这样为后面的再次调整HTLC金额留出了余地，即本次交易可以撤销，当另一个使用
multisig（PAlice4，PBob4）的交易取代 HTRD1a，它没有对任何区块的成熟度要求。所以Bob也可以放心的签署HTRD1a；</p>

<ul>
  <li>当我们以Bob视角来看待HE1b交易时： </li>
</ul>

<p>对于收款者（Bob），收到的“Timeout” 作为 HTLC Timeout 交付交易（HTD1b）被退还。本次交易直接返还资金给原始发件人（Alice），并不受 RSMC 的阻碍。假定该 HTLC从未被 Off-chain 终止，因为 Bob 证明公布的承诺交易（C2b）是最新的。如果 3 天已经过去，Alice 可以公布 HTD1b 并拿到退款。如果 Bob 公布 C2b，本次交易需要 multisig（PAlice5，PAlice5）。只有 Alice 可以公布 HTD1b，因为 Bob 给了 Alice 他 HTD1b 交易的签名。</p>

<p>但是，如果 HTD1b 没有被公布（没有经过 3 天时间）并且 Bob 知道原像 R，如果他能产生R，则 Bob 将能够公布 HTLC 执行交易（HE1b）。这项交易是一个 RSMC。如果 Bob 公布C2b，它需要输出 multisig（Alice6，Bob6），并要求披露 R。此交易的输出是一个有 1000个区块相对成熟的 multisig（Alice7，Bob7）的 RSMC，和不需要区块确认成熟的 multisig（Alice8，Bob8）。只有 Alice 给 Bob 她 HT1a 的签名，Bob 才可以公布 HT1a。HT1A 进入 blockchain 并且 1000 次确认完成后，一个 HTLC Timeout 撤销交付交易（HERD1b）可以由 Bob 通过消耗 multisig（Alice7，Bob7）公布。只有 Alice 给 Bob 他 HERD1b 的签名，Bob 可以在公布 HE1b 1000 区块后公布 HERD1b。本次交易可以撤销，当另一个使用multisig（Alice8，Bob8）的交易取代 HERD1b，它没有对任何区块的成熟度要求。</p>

<ul>
  <li>交易终止</li>
</ul>

<p>HTLC 构造之后，为了终止 HTLC Off-chain 需要双方同意渠道的状态。如果收件人可以向对方证明 R 的信息，证明他们能够立即关闭比特币 blockchain 上的渠道并且接收资金。在这一点上，如果双方都希望保持渠道打开，就应终止 HTLC Off-chain，并创建一个新的承诺交易反应新的平衡。</p>

<p>由于 Bob 向 Alice 证明，以告诉 Alice R 的有关信息来告诉 Alice，Alice 愿意用新的承诺交易更新平衡。此时不管公布 C2 或 C3，支付将是相同的。</p>

<p>同样，如果收件人不能够通过公开 R 来证明 R 的信息，双方应同意终止 HTLC 并创建一个新的承诺交易， HTLC 中的余额退还给发件人。</p>

<p>如果交易对手不能达成协议或不回应，他们应该通过在比特币 blockchain 公布必需的渠道交易来关闭渠道。</p>

<p>但是，如果他们合作，他们可以通过首先生成具有新的平衡的承诺交易，然后通过交换违约补救交易（BR2a / BR2b）使先前承诺失效。此外，如果他们终止特定的 HTLC，也要交换一些在 HTLC 交易中使用的自己的私钥。</p>

<h2 id="section-5">总结</h2>

<p>为了研究解决Inbound Capacity的问题，我们不可避免的又把闪电网络的细节回顾了一遍；我们需要理解HTLC；但文章也因此拉长了，我们把解决方案的探讨留给下一篇文章。</p>

<h4 id="stay-hungry-stay-foolish">最后，让我们再次自我鞭策：饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</h4>

<h4 id="section-6">引用</h4>

<p>https://github.com/lightningnetwork/paper</p>

<p>https://blog.lightning.engineering/posts/2018/05/30/routing.html</p>

<p>https://blog.lightning.engineering/technical/posts/2019/04/15/loop-out-in-depth.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Lightning Node Cheat Sheet]]></title>
    <link href="https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet/"/>
    <updated>2019-11-18T15:14:19+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet</id>
    <content type="html"><![CDATA[<p>运营一个闪电节点的基本命令速查；</p>

<!-- more -->

<h2 id="bitcoin-core">Bitcoin Core</h2>

<h4 id="section">启动</h4>

<p><code>
bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/
</code></p>

<p>如果需要一些老接口</p>

<p><code>
bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/ --deprecatedrpc=signrawtransaction
</code></p>

<h4 id="bitcoinconf">bitcoin.conf</h4>

<p>```
rpcuser=user
rpcpassword=password
#rpcallowip=127.0.0.1/16
rpcallowip=0.0.0.0/0
rpcport=8332
test.rpcport=8332
rpcthreads=10
server=1
rest=1
testnet=0
zmqpubrawblock=tcp://127.0.0.1:28332
zmqpubrawtx=tcp://127.0.0.1:28333</p>

<h1 id="walletnotifyusrbinecho-hello">walletnotify=/usr/bin/echo “hello”</h1>
<p>```</p>

<h2 id="lnd">Lnd</h2>

<p>接口丰富，自带rpc和restapi接口，迭代速度快；</p>

<p>https://github.com/lightningnetwork/lnd</p>

<h4 id="section-1">部署</h4>

<p><code>
lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=user --bitcoind.rpcpass='password' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=207.246.105.100 --no-macaroons 2&gt;&amp;1 &gt;&gt; lndtest.log
</code></p>

<h4 id="section-2">常用命令</h4>

<ul>
  <li>解锁钱包</li>
</ul>

<p><code>
lncli  --network=testnet unlock
lncli  --network=testnet newaddr
</code></p>

<ul>
  <li>查看余额</li>
</ul>

<p><code>
lncli  --network=testnet walletbalance
lncli  --network=testnet listunspent
</code></p>

<ul>
  <li>连接到一个闪电节点</li>
</ul>

<p><code>
lncli  --network=testnet connect "027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8@3.13.29.161:9735"
</code></p>

<ul>
  <li>打开一个通道</li>
</ul>

<p><code>
lncli  --network=testnet openchannel --node_key 027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8 100000
</code></p>

<ul>
  <li>支付</li>
</ul>

<p><code>
lncli  --network=testnet sendpayment --pay_req "lntb10n1pw6gf60pp5jxwg30u3k7qw2lzef7cnpy6tmnd80q2v5ytglf5tdaalrejhprzsdqhvf6xxmt9ypkxuepqw3jhxaqcqzpg9jsccqelkelayq89ydgrhxwf0hv2ffkdu2y6l27vtpmscszxj3pjsh..."
</code></p>

<ul>
  <li>接收付款</li>
</ul>

<p><code>
lncli  --network=testnet addinvoice --memo "invoice for lnd.fun test3" --amt 100000
</code></p>

<ul>
  <li>关闭通道</li>
</ul>

<p><code>
lncli  --network=testnet closechannel "1243f60a54c4c6b8ab5d124a0c701792e085ab13a68da135ca3ffbabb461f1cc"
</code></p>

<ul>
  <li>链上发送全部余额</li>
</ul>

<p><code>
lncli  --network=testnet sendcoins tbxxxxxx  --sweepall
</code></p>

<h2 id="c-lightning">C-lightning</h2>

<p>接口简洁，能直接集成lightning-charge；</p>

<p>https://github.com/ElementsProject/lightning</p>

<h4 id="section-3">部署</h4>

<ul>
  <li>c-lightning提供了systemctl 服务脚本:</li>
</ul>

<p>```
cat /etc/systemd/system/lightning.service</p>

<p>[Unit]
Description=c-Lightning daemon</p>

<p>[Service]
ExecStart=/usr/bin/lightningd –pid-file=/root/.lightning/lightning.pid –daemon
PIDFile=/root/.lightning/lightning.pid
User=root
Type=forking
Restart=always
RestartSec=10</p>

<p>[Install]
WantedBy=multi-user.target
```</p>

<ul>
  <li>配置文件:</li>
</ul>

<p>```
~/.lightning/config</p>

<p>alias=brain_zhang_lightning_testnode
log-level=debug
#network=bitcoin
network=testnet
bitcoin-rpcuser=user
bitcoin-rpcpassword=password
bitcoin-rpcconnect=127.0.0.1
bitcoin-rpcport=18332
log-file=/var/log/lightning.log
bind-addr=
announce-addr=x.x.x.x:9735
```</p>

<ul>
  <li>注册、启动服务</li>
</ul>

<p><code>
systemctl enable lightning
systemctl start lightning
</code></p>

<h4 id="section-4">常用命令</h4>

<ul>
  <li>建立一个新地址</li>
</ul>

<p><code>
lightning-cli newaddr
</code></p>

<ul>
  <li>查看线上钱包地址</li>
</ul>

<p><code>
lightning-cli dev-listaddrs
</code></p>

<ul>
  <li>连接node (1ml.com node)</li>
</ul>

<p><code>
lightning-cli connect 02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248@23.237.77.12:9735
</code></p>

<ul>
  <li>建立通道</li>
</ul>

<p><code>
lightning-cli fundchannel id satoshi [feerate] [announce] [minconf]
</code></p>

<ul>
  <li>查看链上和链下余额</li>
</ul>

<p><code>
lightning-cli listfunds
</code></p>

<ul>
  <li>支付</li>
</ul>

<p>Send payment specified by {bolt11} with {amount}</p>

<p><code>
lightning-cli pay bolt11 [msatoshi] [label] [riskfactor] [maxfeepercent] [retry_for] [maxdelay] [exemptfee]
</code></p>

<ul>
  <li>收款</li>
</ul>

<p>Create an invoice for {msatoshi} with {label} and {description} with optional {expiry} seconds (default 1 hour), optional {fallbacks} address list(default empty list) and optional {preimage}</p>

<p><code>
lightning-cli invoice msatoshi label description [expiry] [fallbacks] [preimage] [exposeprivatechannels]
</code></p>

<h2 id="c-lightning--lightning-charge">C-lightning &amp;&amp; lightning-charge</h2>

<p>https://github.com/btcme/lightning-charge</p>

<h4 id="section-5">部署</h4>

<p>lightning-charge最好用docker直接集成c-lightning一把启动，比如我已经运行了一个bitcoin core全节点，可以直接下面的命令启动:</p>

<p><code>
docker run -d -u `id -u` -v `pwd`/data:/data -p 9735:9735 -p 9112:9112 \
             -e API_TOKEN=mySecretToken \
             -e NETWORK=testnet  \
             -e BITCOIND_URI="http://user:password@172.18.0.1:18332" \
             shesek/lightning-charge
</code>
注意BITCOIND_URL的IP是docker容器内向外连接的，如果不是用net的方式启动，要填docker的网桥地址；</p>

<ul>
  <li>查询运行状况</li>
</ul>

<p><code>
curl http://api-token:mySecretToken@localhost:9112/info
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -1]]></title>
    <link href="https://happy123.me/blog/2019/11/05/hello-lightning-network-1/"/>
    <updated>2019-11-05T17:17:48+08:00</updated>
    <id>https://happy123.me/blog/2019/11/05/hello-lightning-network-1</id>
    <content type="html"><![CDATA[<p class="info">有许多比特币社区的先行者们面对小白的提问时，总是真诚的说：“去看看比特币的白皮书吧，把它真正弄明白吧，你就会理解一切的。” —–如今，我想对许多质疑闪电网络的比特币先驱们说：“去看看闪电网络的白皮书吧，把它真正弄明白吧，你就会理解一切的。”</p>

<p>我们之前写文章评价道，闪电网络是次世代的支付技术，它不仅仅是一个支付技术，更是建立在比特币主网上的二层网络协议，将来会有许许多多新奇的应用建立在上面，它会为比特币开启下一个十年；</p>

<p>但是闪电网络还在实现的早期阶段，能耐心去读懂它的白皮书的人已经非常少了，更不用提现在飞速发展的<a href="https://github.com/lightningnetwork/lightning-rfc/">BOLT规范</a>了；这其实跟比特币刚诞生时是一样的，在动辄就大谈“区块链技术改变未来”的那一群人中，有几人会真正花时间，去把已经发表11年的比特币8页白皮书弄个明白呢？</p>

<p>闪电网络的基本原理其实非常简单，在我们之前的文章中已经花费了大量篇幅去介绍；但是在实现过程中，还有数不清的工程细节上的权衡；由于现在的实现还只是一个雏形，我们实操闪电网络交易的时候会有各种各样的“？”，我打算写一个系列文章，把一些有趣或者让人困惑的地方抽丝剥茧，记录一下自己的学习过程，也把这项迷人的技术介绍给更多人。</p>

<p>我们将在这篇文章中讨论闪电网络的通道入站容量(Inbound Capacity)问题。</p>

<!-- more -->

<p>凡是亲身体验闪电网络钱包的人，都是这样一个过程:</p>

<ol>
  <li>发送小额的比特币给钱包链上地址</li>
  <li>连接到一个闪电网络节点，创建一个通道，并放置一些币到通道中；</li>
  <li>通过闪电网络发送一笔支付交易</li>
</ol>

<p>到目前为止，一切顺利(当然，对于技术小白来讲，这三个步骤已经足够艰辛了)；然后他会立即遇到闪电网络中第一个令人困惑的问题：</p>

<ul>
  <li>我如何收款？</li>
</ul>

<p>在解决这个问题之前，我们需要复习一些基础知识；你会惊奇的发现，我们前文所说的<code>工程上的细节</code>到底是多么细节的东西；</p>

<h4 id="local-balance-and-remote-balance">本地余额与远程余额 (local balance and remote balance)</h4>

<p>当我们初次建立一个支付通道时，用<code>lncli listchannels</code>探测，一般必要信息是这样的:</p>

<p><code>
        {
            "active": true,
            "remote_pubkey": "xxxxxxxxxx",
            "channel_point": "zzzzzzzzzz:0",
            "chan_id": "17405554940800000000",
            "capacity": "279359",
            "local_balance": "279176",
            "remote_balance": "0",
            "commit_fee": "183",
            "commit_weight": "600",
            "fee_per_kw": "253",
            "unsettled_balance": "0",
            "total_satoshis_sent": "0",
            "total_satoshis_received": "0",
            "num_updates": "48",
            "pending_htlcs": [
            ],
            "csv_delay": 144,
            "private": false,
            "initiator": true,
            "chan_status_flags": "ChanStatusDefault",
            "local_chan_reserve_sat": "2793",
            "remote_chan_reserve_sat": "2793",
            "static_remote_key": false
        },
</code></p>

<p>我们先来关注一下 <code>local_balance</code>和<code>remote_balance</code>这两个参数；</p>

<p>如果还记得我们之前的<a href="https://happy123.me/blog/2019/01/06/bi-te-bi-de-jiao-yi-7/">科普文章</a>的话；构建闪电通道的第一个步骤是建立一笔Funding TX；
这需要双方拿出一定量的比特币放入通道中，这样就会有固定数量的比特币被锁定到通道中，称为通道容量(capacity); 通道发起方投入的金额称为本地余额(local_balance)，对端投入的金额称为远程余额(remote_balance)；</p>

<p>在上面这个例子中，我们看到作为通道发起方，local_balance是279176 satoshi，remote_balance是0，代表对端仅仅是跟我们建立通道链接，并没有放币进来；</p>

<p>local_balance和remote_balance可以在不关闭通道的情况下多次更新，但是如果不关闭或者拼接通道，通道容量无法更改；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg0.png" alt="img" /></p>

<blockquote>
  <p>我们可以把它想象成一个沙漏，虽然沙子的总量是固定的，但是我们可以在沙漏的上下部之间移动啥子，如果想要改变沙子的总量，就需要打破沙漏；</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg1.png" alt="img" /></p>

<blockquote>
  <p>如图：以你的视角来看，你和ROBERT的通道容量是8 btc, local_balance是5btc，remote_balance是3btc; 以ROBERT的视角来看，他的local_balance是3btc，remote_balance是5btc</p>
</blockquote>

<p>每次你付款时，都会把local_balance的部分余额推给对端的ROBERT。 同样的，当收到一笔付款时，local_balance也会增加，remote_balance会减少；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg2.png" alt="img" /></p>

<blockquote>
  <p>如图：当你支付ROBERT 1BTC时，你的local_balance减少1BTC，而remote_balance增加1BTC;</p>
</blockquote>

<p>回到我们最初的例子，因为remote_balance的余额是0 satoshi，所以在只有这一个通道的情况下，你最多发送279176 satoshi，却无法接受付款；</p>

<p>可能聪明的你已经想到了，作为主动发起通道连接的一方，在通道中放入资金是天经地义的，但是对方却没有义务配合你放入资金；为了能获得remote_balance，你需要给对方一点好处才行，目前请求remote_balance的通道连接已经变成了一种服务，你需要<code>购买</code>这样的服务，以便在建立支付通道的时候能有remote_balance余额；</p>

<p>比如这个服务商：</p>

<p>https://yalls.org/about/</p>

<p>那么，购买这种服务，保证自己的支付通道中拥有remote_balance，有什么作用呢？为什么我们收款必须要依赖于它呢？</p>

<h4 id="inbound-and-outbound-capacity">进出容量(Inbound and Outbound Capacity)</h4>

<p>现在，我们已经更清楚的了解了是什么决定了通道的容量以及local_balance和remote_balance 平衡更新的方式，接下来我们考虑一下，如果你是连接节点网络的一部分，会发生什么情况？</p>

<p>两个对等点不需要直接建立支付通道来互相支付。相反，他们可以通过路由节点中转支付。在路由的每一跳，都会发生对应通道内local_balance和remote_balance余额的更新。</p>

<p>假设你想要通过闪电网络出售一个披萨。你至少需要连接到一个闪电网络节点。你会仔细的选择人气尽可能高的节点，为你的顾客–SOPHIE和ANGELA提供收款服务；</p>

<p>这个时候的闪电网络拓扑是这样的：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg3.png" alt="img" /></p>

<blockquote>
  <p>你打开了一个连接到LNTOP的支付通道，并在其中放入2个BTC，你的local_balance是2BTC，remote_balance为0BTC</p>
</blockquote>

<p>现在，ANGELA想要买个披萨，并通过LNTOP支付给你。但是，你与LNTOP的支付通道里，remote_balance为0，所以LNTOP无法付款给你；</p>

<p>在某个特定时刻，你可以接收到的金额或者入站容量(Inbound Capacity)受到remote_balance的限制。你不能收到比你的邻接节点能发送给你的更多的金额。</p>

<p>类似的，你可以发送的金额，或者说出站容量(Outbound Capacity)也同样受到local_balance的限制。</p>

<p>当你用LNTOP打开一个通道时，你决定想要锁定多少比特币，即你的local_balance；类似的，如果LNTOP与你打开一个通道，他们将确定你的初始remote_balance。这具有重要意义。虽然选择local_balance允许你决定初始Outbound Capacity，但你无法控制remote_balance和Inbound Capacity。</p>

<p>如果你今天启动你的闪电节点，并简单的打开一个通道到你选择的另一个节点，你可能会惊奇的发现，自己没有Inbound Capacity，从而无法通过闪电网络接收付款；这对于一个商家来说绝对是大问题；</p>

<p>幸运的是，有好几种方法来获得Inboound Capacity，包括上面提到的，花钱给一些商家，让他们来为你提供一些remote_balance；</p>

<p>…TODO  方法待另一篇文章介绍</p>

<h4 id="section">这样就解决问题了吗？</h4>

<p>嗯……，当然不会这么简单……在一个复杂的网络中，即使你在直接相连的通道中有足够的remote_balance，但你不能保证支付路径上的每一个节点都有充足的remote_balance； 让我们揭示网络中所有节点的local_balance和remote_balance，来更好的理解资金如何流动。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg4.png" alt="img" /></p>

<blockquote>
  <p>如图: LNTOP是一个大的中转节点，与他相邻的每个节点都有LNTOP提供的remote_balance</p>
</blockquote>

<p>这样你与LNTOP的支付通道中，你的remote_balance为3BTC， 而LNTOP与ANGELA的支付渠道中，LNTOP的remote_balance为2BTC，这样ANGELA最多能发送给你2BTC；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg5.gif" alt="img" /></p>

<blockquote>
  <p>如图：ANGELA为你发送了1BTC</p>
</blockquote>

<p>但是在这个网络中，SOPHIE甚至不能发送1BTC给你。如果你看一下SOPHIE和你之间的支付路线，就会发现LNTOP没有接收SOPHIE付款的能力；</p>

<p>对于收款，要求每个路由节点与你(接收方)之间都需要与前一个相邻的节点具有足够的Inbound Capacity；因此，即使你可能通过相邻节点获得了Inbound Capacity，但是整个支付路径上的某些节点可能并没有足够的Inbound Capacity；这样你仍然不能完成收款；</p>

<p>最致命的一点是，这种”显示所有节点的remote_balance和local_balance”的事情在闪电网络中是做不到的；作为网络的一个节点，我们只能知道其他支付通道的容量，而不知道它是如何在相连的两个节点之间分配资金的；</p>

<h4 id="section-1">谁会受影响</h4>

<p>在闪电网络中，并不是所有的节点都有同等的需求。查看我们的示例，全网至少会有三种类型的节点：</p>

<h5 id="section-2">商人节点</h5>

<p>商人节点主要需求是收款，因此，他需要Inbound Capacity，并且从客户到商人节点之间的支付路径上每一个节点，都要有足够的Inbound Capacity;</p>

<h5 id="section-3">用户节点</h5>

<p>用户主要通过闪电网络发送资金，偶尔也会从朋友那里收到一些钱； 对于这些用户，他们的关键是要连接到的节点具有足够的资金能路由给商家；这些用户需要保有少量的remote_balance即可；</p>

<h5 id="section-4">路由节点</h5>

<p>这些节点通过网络路由支付并为此收费。LNTOP就是这样的例子；</p>

<p>他们的工作是探测可用的支付路径。所以他们需要上游与终端用户的Inbound Capacity，以及下游与商家的Outbound Capacity；此外，它们的收费必须与市场上其他的公司竞争，他们还需要确保可靠性、充裕的流动性；这是一项艰难的工作，不是吗？</p>

<p>有很多攻击闪电网络的言论是：只有那些资金充裕的大公司才能有足够的精力和财力运行路由节点，根据马太效应，用户也会倾向于选择这些公司运营的节点服务；这样就会慢慢造成寡头垄断，最终比特币变成一个中心化的东西，变成一个大公司的玩物；</p>

<p>真的是这样的吗？</p>

<h4 id="section-5">结论</h4>

<p>我们讨论了一个支付通道具有的特性，其通道容量、local_balance、remote_balance、Inbound Capacity, Outbound Capacity； 我们看到，闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>但我得说，这些批评者过于心急了；就像比特币诞生初期，很多传统的经济学家批评比特币的<code>通缩</code>特性一样；</p>

<p>为了解决这些问题，社区以一个惊人的创新速度不断提出解决方法，包括WIP、Lightning Loop、多路径余额合并平衡等等；我们也将会在后面的文章中一一介绍；</p>

<p>最后，数字货币世界还是处于蛮荒狂野时代，不是那么多事情都是理所当然的; 每个人的言论都需要批判吸收； </p>

<p>乔帮主的训诫还是需要时时温习：饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</p>

<h4 id="section-6">引用</h4>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eltoo-闪电和离线契约更新机制]]></title>
    <link href="https://happy123.me/blog/2019/09/13/eltoo-shan-dian-he-chi-xian-qi-yue-geng-xin-ji-zhi/"/>
    <updated>2019-09-13T10:29:32+08:00</updated>
    <id>https://happy123.me/blog/2019/09/13/eltoo-shan-dian-he-chi-xian-qi-yue-geng-xin-ji-zhi</id>
    <content type="html"><![CDATA[<p class="info">在我们之前的文章中，对闪电网络的来龙去脉和原理做了详尽的分析；我们提出，相对于现在的传统支付技术，闪电网络技术有一个不可思议的跨越，用时髦一点的话来说，这是次世代的支付技术，假以时日，我相信它的未来不可限量；</p>

<p>闪电网络可以说是比特币二层网络技术的急先锋，它除了开拓比特币的支付愿景，还在很多层面对将来二层网络的发展提出了很多基础协议功能；这一切目前都收集在闪电网络基础技术规范，简称BOLT(Basis of Lightning Technology文档中；</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>

<!-- more -->

<p>仔细阅读BOLT就会发现，闪电网络并不是一个单一的协议，它是一整套协议，并且许多部分都被设计为可替代的；最典型的就是支付通道的部分；</p>

<p>为了保证支付通道双方不作弊，需要给作弊方施加足够的惩罚威慑，目前的支付通道采用的惩罚机制称为 “L2-penalty”机制；这是是JosephPoon和Thaddeus Dryja在原版Lightning Network白皮书中发明的协议;因此也被称为<code>Poon-Dryja通道</code>;</p>

<p>除了这种实现，其实还有另外一种双向支付通道协议，称为[双工小额支付渠道（DMC）]，由Decker和Wattenhofer [2015年]发明。Christian Decker是Blockstream的开发人员，后来blockstream将这个协议进一步完善，发展为Eltoo规范，并在2018年提出；</p>

<p>Eltoo简化了惩罚机制，效率更高，不仅能用于支付渠道当中，还有一个更广泛的应用，打开人任意多方(&lt;7)在二层网络上实现智能合约的可能性；</p>

<p>这个原理讲起来脑洞很大，我读它的论文的时候又一次感叹: 还有这种操作？</p>

<p>看来比特币社区的技术发展已经远远走到了时代的前面，你不能说比特币的技术是老旧的，以目前的发展来看，比特币的底层架构之稳健，足够支持更多的未来黑科技运行在上面；</p>

<p>…….TODO 需要填坑</p>

<p>Eltoo的实施需要一个软分叉，需要现有的比特币主网支持名为<code>SIGHASH_NOINPUT</code>的操作符，结合Schnorr 签名技术，将来会实现许多非常有意思的功能；</p>

<p>最后再强调一遍，闪电网络不仅仅是一个支付的技术，他为比特币二层网络的各种应用构建提供了基础，相信在未来，会出现很多神奇的应用，有多神奇我无法想象；但这个技术绝不是一时的噱头，现在种种迹象表明，它会为比特币开启下一个十年；</p>

<p>引用资料:</p>

<p>https://blockstream.com/2018/04/30/en-eltoo-next-lightning/</p>

<p>https://blockstream.com/eltoo.pdf</p>
]]></content>
  </entry>
  
</feed>
