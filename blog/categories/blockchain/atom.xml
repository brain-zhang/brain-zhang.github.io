<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blockchain | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2021-01-08T14:36:22+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Close Lightning Channels by Lnd-cli?]]></title>
    <link href="https://happy123.me/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli/"/>
    <updated>2021-01-03T16:54:10+08:00</updated>
    <id>https://happy123.me/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli</id>
    <content type="html"><![CDATA[<p>越来越有老年痴呆的倾向，这个命令至少Google过3次了，每次都忘，被自己蠢哭了~~</p>

<p><code>
lncli closechannel &lt;fund_txid&gt; [fund_tx_vout_NO]
</code></p>

<p>不要忘了vout_NO，不然会报错”channel not found”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Systemd Startup Script for Bitcoind?]]></title>
    <link href="https://happy123.me/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind/"/>
    <updated>2020-12-29T16:22:42+08:00</updated>
    <id>https://happy123.me/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind</id>
    <content type="html"><![CDATA[<h2 id="setup-bitcoindservice">setup bitcoind.service</h2>

<p><code>
vim /etc/systemd/system/bitcoind.service
</code></p>

<p>```
[Unit]
Description=Bitcoin daemon
After=network.target</p>

<p>[Service]
ExecStart=/opt/node/bitcoin/bin/bitcoind -daemon -conf=/opt/node/bitcoin/blockdata/bitcoin.conf -pid=/run/bitcoind/bitcoind.pid
# Creates /run/bitcoind owned by bitcoin
RuntimeDirectory=bitcoind
RuntimeDirectoryPreserve=yes
User=ubuntu
Type=forking
PIDFile=/run/bitcoind/bitcoind.pid
Restart=on-failure
StandardOutput=/var/log/bitcoind.log
StandardError=/var/log/bitcoind.log</p>

<h1 id="hardening-measures">Hardening measures</h1>
<p>####################</p>

<h1 id="provide-a-private-tmp-and-vartmp">Provide a private /tmp and /var/tmp.</h1>
<p>PrivateTmp=true</p>

<h1 id="mount-usr-boot-and-etc-read-only-for-the-process">Mount /usr, /boot/ and /etc read-only for the process.</h1>
<p>ProtectSystem=full</p>

<h1 id="disallow-the-process-and-all-of-its-children-to-gain">Disallow the process and all of its children to gain</h1>
<p># new privileges through execve().
NoNewPrivileges=true</p>

<h1 id="use-a-new-dev-namespace-only-populated-with-api-pseudo-devices">Use a new /dev namespace only populated with API pseudo devices</h1>
<p># such as /dev/null, /dev/zero and /dev/random.
PrivateDevices=true</p>

<p>[Install]
WantedBy=multi-user.target</p>

<p>```</p>

<h2 id="reload-systemctl-daemon">Reload systemctl daemon</h2>

<p><code>
systemctl daemon-reload
</code></p>

<h2 id="enabled-new-bitcoind-service">Enabled new bitcoind service</h2>

<p><code>
systemctl enable bitcoind
</code></p>

<h2 id="commands-to-start-or-stop-the-service">Commands to start or stop the service</h2>

<p><code>
systemctl stop bitcoind
systemctl start bitcoind
</code></p>

<h2 id="show-service-status">Show service status</h2>

<p><code>
systemctl status bitcoind.service
</code></p>

<p>More info in:</p>

<p>https://github.com/bitcoin/bitcoin/tree/master/contrib/init</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Logging on Solidity Contract With Truffle Suite]]></title>
    <link href="https://happy123.me/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite/"/>
    <updated>2020-07-17T17:33:45+08:00</updated>
    <id>https://happy123.me/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite</id>
    <content type="html"><![CDATA[<p>Ethereum的智能合约调试起来很麻烦，到目前为止还是没有一个方便的类似于console.log()或printf的调用；</p>

<p>一般都是通过Event的方法来打印log；这种办法在写单元测试的时候很麻烦；</p>

<p>目前最接近于官方的手段是构造一个公用的Console库合约，然后链接到主合约里面来用；</p>

<p>https://github.com/trufflesuite/truffle-logger-example</p>

<p>这个PR一直没有Merge到TruffleSuite的新版本中，我们只能先临时手工Copy下代码来Monkey Patch一下；</p>

<p>步骤如下：</p>

<ul>
  <li>首先在主合约的同级目录添加Console.sol合约:</li>
</ul>

<p><code>
wget https://raw.githubusercontent.com/trufflesuite/truffle/truffleLogger/packages/core/lib/logging/Console.sol
</code></p>

<ul>
  <li>然后在部署脚本里面增加这个库的链接(以官方示例MetaCoin为例)</li>
</ul>

<p><code>
$ vim migrations/2_deploy_contracts.js
</code></p>

<p>```
const Console = artifacts.require(“Console”);
const MetaCoin = artifacts.require(“MetaCoin”);</p>

<p>module.exports = function(deployer) {
      deployer.deploy(Console);
        deployer.link(Console, MetaCoin);
          deployer.deploy(MetaCoin);
          };</p>

<p>```</p>

<ul>
  <li>在需要打印log的单元测试中引入Console.sol</li>
</ul>

<p><code>
$ vim test/TestMetaCoin.sol
</code></p>

<p>```
import “../contracts/Console.sol”;</p>

<p>…..
    console.log(“xxxxxx”);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十行代码挑战世界金融体系]]></title>
    <link href="https://happy123.me/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi/"/>
    <updated>2020-04-23T15:47:39+08:00</updated>
    <id>https://happy123.me/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi</id>
    <content type="html"><![CDATA[<p>这个有点标题党了，但实话说许多”高科技”项目也是这种浮夸的宣传手段，且听我慢慢道来；</p>

<p>最近央行将推出数字货币（DCEP）的消息沸沸扬扬，在没有实际用过之前，我无意对其做过多揣测；</p>

<p>不过这个消息激起了我另一方面的兴趣，就是写一写那些在以太坊上面发行的各种山寨Token；</p>

<p>众所周知，自从Ethereum的<a href="https://github.com/ethereum/EIPs/issues/20">ERC20</a>、<a href="https://github.com/ethereum/EIPs/issues/223">ERC223</a>、<a href="https://github.com/ethereum/EIPs/issues/721">ERC721</a>、<a href="https://github.com/ethereum/EIPs/issues/777">ERC777</a>等Token合约标准诞生以来，在Ethereum上面发行一种货币的成本低的令人发指，我测算，按照现在的ETH汇率，大概10块人民币就能让你发行一个具有发行、转账、增发、销毁等基本功能的电子货币，如果导入OpenZeppelin程序库，在部署合约的时候多出100块钱左右，就可以拥有一个具有融资上限、拍卖、行权计划和其他更复杂的功能的货币。</p>

<p>先知Andreas M. Antonopoulos 曾经在2014年加拿大关于比特币的听证会上表示，未来的货币发行市场可能会超出所有人的想象，一个十几岁的屁大小子，用10行代码足以创造最灵活最有信用的货币；借助区块链的技术，一个幼儿园的童星创造的货币，可能比历史上最有权力的君王创造的货币用户更多；</p>

<p>虽然比特币发明以来，把它的代码Folk一份，修改两个参数就出来”颠覆世界”的山寨币已经数不胜数，但真正把”造币”这件事情变成无门槛，像吃棒棒糖一样容易的，还是得说以太坊的ERC20的横空出世；</p>

<p>那么，就先让我们体验一下，如何10行代码创造我们自己的棒棒糖币吧~~~</p>

<!-- more -->

<h3 id="section">前置技能</h3>

<p>虽然夸张的宣传是只需要十行代码，但是我们得懂一些前置技能:</p>

<ol>
  <li>会翻墙</li>
  <li>了解<a href="https://ethereum.org/">Ethereum</a>的基本原理，最好能把白皮书读明白</li>
  <li>学会<a href="https://github.com/ethereum/solidity/">solidity语言</a></li>
  <li>搞明白<a href="trufflesuite.com/">Truffle开发环境的使用</a></li>
  <li>会用Nodejs</li>
  <li>会用Npm安装包，因为相关代码迭代速度很快，有时候需要你自己解决一些依赖问题</li>
  <li>会一些基本的Linux命令</li>
</ol>

<p>好啦，相信老码农对于以上小门槛根本不屑一顾；</p>

<p>我们假设你满足了上面的前置条件，在一台能翻墙的Linux机器上部署了Nodejs, Geth, Truffle，让我们开干吧；</p>

<h3 id="section-1">初版</h3>

<ol>
  <li>
    <p>首先我们要完成Truffle的搭建，与我们本地运行的Geth联动，保证你的地址里面有一点ETH能支付Gas费用，这部分操作可以参考官方文档</p>
  </li>
  <li>
    <p>然后我们用Truffle命令建立一个简单的模板项目</p>
  </li>
</ol>

<p><code>
$ mkdir CakeCoin
$ cd CakeCoin
$ truffle init
</code></p>

<ol>
  <li>开始编辑我们的棒棒糖Token合约</li>
</ol>

<p>```
$ vim contracts/CakeCoin.sol</p>

<p>pragma solidity ^0.5.0;
contract CakeCoin {
    mapping (address =&gt; uint256) public balanceOf;
    constructor(uint256 initialSupply) public {
        balanceOf[msg.sender] = initialSupply;
    }
    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] &gt;= _value);
        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
    }
}</p>

<p>```
4. 编写一个部署脚本</p>

<p>```
$ vim migrations/2_deploy_contact.js</p>

<p>var CakeCoin = artifacts.require(“CakeCoin”);
module.exports = function(deployer) {
  deployer.deploy(CakeCoin);
};</p>

<p>```
5. 编译部署上链</p>

<p><code>
$ truffle migrate
</code></p>

<p>大功告成，在付出大概0.001ETH的Gas费用之后，你的私人货币就发行成功了，此时你有两项权力：</p>

<ul>
  <li>可以在部署的时候指定货币的总体供应量</li>
  <li>可以执行央行的角色，把货币分发给其他人；至于分发的方式，就看你的心情了
    <ul>
      <li>可以像以太坊众筹一样，为某个时间点的所有比特币持有者做个快照，然后按照比特币的持有量给所有持有人发币</li>
      <li>可以搞宣传诈骗，先创建一个美轮美奂的高大上的网站，然后引那些不明真相的群众花钱来买你成本只有0.001ETH的棒棒糖币</li>
      <li>纯粹为了玩，发行1000万亿货币随机分发给所有以太坊玩家；这也是大多数山寨Token的初始发行办法–先把场子热起来；</li>
    </ul>
  </li>
</ul>

<p>这个合虽然简单，但是已经完成了货币的基本功能：贮存和转移，而且是一个全球通用的，不需要任何组织背书，完全依赖于以太坊的数学体系运转的电子货币；</p>

<p>不要小看这10行代码哦，在所谓的“区块链技术”纷纷攘攘的日子里，很多所谓的金融创新就是靠着这样的代码，大肆圈钱；甚至有个国家，咱就不指明了，发行个啥石油币，本质上一样的套路；</p>

<h3 id="section-2">第二版</h3>

<p>虽然这个CakeCoin已经具备了最简单的发行和转账的功能，但是查询总发行量，账户持有量等等操作只能通过与合约交互来实现，对于非码农人士太困难了，我们需要增加必要的接口:</p>

<p>```
pragma solidity ^0.5.0;</p>

<p>contract CakeCoin {
/* This creates an array with all balances */
    mapping (address =&gt; uint256) public balanceOf;
    uint256 public totalSupply;</p>

<pre><code>event TransferEvent(address indexed _from, address indexed _to, uint256 _value);

/* Initializes contract with initial supply tokens to the creator of the contract */
constructor(uint256 initialSupply) public {
    balanceOf[msg.sender] = initialSupply;
    totalSupply = initialSupply;
    // Give the creator all initial tokens
}

/* Send coins */
function transfer(address _to, uint256 _value) public {
    require(balanceOf[msg.sender] &gt;= _value);
    // Check if the sender has enough
    require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
    // Check for overflows
    balanceOf[msg.sender] -= _value;
    // Subtract from the sender
    balanceOf[_to] += _value;
    // Add the same to the recipient
    emit TransferEvent(msg.sender, _to, _value);
}

    function getBalance(address addr) public view returns(uint) {
            return balanceOf[addr];
    } }
</code></pre>

<p>```</p>

<p>然后提供一个web UI操作界面，具体代码可以参考：</p>

<p>https://github.com/brain-zhang/CakeCoin/tree/branches/1.2/src</p>

<h3 id="erc20">第三版(ERC20)</h3>

<p>上面的货币虽然简单好用，但是有一些缺陷：</p>

<ul>
  <li>初始发行量定了就不能改了，以后不能再增发货币</li>
  <li>发行出去的货币无法注销</li>
  <li>初始发行者的权利不能转让</li>
  <li>无法开展融资等活动</li>
  <li>…..</li>
</ul>

<p>为了解决这些问题，我们想要一个更高级一点的糖果货币；毕竟，金融就是一件把事情越做越复杂的活儿，这样才好浑水摸鱼嘛^_^；</p>

<p>这么搞下来10行代码肯定不止了，但是程序员最大的特长就是造轮子，早就有人把这些东西封装成现成的库合约了,比如这个项目：</p>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts</p>

<p>我们引入一下，代码量反而更少了；</p>

<p>```
pragma solidity ^0.4.0;</p>

<p>import ‘openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol’;</p>

<p>contract CakeCoin is StandardToken {
    string public constant name = ‘CakeCoin’;
    string public constant symbol = ‘CAKECOIN’;
    uint8 public constant decimals = 2;
    uint constant _initial_supply = 10000;</p>

<pre><code>function CakeCoin() public {
    totalSupply_ = _initial_supply;
    balances[msg.sender] = _initial_supply;
    emit Transfer(address(0), msg.sender, _initial_supply);
} }
</code></pre>

<p>```</p>

<p>以上的合约相比我们第二版，可以一眼看出有几个变化:</p>

<ol>
  <li>有了个正式的名字 <code>CakeCoin</code>, 这是ERC20的规范</li>
  <li>有了个正式的货币符号 <code>CAKECOIN</code>, 这是ERC20的规范</li>
  <li>有了精度限制, 这是ERC20的规范</li>
  <li>有了初始发行量, 这是ERC20的规范</li>
  <li>有了以上这些明文约定的东西，就很容易被第三方的交易所解析，可以直接上架交易</li>
</ol>

<p><code>openzeppelin-contracts</code> 项目发展非常快，为了便于演示，我们先采用其早期版本作为基础库；其truffle-config.js配置如下：</p>

<p>https://github.com/brain-zhang/CakeCoin/blob/branches/1.3/truffle-config.js</p>

<p>执行下面命令重新部署:</p>

<p><code>
truffle migrate --reset
</code></p>

<p>如此一来我们就有了一个完整的符合<a href="https://docs.openzeppelin.com/contracts/3.x/erc20">ERC20</a>规范的代币；让我们先在命令行里面体验一下其能力：</p>

<p>```
$ truffle console</p>

<p>truffle(development)&gt; CakeCoin.address</p>

<p>‘0xb634675Ea3B3aDBb2B72A975cD7Ed04Be79c4873’</p>

<p>```</p>

<p>得到了合约的部署地址，然后我们执行下列命令看一下货币发行总量:</p>

<p>```
truffle(development)&gt; let supply = await CakeCoin.deployed().then(instance =&gt; instance.totalSupply())
truffle(development)&gt; supply.toString()</p>

<p>‘10000’
```</p>

<p>接着，我们用本地的测试区块链上创建的账户进行一笔转账，并验证其余额:</p>

<p>```
truffle(development)&gt; let accounts;
truffle(development)&gt; web3.eth.getAccounts((err,res) =&gt; { accounts = res });
truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
truffle(development)&gt; 10000</p>

<p>truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.transfer(accounts[1], 100) })</p>

<p>truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
truffle(development)&gt; 9900</p>

<p>truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[1]).then((balance) =&gt; console.log(balance.toString())) })
truffle(development)&gt; 100</p>

<p>```</p>

<p>OK，验证完毕，这样我们创造了一个符合ERC20规范，可以直接上架交易所，具备基本的发行、转账功能的代币；但是我们得到的还不止于此~~~</p>

<p>ERC20最大的功能创新是使用了approve和transferFrom的两步式交易。这个流程允许代币的持有人授权其他地址操纵他们的代币。这通常用于授权给某一个合约地址，进行代币的分发，但也可以用于交易所的场景。</p>

<p>例如，某个公司正在销售ICO的代币，他们使用授权某个众筹合约的地址进行一定数量的代币分发。这个众筹合约就可以使用transferFrom把代币从持有人的余额中转账给ICO代币的买方;</p>

<p>下面我们就演示如何创建一个众筹合约来配合我们的CakeCoin实现一个自动化的代币分发</p>

<h4 id="cakecoindemo">首先我们需要建立一个接收CakeCoin的合约Demo</h4>

<p>```
pragma solidity ^0.4;</p>

<p>import ‘openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol’;</p>

<p>// A faucet for ERC20 token CakeCoin
contract CakeCoinFaucet {</p>

<pre><code>    StandardToken public CakeCoin;
    address public CakeCoinOwner;

    // CakeCoinFaucet constructor, provide the address of CakeCoin contract and
    // the owner address we will be approved to transferFrom
    constructor(address _CakeCoin, address _CakeCoinOwner) public {

            // Initialize the CakeCoin from the address provided
            CakeCoin = StandardToken(_CakeCoin);
            CakeCoinOwner = _CakeCoinOwner;
    }

    function withdraw(uint withdraw_amount) public {

    // Limit withdrawal amount to 10 CakeCoin
    require(withdraw_amount &lt;= 1000);

            // Use the transferFrom function of CakeCoin
            CakeCoin.transferFrom(CakeCoinOwner, msg.sender, withdraw_amount);
}

    // REJECT any incoming ether
    function () public payable { revert(); }
</code></pre>

<p>}</p>

<p>```
这个合约的作用非常简单，就是接收CakeCoin，然后允许接收者提现到指定地址；</p>

<h4 id="migratecakecoincakecoinfaucet">修改migrate同时部署CakeCoin以及CakeCoinFaucet</h4>

<p>因为CakeCoinFaucet依赖于CakeCoin合约的部署，所以我们修订之前的2_deploy_contracts.js为:</p>

<p>```
const CakeCoin = artifacts.require(“CakeCoin”);
const CakeCoinFaucet = artifacts.require(“CakeCoinFaucet”);</p>

<p>module.exports = function(deployer, network, accounts) {
  var owner = accounts[0];
  deployer.deploy(CakeCoin, {from:owner}).then(function(){
    // Then deploy CakeCoinFaucet and pass the address of CakeCoinToken  and the
    // address of the owner of all the CakeCoin who will approve CakeCoinFaucet
    console.log(CakeCoin.address);
    return deployer.deploy(CakeCoinFaucet, CakeCoin.address, owner);
  });
};</p>

<p>```</p>

<p>注意，CakeCoin部署完毕后，才能得到实际的合约地址，然后CakeCoinFaucet的合约部署需要传入这个地址；</p>

<h4 id="section-3">验证</h4>

<p>首先看一下CakeCoin初始发币数目:</p>

<p><code>
truffle(development)&gt; let accounts;
truffle(development)&gt; web3.eth.getAccounts((err,res) =&gt; { accounts = res });
truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
truffle(development)&gt; 10000
</code></p>

<p>看一下第二个测试地址的币:</p>

<p><code>
truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
truffle(development)&gt; 0
</code></p>

<p>好了，我们先批准CakeCoinFaucet合约对CakeCoin的控制</p>

<p><code>
truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.approve(CakeCoinFaucet.address, 10000) })
</code></p>

<p>提现试一下:</p>

<p><code>
truffle(development)&gt; CakeCoinFaucet.deployed().then(instance =&gt; { faucet = instance})
truffle(development)&gt; faucet.withdraw(1000, {from:web3.eth.accounts[1]})
truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[1]).then((balance) =&gt; console.log(balance.toString())) })
truffle(development)&gt; 1000
</code></p>

<h4 id="section-4">功能增强</h4>

<p>翻阅<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20基类代码</a>可以发现，它其实没有什么神奇之处，只不过是把各个电子货币的名称、发行量、支持接口标准化了而已，其中最重要的增强就是为其它合约支持ERC20代币提供了两个接口approve和trnasfrom；</p>

<p>我们当然可以在ERC20的标准之上添加其它增强功能</p>

<h5 id="section-5">比如创始人可以随时销毁这个合约</h5>

<p>```
contract owned {
      address payable owner;
      // Contract constructor: set owner
      constructor() public {
              owner = msg.sender;
      }
      // Access control modifier
      modifier onlyOwner {
             require(msg.sender == owner,
                     “Only the contract owner can call this function”);
           _;
      }
}</p>

<p>contract CakeCoin is StandardToken, owned {
       // Contract destructor
       function destroy() public onlyOwner {
               selfdestruct(owner);
       }
}</p>

<p>```</p>

<h5 id="section-6">比如创始人可以销毁代币，或者增发代币</h5>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Burnable.sol</p>

<h5 id="section-7">比如创始人可以临时终止代币的使用</h5>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Pausable.sol</p>

<h4 id="section-8">甚至可以在某个合适的时间点对代币金融系统做个快照</h4>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Snapshot.sol</p>

<h4 id="section-9">妖魔横行</h4>

<p>我们用10行代码就创建了可以在技术层面媲美现代金融系统中最安全的电子货币，这一切是如此轻而易举，总觉得有哪些地方不大对劲~~~</p>

<p>是的，有的人认为这还是太麻烦了，最好有个web界面让我把币名、初始发行量、发行人等等信息填一下，最好加上两句蛊惑人心的宣传口号，然后一键发币~~</p>

<p>是的，这个要求很合理，于是诞生了像<a href="https://vittominacori.github.io/erc20-generator/">ERC20-Generator</a> 这样的开源平台，它真正做到了让幼儿园小朋友也能一键发币！</p>

<p>只要填写几个简单的参数，在安装MetaMask的浏览器中支付一点ETH Gas费用，人人都可以发币；</p>

<p>光发个币自娱自乐的人非常少，我们在之前的文章里面一再提醒，所谓的区块链领域，充斥着诈骗赌博投机者；不幸的是，这帮人对于新技术的利用和孜孜不倦的学习精神让真正的专家们汗颜；很快的，他们就把这项技术应用在割韭菜事业中~~~</p>

<p>光发币还不足以割韭菜，还记得我们之前的介绍blockchain的文章吗？里面提到了比特币的<a href="https://happy123.me/blog/2019/01/23/bi-te-bi-de-blockchain-2/">侧链</a>技术，并预言基于Atomic Swap (原子交易)技术的交易所终将会大放光彩；</p>

<p>没错，以太坊作为技术急先锋试验场，诞生了像<a href="https://uniswap.org/">Uniswap</a> 这样的平台，它是完全去中心化的，开源的，可以自动上架ERC20代币，向全世界的ETH玩家们敞开了投机大门、并且是完全公正，没有人控制的一个交易平台(当然，它有没有漏洞、是不是万无一失还很难说)~~~</p>

<p>人人都能发币，发行的货币可以毫无限制、毫无门槛的上架全世界交易流通的去中心化交易所，这就像是一个不受监管、零门槛的IPO市场，会发生什么就不用再多说了吧;</p>

<p>这是一个完全颠覆传统证券市场、传统赌博行业的一个新兴割韭菜基地；赌博投机者以其敢为人先的魄力，绝对的技术Geek范、对新技术的开放心态、野兽般的学习进取精神，还有绝妙的工程能力让人肃然起敬；</p>

<h3 id="erc223">第四版(ERC223)</h3>

<p>ERC20已经非常方便了，但是它还有一个明显的缺陷，就是把ERC20 Token发送到一个不支持它的合约B时，并不会报错，而是悄无声息的把这些Token冻结在B合约中，永远无法使用了；</p>

<p>在合约开发中，一般开发者们都会充分的考虑到接收ETH的处理，即使不能返还，也很少发生冻结ETH的问题；但是为ERC20 Token的使用者们所做的考虑却不多；作为一个开发者的角度来说，我怎么才能为无穷尽的ERC20 Token去做适配呢？ 那些傻瓜持有者们乱发到我的合约里算他们自己倒霉，有人在大街上乱撒钱然后收不回来，责任只能自己承担嘛；</p>

<p>在ICO群魔乱舞的时候，数不清的小白还没搞明白他们买到的Token到底是个什么东西，就迫不及待的充值各种合约，企图投机大赚一笔，这样做的结果就是有许多设计不当的投机合约冻结了大笔资金，并且…..没有人能取出来，即使你是这些合约的拥有者也无济于事；粗略估计这些小白们损失的资金在几百万美元的量级，可以参考：</p>

<p>https://github.com/ethereum/EIPs/issues/223</p>

<p>为了解决这个问题，有人非常贴心的提出了ERC223改进方案，思路也非常简单：</p>

<ol>
  <li>实现ERC20 Token的时候，转账函数需要检测要发送的地址是不是有效的合约</li>
  <li>如果是有效的合约，需要调用一个约定好的函数(tokenFallback)看是否能处理我发送的Token</li>
</ol>

<p>如果不满足以上两个条件，则转账失败，Token不会实际发送；</p>

<p>ERC223标准尚未被广泛采用，有关这个方案的后向兼容性、实现的形态到底是在合约接口层还是在用户界面等问题仍旧是以太坊社区讨论的焦点。</p>

<h3 id="erc777">第五版(ERC777)</h3>

<p>同样的针对ERC223提出的问题，另一个改进提案是ERC777:</p>

<p>ERC777除了要解决误把Token发给不支持的合约之外，还做了我们上文提到过的一些增强，比如:</p>

<ul>
  <li>
    <p>为代币的生成和销毁提供特定事件。</p>
  </li>
  <li>
    <p>使运营方（可信第三方，旨在验证合约）代表代币持有者移动代币。</p>
  </li>
  <li>
    <p>在userData和operator数据字段中提供代币发送交易的元数据。</p>
  </li>
  <li>
    <p>通过调用接收方的tokensReceived函数使合约和地址能够通知代币收据，并通过要求合约提供tokensReceived函数来降低代币被锁定到合约的可能性。</p>
  </li>
  <li>
    <p>允许现有合约对tokensToSend和tokensReceived函数使用代理合约。</p>
  </li>
</ul>

<p>详细请参考：</p>

<p>http://github.com/ethereum/EIPs/issues/777</p>

<p>同样的，增强越多，实施就越慢，ERC777也还在社区讨论中……</p>

<p>注意，开发ERC777 Token上架UniSwap，如果代码处理不当，会有非常严重的安全风险，今年已经有无数Hack事件教用户做人了，请参考下面的最佳实践：</p>

<p>https://github.com/OpenZeppelin/exploit-uniswap</p>

<h3 id="erc721">番外篇(ERC721)</h3>

<p>当我们能随意发行代币之后，很容易就能扩展到金融行业另外的普遍需求，资产证券化；</p>

<p>最直观的就是我们之前的文交所、邮币卡之类的证券交易，还有房产证券化REITs等产品；而这些东西在智能合约的帮助下很容易实现；</p>

<p>可以预见，将来所有现实世界的融资手段或投机产品都能在区块链上找到对应的证券化模型；</p>

<p>好了，让我们看看如何将一件唯一的资产(比如名画)在智能合约上进行交易呢？</p>

<p>为了了解ERC20和ERC721的本质区别，我们只需要看一看ERC721的内部数据结构就可以了：</p>

<p><code>
// Mapping from deed ID to ownermapping 
(uint256 =&gt; address) private deedOwner;
</code></p>

<p>ERC20将所有者作为映射的主键，跟踪每个所有者的余额；而ERC721将合约ID作为映射的主键； 这样，我们只要创造一个智能合约，收录所有证券化的画作，并分配ID；就可以将其在链上进行交易了；</p>

<p>像ERC20规定了代币的标准化信息一样，ERC721也用一个Metadata提供了资产的标识信息，详细的实现请参考:</p>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol</p>

<h3 id="erc1155">第六版(ERC1155)</h3>

<p>到目前为止，我们已经为所有现实世界中拥有的证券化手段搬上了区块链，但是注意到了吗？这一切还有局限：</p>

<p>从ERC20到ERC721，每个提案都是根据区块链应用的一步步发展慢慢提出草案来标准化的；刚开始大家想的比较简单，就是一类资产对应一个合约；但很快，就有了更大的愿景，比如：</p>

<p>如何在一个合约中发行多个代币，或多项资产？</p>

<p>最典型的场景，我们开发了一款RPG游戏(暗黑破坏神)；里面充斥着大量的装备以及游戏金币，现在我们想要把这一切搬到区块链上，玩家们可以将金币Token化，从而交易各类装备；</p>

<p>按照现有的实现，我们需要发行一个Token合约，以及好几个装备合约；这样无疑会增加交易的复杂度以及Gas成本；</p>

<p>为了解决这类问题，有人提出了ERC1155，ERC1155借鉴了ERC20，ERC721和ERC777的全部思想；可以在一个合约中发行多个代币及资产，交易的时候可以批量完成多个交换：</p>

<p>https://github.com/ethereum/eips/issues/1155</p>

<p>老实说，这个合约的实现我还没有研究过，现在此类的应用也不多，让我们留到下次再探讨吧。</p>

<h3 id="section-10">总结</h3>

<p>最后，也许你已经被这些名词、规范、绕来绕去的工具链给搞晕了；那么我们只需要认清一件事，就是这个领域在高速的发展，今天被热捧的概念，也许明天就会被抛弃；在这种蛮荒时代，骗子层出不穷，要当心啊~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -3]]></title>
    <link href="https://happy123.me/blog/2019/11/30/hello-lightning-network-3/"/>
    <updated>2019-11-30T09:12:24+08:00</updated>
    <id>https://happy123.me/blog/2019/11/30/hello-lightning-network-3</id>
    <content type="html"><![CDATA[<p>在前面几篇文章中我们评论道：闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>为了理解这个问题，我们对于闪电网络的原理做了详细的探讨，现在是谈谈社区的一些解决方案的时候了；</p>

<p>我们这篇文章就来探讨为了解决Inbound Capacity问题，目前lightningLab的一个实验项目：</p>

<p><a href="https://github.com/lightninglabs/loop">loop</a></p>

<!-- more -->

<h4 id="inbound-capacity">再次回忆Inbound Capacity</h4>

<p>想一下，我们什么时候需要注入Inbound Capacity；简单来说，有两种典型的场景：</p>

<ol>
  <li>商家收款，Inbound Capacity消耗殆尽</li>
  <li>小白初次体验闪电钱包，向朋友收款，需要开辟第一个收款通道</li>
</ol>

<p>在一个人人都使用闪电的理想未来中，这个系统是自平衡的。你付给别人的钱和你从他们那里得到的钱一样多，而资金只是不停地来回流动。然而，在今天的闪电网络状态下，这并不符合实际情况。例如，一个商人通过闪电销售产品，但通过另一种支付方式支付其供应商可能会积累越来越多的平衡在其闪电渠道，直到客户不能再支付。所有的资金都移到了商人那边。</p>

<p>现在最普遍的解决办法就是向三方服务商购买通道服务。这就造成了一个让比特币老手匪夷所思的疑问：不是说闪电网络好用吗？怎么收个款这么折腾？难道我要收款，还得先求别人来给我铺路？</p>

<p>为什么我不能自己动手，丰衣足食呢？还有，假如我是商家，收款的时候还得时时操心额度够不够，这不是折腾吗？</p>

<p>这是非常正常的质疑，因此我们一再说闪电网络还处于发展期，有很多基础设施不够完善；</p>

<h2 id="loop">LOOP</h2>

<ul>
  <li>在我们的想象中，闪电网络应该提供这样一种服务：</li>
</ul>

<p>让用户能够用来自钱包或交易所的链上比特币来填充他们的闪电通道。当用户通过闪电网络进行一系列支付时，她的Inbound 余额就会下降。然后，她可以使用这个服务从一个普通的比特币链上钱包或通过一个交易所账户，在闪电通道上重新注入资金，并在必要时继续增加额外的资金。</p>

<p>这项服务还应该允许用户使用非托管的比特币合约，安全地将资金从闪电网络中转移到其他地方。有了LOOP，用户、企业和路由节点运营商就能够无限期地保持闪电通道的开放，从而使网络更高效、更稳定、使用更便宜。</p>

<p>在这个场景中，不论是用户的链上钱包，还是闪电通道，只要还有余额，就能没有感知的继续付款和收款，直到余额消费完毕为止；</p>

<p>用户的体验应该是打开钱包，即可完成每一笔支付和收款交易，而不用去操心通道余额，Inbound Capacity这些烦心问题；</p>

<p>要做到这些，Loop的解决方案是利用闪电通道付款(把资金从你这边推出)，然后在一个链上地址收到钱。你有效地将支付循环回你自己，因此得名闪电循环(Loop)。</p>

<p>任何通道都可以反复循环。不需要打开新的通道，用户可以选择他们想要循环出去的对等点。这是与“销售”服务和用户之间的通道的现有服务相比的一个优势。</p>

<p>有了这些服务，任何支付给用户的收入将支付路由费用。它们绑定到目标服务的路由策略。除此之外，许多用户使用相同的服务打开通道会造成单点故障。客户端Lightning Loop软件和协议是开源的，并且是经过mit许可的，而服务器端则可以通过使用比特币合约来完全验证。</p>

<p>我们当然可以成立一个托管方来完成一切操作，但是，在去中心化的背景下，为每一个用户提供这样的能力也是非常重要的；让我们看看Loop是如何做到这一切的；</p>

<h4 id="loop-1">一个最基本的LOOP循环</h4>

<p>一个最基本的LOOP循环包含下面这几个步骤：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191130/bg1.jpg" alt="img" /></p>

<p>我们假设商家的名字叫Bob，他想用自己的链上钱包充值一个闪电通道，他连接到了一个LOOP服务，这个LOOP服务可以是Bob自己架设，也可以是不需要信任的第三方假设的；</p>

<ol>
  <li>Bob生成一个秘密散列预原像值R，以及散列结果H</li>
  <li>Bob将与此散列H绑定的付款发送到Lightning Loop服务器。服务器还不能消费这笔款项，因为它还不知道R。相反，它会一直持有这笔支付交易，直到它得到原像R。此部分使用hodl发票实现。</li>
  <li>服务器将一个链上事务发布到一个输出(交易C1a)，该输出可以通过公开原像R(一笔P2SH交易)来消费，这是一笔链上的HTLC交易</li>
  <li>Bob将监控到这笔交易，他提供了R值消费了这笔交易(称为sweep tx)，此时R值成为一个公共知识</li>
  <li>服务器同样监控到这笔交易的消费，它从其中提取R值，并使用它来处理它仍然持有的闪电支付。最后一步完成交换。</li>
</ol>

<p>如果服务器保留闪电支付，并且从不发布链上事务，那么支付将超时，资金将返回给用户。这构成了服务的非托管性质。在超时的情况下，用户会受到轻微的惩罚，因为Loop将锁定他们的资金直到超时。</p>

<h4 id="section">预付款</h4>

<p>LOOP服务器需要花钱构造一个HTLC 链上交易。如果Bob不消费这笔交易，LOOP服务器将失去这笔钱。如果不进行检查，这可能会引入一个DoS攻击方法，将循环系统的空闲UTXOs消耗一空。</p>

<p>为了防止这种情况发生，Bob需要在交换付款的同时进行第二次闪电付款，称为预付款(prepayment)。这个想法是，如果交换没有成功，但是服务器发布了链上 HTLC(C1a)，服务器保留预付款作为对矿商费用损失的补偿。</p>

<h4 id="bobhtlc">Bob消费链上HTLC</h4>

<p>当Bob的消费HTLC(C1a)的交易进入mempool(上面的步骤4)时，就会显示原像R值。从那时起，原像R将被视为公共知识，Bob应该期待他们的闪电付款尽快成功确认。正是出于这个原因，Bob需要确保消费交易得到确认。有一件事可能会延迟确认，那就是以过低的矿商费发布消费交易。但是，用户可以使用诸如RBF和CPFP等费用提升工具来确保及时的确认。</p>

<p>在Lightning Loop中，通过启用RBF并尝试用基于最新费用估计的新交易替换每个块中的sweep交易来处理未确认的交易风险。交易费用的上限是用户在开始交换时指定的最大矿商费用，以避免在链上支付过高的费用。</p>

<h4 id="section-1">时间压力</h4>

<p>不幸的是，对于用户Bob来说，确认扫描交易的时间是有限的。LOOP服务器需要一种方法，如果Bob没有发布R值来消费这笔链上交易C1a，服务器也可以收回资金。因此，链上交换输出同时被一个散列和一个时间锁定，这使得它成为一个类似于常规闪电支付中使用的HTLC的hashtime locked contract (HTLC)。</p>

<p>当交换被启动时，服务器会选择HTLC的实际到期高度，并根据循环客户端实现可接受的最小值进行检查。如果服务器建议的到期时间太短，将不会构造C1a，并且交换将终止。这样做的原因是，用户需要有一个合理的机会来确认C1a的消费交易。</p>

<p>当用户通过在内存池中插入消费交易来公开原像R时，计时器开始计时。用户需要在达到到期高度并打开服务器回收路径之前确认交易。</p>

<p>当Bob公布了R值，但他的消费交易却因为费用太低而迟迟无法确认，当接近到期高度时，Bob可能需要更积极地提高收费。他甚至可能想要超过设定的最大矿商费，因为另一种选择可能是失去全部掉期金额。</p>

<h4 id="section-2">服务器如何保证公正</h4>

<p>LOOP的目标是以一种不考虑服务器行为的方式实现它。它应该考虑服务器作恶的情况。例如，从服务器接收到的所有值和on-chain HTLC的参数都由客户机在本地进行检查。如果任何操作超出了可接受的范围，则LOOP交换将中止。</p>

<p>尽管做了这些准备，但Loop还实现了一个“公平”的服务器。只要对方可以选择不同的行为，LOOP Server就会选择对用户最有利的行为。相对的，有些对手服务器会抓住任何机会来最大化利润。由于掉期是非托管性的，幸运的是，这样的机会并不多。它们大多出现在用户不愉快的流程和错误方面。</p>

<p>取消掉期支付就是一个例证。当链上的HTLC过期且超时交易得到充分确认后，服务器需要收回资金时，将立即取消所持有的通道中的付款。它本来可以持有它更久，希望由于某种原因，原像R仍然会出现在mempool当中，但公平的服务器不会这样做。</p>

<h4 id="section-3">递归循环</h4>

<p>有了LOOP，就有可能使用一定数量的资金X来获得比X大得多的流入流动性。用收到的链上基金，可以注入到打开的另一个通道中去，这个通道的资金也可以循环出去。只要还有资金，这个过程就可以继续下去，因为每一步都需要向矿工、路由节点和循环服务支付费用。这个方法称为“环回”。</p>

<p>这样做的最终结果是，路由节点会向用户的节点提交大量资金。对他们来说，希望他们能从中赚取一些路由费用。</p>

<p>这也强调了路由节点监视它们的通道并关闭不产生任何返回的通道的必要性。</p>

<p>将链上资金注入闪电通道的行为我们称之为 LoopIn，将闪电通道的资金支付回链上钱包的行为我们称之为LoopOut。</p>

<p>Bob的LoopIn只可以为自己的通道注资，来源资金可以来自自己的钱包，也可以通过指定一笔外部的on-chain HTLC交易给通道注资；如果某个交易所支持这种Loop方式，也许将来你可以直接从交易所托管的在线钱包中提取资金到你的闪电通道中；</p>

<p>而LoopOut既可以付款给自己，也可以指定一个三方钱包地址，这在发工资的时候可能很有用；</p>

<h4 id="section-4">缺陷</h4>

<p>为了防止DoS攻击，使用LOOP服务需要一笔预付款。预付款数额是名义上的，最多是几千satoshis。在API和CLI中，执行交换的用户可以预先看到他们同意的预付金额。</p>

<p>除此之外，还需要使用HTLCs对传入和传出的CLTV输出进行标准超时处理。这与Lightning中所需的时间锁管理级别没有什么不同。然而，良好的费用选择启发式的影响可以降低到最低。</p>

<h4 id="section-5">结论</h4>

<p>可以看到，与循环输出提供的独特优势相比，上述几点缺陷微不足道。它为用户提供了从任何人获得流入流动性的灵活性。它不会推动集中式的网络拓扑结构，并提供了重用现有通道的方法，从而延长了通道的生存期。</p>

<h2 id="section-6">实践</h2>

<h4 id="loop-2">架设一个LOOP服务</h4>

<p>Loop目前只能跟lnd搭配使用，我们在同一台机器上，模拟Bob商户，在不需要别人帮助的情况下为自己的闪电通道Inbound注资；</p>

<ul>
  <li>lnd的编译需要特殊开关才能支持loop:</li>
</ul>

<p><code>
git clone https://github.com/lightningnetwork/lnd.git
cd lnd
make install tags="signrpc walletrpc chainrpc invoicesrpc routerrpc"
</code></p>

<ul>
  <li>启动lnd</li>
</ul>

<p><code>
nohup ./lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=xxxxx --bitcoind.rpcpass='xxxxx' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=x.x.x.x 2&gt;&amp;1 &gt; lndtest.log &amp;
</code></p>

<p>启动之后你会发现多了几个macaroon验证文件，关于macaroon，我们以后会写文章介绍；</p>

<p><code>
ls ~/.lnd/data/chain/bitcoin/testnet/
admin.macaroon  chainnotifier.macaroon  channel.backup  invoice.macaroon  invoices.macaroon  macaroons.db  readonly.macaroon  router.macaroon  signer.macaroon  wallet.db  walletkit.macaroon
</code></p>

<ul>
  <li>
    <p>如果没有闪电通道的话，建立一个闪电通道，此步骤参考之前的文章</p>
  </li>
  <li>
    <p>编译loop</p>
  </li>
</ul>

<p><code>
git clone https://github.com/lightninglabs/loop.git
cd loop/cmd
go install ./...
</code></p>

<p>编译之后会得到两个可执行文件，服务程序loopd，以及命令行cli交互工具loop;</p>

<ul>
  <li>启动loopd</li>
</ul>

<p><code>
nohup loopd &gt;&gt; loopd.log 2&gt;&amp;1 &amp;
</code></p>

<ul>
  <li>将链上钱包的钱注入到已有的闪电网络通道中</li>
</ul>

<p>因为我们是自助服务，所以我们使用loop out提取一部分链下的资金，回收到自己的链上钱包中，同时为自己的通道注入流动性</p>

<p>在注入之前，我们已经建立了一个持有1000000 satoshi的通道，不过这1000000 satoshi都在我们自己<code>local_balance</code>一端，我们的<code>remote_balance</code>此时是0；</p>

<p>我们执行</p>

<p><code>
./loop out 500000 tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx
./loop monitor
</code></p>

<p>持续监控log输出，我们发现此时通道状态变成了这样：</p>

<p>```
channel:
    “channels”: [
        {
            “active”: true,
            “remote_pubkey”: “xxxxx”,
            “channel_point”: “zzzzzz:1”,
            “chan_id”: “111111111111”,
            “capacity”: “1000000”,
            “local_balance”: “498627”,
            “remote_balance”: “0”,
            “commit_fee”: “271”,
            “commit_weight”: “944”,
            “fee_per_kw”: “253”,
            “unsettled_balance”: “501102”,
            “total_satoshis_sent”: “0”,
            “total_satoshis_received”: “0”,
            “num_updates”: “21”,
            “pending_htlcs”: [
                {
                    “incoming”: false,
                    “amount”: “1338”,
                    “hash_lock”: “eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=”,
                    “expiration_height”: 1609844
                },
                {
                    “incoming”: false,
                    “amount”: “1338”,
                    “hash_lock”: “eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=”,
                    “expiration_height”: 1609844
                },
                {
                    “incoming”: false,
                    “amount”: “499764”,
                    “hash_lock”: “+xsofcSn9Y+Wx94vkx66rl5rgQoDthVBI4Pvhp6lhX4=”,
                    “expiration_height”: 1609988
                }
            ],
            “csv_delay”: 144,
            “private”: false,
            “initiator”: true,
            “chan_status_flags”: “ChanStatusDefault”,
            “local_chan_reserve_sat”: “10000”,
            “remote_chan_reserve_sat”: “10000”,
            “static_remote_key”: false
        }
    ]
}</p>

<p>```</p>

<p>通道中现在有了htlc交易，并设定了一个过期块高度;</p>

<p>此时loopd的输出如下：</p>

<p>```
2019-11-24 10:58:48.403 [INF] LOOP: Offchain swap destination: xxxxxxxxxxxxxxxxxxxxxxxxxx
2019-11-24 10:58:53.073 [INF] LOOPD: Loop out request received
2019-11-24 10:58:53.073 [INF] LOOP: LoopOut 0.005 BTC to tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx (channel: <nil>)
2019-11-24 10:58:53.078 [INF] LOOP: Initiating swap request at height 1609561
2019-11-24 10:58:53.423 [INF] LOOP: fb1b28 Htlc address: tb1qku40cmlsrmdtyqp6vgpjw9vpe8jkcp3ullxa9u5yphpdequc6f4qa60ts8
2019-11-24 10:58:53.424 [INF] LOOP: fb1b28 state Initiated
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending swap payment lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm (id:fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e)
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending prepayment lntb13370n1pwanu0dpp50rhm7qj4lvw5g723h95ejvlp7zwdf622hvkduaxm4y7ycpumzu0sdq2wpex2urp0ycqzxgxq97zvuqkhdq3yvlvljdkz2h3u5s37q2h6mxt4w3ynucnf6psckwpc80l3y944h09ruj2m2zacyshuch7hdwzl86n6nva0lan8lyg3rhshqsn0qprgdyel (id:78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f )
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Register conf ntfn for swap script on chain (hh=1609561)
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609561)
2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Waiting for either htlc on-chain confirmation or  off-chain payment failure</nil></p>

<p>```</p>

<p>注意，这里产生了两笔闪电支付，分别是注入通道的资金(swap payment)，以及预付款(prepayment)；Loop服务端立即发布了链上交易，期待得到swap payment的原像R值；</p>

<p>然后我们等待链上交易的确认:</p>

<p><code>
2019-11-24 10:59:02.029 [INF] LOOPD: Monitor request received
2019-11-24 11:10:41.583 [INF] LOOP: Received block 1609562
2019-11-24 11:10:41.585 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609562)
2019-11-24 11:28:10.032 [INF] LOOPD: Loop out terms request received
2019-11-24 11:28:10.091 [INF] LOOPD: Loop in terms request received
2019-11-24 11:28:53.934 [INF] LNDC: Payment 78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f completed
2019-11-24 11:29:36.256 [INF] LOOPD: Monitor request received
2019-11-24 11:30:27.928 [INF] LOOP: Received block 1609563
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609563)
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Swap script confirmed on chain
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc tx eac746dd4c7f28edd277a39aa4771b651f0faf1d11f82bacf03e668b35a5658b at height 1609563
2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc value: 0.005 BTC
2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 state PreimageRevealed
2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 Sweep on chain HTLC to address tb1q3d8l6wgqprl7tgtgwlqcxq8fts8vf5cwezww9s with fee 0.00000138 BTC (tx 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc)
2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Htlc spend by tx: 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc
2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Wait for server pulling off-chain payment(s)
2019-11-24 11:45:01.841 [INF] LNDC: Payment fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e completed
2019-11-24 11:45:01.841 [INF] LOOP: fb1b28 Swap completed: Success (final cost: server 0.000006 BTC, onchain 0.00000138 BTC, offchain 0.00000502 BTC)
2019-11-24 11:45:01.842 [INF] LOOP: fb1b28 state Success
</code></p>

<p>客户端迅速消费了链上交易，一个区块确认之后，整个交换过程完成：</p>

<p>```
success swap payment:</p>

<pre><code>    {
        "payment_hash": "fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e",
        "value": "499263",
        "creation_date": "1574564333",
        "path": [
            "03052ae5c77d75264a13ab0d34520bd8260de9542e7d930cbe6bc5137485f065f3",
            "03d5e17a3c213fe490e1b0c389f8cfcfcea08a29717d50a9f453735e0ab2a7c003",
            "03fe1c271da46da5cf632beb84551c4100064d830b89dc46f8975123803cc93ff3",
            "0223acffd7f363b4591ce860eda870fea352e981212d8a25e96a0ebea37faae288"
        ],
        "fee": "501",
        "payment_preimage": "b975dc85897b707865dcff54b96511568f86622c89020a2678171e083001717a",
        "value_sat": "499263",
        "value_msat": "499263000",
        "payment_request": "lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm",
        "status": "SUCCEEDED",
        "fee_sat": "501",
        "fee_msat": "501762"
    }
</code></pre>

<p>```</p>

<p>此时的通道状态:</p>

<p><code>
{
    "channels": [
        {
            "active": true,
            "remote_pubkey": "xxxxx",
            "channel_point": "zzzzzz:1",
            "chan_id": "111111111111",
            "capacity": "1000000",
            "local_balance": "498714",
            "remote_balance": "501102",
            "commit_fee": "184",
            "commit_weight": "724",
            "fee_per_kw": "253",
            "unsettled_balance": "0",
            "total_satoshis_sent": "501102",
            "total_satoshis_received": "0",
            "num_updates": "23",
            "pending_htlcs": [
            ],
            "csv_delay": 144,
            "private": false,
            "initiator": true,
            "chan_status_flags": "ChanStatusDefault",
            "local_chan_reserve_sat": "10000",
            "remote_chan_reserve_sat": "10000",
            "static_remote_key": false
        }
    ]
}
</code></p>

<p>我们loop循环出通道的一半资金返回到我们的链上钱包，同时在通道另一端注入了流动性；总体花费：</p>

<ol>
  <li>pre payment 费用</li>
  <li>on-chain HTLC 矿工费</li>
  <li>on-chain HTLC 花费交易(sweep tx)的矿工费</li>
</ol>

<p>最后，我们自立更生，为一个通道注入的Inbound流动性。</p>

<h2 id="section-7">小结</h2>

<p>与比特币刚出现时的情况一样，整个过程漫长而枯燥，批评者会说：哦，太麻烦了，太糟糕了；我不能想象会有人用这种东西！！</p>

<p>不要着急，LOOP技术为闪电网络通道的资金管理提供了无限的可能性；个人运行一个LOOP Server的成本非常低，并且可以想象，在闪电网络的极大繁荣期，并不是只有大公司才能以极大的资金量提供闪电通道的服务，小商家通过精细的运营和筹划，在安全保证本金的前提下，运营一个 LOOP节点来获得手续费用，其性价比会超过运营一个超大规模的闪电节点；就像换汇一样，如果开放自由市场，国家控制的大银行无疑在换汇服务中有极大的优势，但能提供更低廉、更方便的换汇服务的，往往是街头不起眼的小商小贩；</p>

<p>不要因为它现在只是一棵幼苗而轻视它，也许二十年后，它会成长为一棵参天大树。</p>

<h4 id="stay-hungry-stay-foolish">饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</h4>

<h4 id="section-8">引用</h4>

<p>https://blog.lightning.engineering/posts/2019/03/20/loop.html</p>

<p>https://blog.lightning.engineering/technical/posts/2019/04/15/loop-out-in-depth.html</p>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>

<p>https://blog.lightning.engineering/posts/2018/05/30/routing.html</p>
]]></content>
  </entry>
  
</feed>
