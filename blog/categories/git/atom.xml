<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2021-04-22T15:15:09+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Cheat 2]]></title>
    <link href="https://happy123.me/blog/2016/03/21/git-cheat-2/"/>
    <updated>2016-03-21T09:49:54+08:00</updated>
    <id>https://happy123.me/blog/2016/03/21/git-cheat-2</id>
    <content type="html"><![CDATA[<h1 id="git-v2">整理一下经常忘记的Git命令 (版本v2)</h1>

<p>http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu</p>

<h2 id="section">新建代码库</h2>

<pre><code># 在当前目录新建一个Git代码库
git init

# 新建一个目录，将其初始化为Git代码库
git init [project-name]

# 下载一个项目和它的整个代码历史
git clone [url]
</code></pre>

<h2 id="section-1">配置</h2>

<p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>

<pre><code># 显示当前的Git配置
git config --list

# 编辑Git配置文件
git config -e [--global]

# 设置提交代码时的用户信息
git config [--global] user.name "[name]"
git config [--global] user.email "[email address]"
</code></pre>

<h2 id="section-2">增加/删除文件</h2>

<pre><code># 添加指定文件到暂存区
git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
git add [dir]

# 添加当前目录的所有文件到暂存区
git add .

# 删除工作区文件，并且将这次删除放入暂存区
git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
git mv [file-original] [file-renamed]
</code></pre>

<h2 id="section-3">代码提交</h2>

<pre><code># 提交暂存区到仓库区
git commit -m [message]

# 提交暂存区的指定文件到仓库区
git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
git commit -a

# 提交时显示所有diff信息
git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
git commit --amend [file1] [file2] ...
</code></pre>

<h2 id="section-4">分支</h2>

<pre><code># 列出所有本地分支
git branch

# 克隆并在本地建立所有分支

for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do
    git branch --track ${branch##*/} $branch
done

# 列出所有远程分支
git branch -r

# 列出所有本地分支和远程分支
git branch -a

# 新建一个分支，但依然停留在当前分支
git branch [branch-name]

# 新建一个分支，并切换到该分支
git checkout -b [branch]

# 新建一个分支，指向指定commit
git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
git checkout [branch-name]

# 建立追踪关系，在现有分支与指定的远程分支之间
git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
git merge [branch]

# 选择一个commit，合并进当前分支
git cherry-pick [commit]

# 删除分支
git branch -d [branch-name]

# 删除远程分支
git push origin --delete [branch-name]

# 删除不存在对应远程分支的本地分支
# 假设这样一种情况：
#    1. 我创建了本地分支b1并push到远程分支 origin/b1；
#    2. 其他人在本地使用fetch或pull创建了本地的b1分支；
#    3. 我删除了 origin/b1 远程分支；
#    4. 其他人再次执行fetch或者pull并不会删除这个他们本地的 b1 分支，运行 git branch -a 也不能看出这个branch被删除了，如何处理？

# 在fetch之后删除掉没有与远程分支对应的本地分支
git fetch -p                                                        //

# 重命名远程分支
# 在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支
git push --delete origin devel
git branch -m devel develop
git push origin develop

# 合并branchB到branchA
# 前提是你需要的是fast-forward
# 合并本地的branchB到本地的branchA
git fetch . branchB:branchA

# 合并远端的branchB到本地的branchA
git fetch origin branchB:branchA


# 合并branch上的指定文件
# branches/A 上修改了一个文件A.h，新增了一个文件B.h，删除了一个文件C.h。
# 首先切换到master分支
git checkout master
# 不切换branch，把RemLanbranches/A上的A.h更新到当前分支
git checkout -p branches/A A.h
# 去掉-p参数，新增该B.h文件
git checkout branches/A B.h
# 删除文件目前还没找到其他办法，但效果是一样的
rm C.h
</code></pre>

<h2 id="section-5">标签</h2>

<pre><code># 列出所有tag
git tag

# 新建一个tag在当前commit
git tag [tag]

# 新建一个tag在指定commit
git tag [tag] [commit]

# 删除本地tag
git tag -d [tag]

# 删除远程tag
git push origin :refs/tags/[tagName]

# 查看tag信息
git show [tag]

# 提交指定tag
git push [remote] [tag]

# 提交所有tag
git push [remote] --tags

# 新建一个分支，指向某个tag
git checkout -b [branch] [tag]
</code></pre>

<h2 id="section-6">查看信息</h2>

<pre><code># 显示有变更的文件
git status

# 显示当前分支的版本历史
git log

# 显示commit历史，以及每次commit发生变更的文件
git log --stat

# 显示某个commit之后的所有变动，每个commit占据一行
git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
git log --follow [file]
git whatchanged [file]

# 显示指定文件相关的每一次diff
git log -p [file]

# 显示指定文件是什么人在什么时间修改过
git blame [file]

# 显示暂存区和工作区的差异
git diff

# 显示暂存区和上一个commit的差异
git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
git diff HEAD

# 显示两次提交之间的差异
git diff [first-branch]...[second-branch]

# 显示某次提交的元数据和内容变化
git show [commit]

# 显示某次提交发生变化的文件
git show --name-only [commit]

# 显示某次提交时，某个文件的内容
git show [commit]:[filename]

# 显示当前分支的最近几次提交
git reflog
</code></pre>

<h2 id="section-7">远程同步</h2>

<pre><code># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre>

<h2 id="section-8">撤销</h2>

<pre><code># 恢复暂存区的指定文件到工作区
git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
git revert [commit]
</code></pre>

<h2 id="remote-">remote 同步</h2>

<pre><code># 查看当前远程版本库
git remote -v

#添加原始版本库
git remote add cocos2d-x git://github.com/cocos2d/cocos2d-x.git

#获取原始版本库的更新
git fetch cocos2d-x

# 合并原始版本库的代码到当前版本库中，合并前确保当前分支是master
git merge cocos2d-x/master
</code></pre>

<h2 id="section-9">分支的衍合</h2>

<p>http://git-scm.com/docs/git-rebase</p>

<h2 id="diff">diff</h2>

<pre><code># 只显示两个分支间的差异，如果你想找出‘master’,‘test’的共有 父分支和'test'分支之间的差异，你用3个‘.'来取代前面的两个'.' 。
git diff master..test

# 显示你当前的索引和上次提交间的差异；这些内容在不带"-a"参数运行 "git commit"命令时就会被提交。
git diff --cached

# 显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行"git commit -a"命令时被提交。
git diff HEAD

# 如果你要查看当前的工作目录与另外一个分支的差别，你可以用下面的命令执行:
#这会显示你当前工作目录与另外一个叫'test'分支的差别。你也以加上路径限定符，来只 比较某一个文件或目录。
git diff test

# 显示你当前工作目录下的lib目录与上次提交之间的差别(或者更准确的 说是在当前分支)。
git diff HEAD -- ./lib

# 如果不是查看每个文件的详细差别，而是统计一下有哪些文件被改动，有多少行被改 动，就可以使用‘--stat' 参数。
git diff --stat

# 显示两次更改之间所有的文件名
git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRTD HEAD HEAD^

# diff两个分支
git diff master branch/1.1 --
</code></pre>

<h2 id="section-10">其他</h2>

<pre><code># 生成一个可供发布的压缩包
git archive

# 临时保存/恢复现在的状态
git stash
git stash pop

# svn log -v 类似效果
git log --name-status
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Cheat]]></title>
    <link href="https://happy123.me/blog/2015/01/17/git-cheat/"/>
    <updated>2015-01-17T11:45:03+08:00</updated>
    <id>https://happy123.me/blog/2015/01/17/git-cheat</id>
    <content type="html"><![CDATA[<p>整理一下经常忘记的Git命令</p>

<h1 id="remote-">remote 同步</h1>

<p>```
$ git remote -v                                                     // 查看当前远程版本库
$ git remote add cocos2d-x git://github.com/cocos2d/cocos2d-x.git   // 添加原始版本库
$ git fetch cocos2d-x                                               // 获取原始版本库的更新
$ git merge cocos2d-x/master                                        // 合并原始版本库的代码到当前版本库中，合并前确保当前分支是master</p>

<p>```</p>

<h1 id="remote-branch">remote branch</h1>

<p>```
$ git branch -a                                                     //查看所有分支
$ git checkout -b branches/xxx origin/branches/xxx                  //chekcout远程分支
$ git push origin –delete <branchname>                             //删除远程分支
$ git push origin --delete tag <tagname>                            //删除远程tag
$ git push origin :<branchname>                                     //推送一个空分支到远程分支，相当于删除分支
$ git push origin :refs/tags/<tagname>                              //推送一个空tag到远程，相当于删除tag</tagname></branchname></tagname></branchname></p>

<p>```</p>

<h2 id="section">删除不存在对应远程分支的本地分支</h2>

<p>假设这样一种情况：</p>

<ol>
  <li>我创建了本地分支b1并pull到远程分支 origin/b1；</li>
  <li>其他人在本地使用fetch或pull创建了本地的b1分支；</li>
  <li>我删除了 origin/b1 远程分支；</li>
  <li>其他人再次执行fetch或者pull并不会删除这个他们本地的 b1 分支，运行 git branch -a 也不能看出这个branch被删除了，如何处理？</li>
</ol>

<p>```
git fetch -p                                                        //在fetch之后删除掉没有与远程分支对应的本地分支</p>

<p>```</p>

<h2 id="section-1">重命名远程分支</h2>

<p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支</p>

<p>```
$ git push –delete origin devel                                    //删除远程分支
$ git branch -m devel develop                                       //重命名本地分支
$ git push origin develop                                           //推送本地分支</p>

<p>```</p>

<h2 id="tag">把本地tag推送到远程</h2>

<p>```
$ git push –tags</p>

<p>```</p>

<h2 id="tag-1">获取远程tag</h2>

<p>```
$ git fetch origin tag <tagname /></p>

<p>```</p>

<h2 id="branch">合并branch上的指定文件</h2>

<p>branches/A 上修改了一个文件A.h，新增了一个文件B.h，删除了一个文件C.h。</p>

<p>```
$ git checkout master                                               //首先切换到master分支</p>

<p>$ git checkout -p branches/A A.h                                    //不切换branch，把RemLanbranches/A上的A.h更新到当前分支</p>

<p>$ git checkout branches/A B.h                                       //去掉-p参数，新增该B.h文件</p>

<p>$ rm C.h                                                            //删除文件目前还没找到其他办法，但效果是一样的</p>

<p>```</p>

<h2 id="section-2">分支的衍合</h2>

<p>参考:http://git-scm.com/docs/git-rebase</p>

<h1 id="diff">diff</h1>

<p>只显示两个分支间的差异，如果你想找出‘master’,‘test’的共有 父分支和’test’分支之间的差异，你用3个‘.’来取代前面的两个’.’ 。</p>

<p>```
$ git diff master..test</p>

<p>```</p>

<p>显示你当前的索引和上次提交间的差异；这些内容在不带”-a”参数运行 “git commit”命令时就会被提交。</p>

<p>```
$ git diff –cached</p>

<p>```</p>

<p>显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行”git commit -a”命令时被提交。</p>

<p>```
$ git diff HEAD</p>

<p>```</p>

<p>如果你要查看当前的工作目录与另外一个分支的差别，你可以用下面的命令执行:
这会显示你当前工作目录与另外一个叫’test’分支的差别。你也以加上路径限定符，来只 比较某一个文件或目录。</p>

<p>```
$ git diff test</p>

<p>```</p>

<p>显示你当前工作目录下的lib目录与上次提交之间的差别(或者更准确的 说是在当前分支)。</p>

<p>```
$ git diff HEAD – ./lib</p>

<p>```</p>

<p>如果不是查看每个文件的详细差别，而是统计一下有哪些文件被改动，有多少行被改 动，就可以使用‘–stat’ 参数。</p>

<p>```
$ git diff –stat</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多个git账号之间的切换]]></title>
    <link href="https://happy123.me/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan/"/>
    <updated>2014-12-07T15:00:34+08:00</updated>
    <id>https://happy123.me/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan</id>
    <content type="html"><![CDATA[<p>做过很多遍了，却总是记不住，这回从头来描述一下。</p>

<h1 id="section">介绍</h1>

<p>所谓多个git账号，可能有两种情况:</p>

<ul>
  <li>
    <p>我有多个github的账号，不同的账号对应不同的repo，需要push的时候自动区分账号</p>
  </li>
  <li>
    <p>我有多个git的账号，有的是github的，有的是bitbucket的，有的是单位的gitlab的，不同账号对应不同的repo，需要push的时候自动区分账号</p>
  </li>
</ul>

<p>这两种情况的处理方法是一样的，分下面几步走:</p>

<h1 id="section-1">处理</h1>

<ul>
  <li>先假设我有两个账号，一个是github上的，一个是公司gitlab上面的。先为不同的账号生成不同的ssh-key</li>
</ul>

<p>```
        ssh-keygen -t rsa -f ~/.ssh/id_rsa_work -c xxx@gmail.com</p>

<p>```</p>

<pre><code>然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_work和id_rsa_work.pub两个文件，id_rsa_work.pub文件里存放的就是我们要使用的key
</code></pre>

<p>```
        ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -c xxx@gmail.com</p>

<p>```</p>

<pre><code>然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_github和id_rsa_github.pub两个文件，id_rsa_gthub.pub文件里存放的就是我们要使用的key
</code></pre>

<ul>
  <li>
    <p>把id_rsa_xxx.pub中的key添加到github或gitlab上，这一步在github或gitlab上都有帮助，不再赘述</p>
  </li>
  <li>
    <p>编辑 <code>~/.ssh/config</code>，设定不同的git 服务器对应不同的key</p>
  </li>
</ul>

<p>```
    # Default github user(first@mail.com),注意User项直接填git，不用填在github的用户名
    Host github.com
     HostName github.com
     User git
     IdentityFile ~/.ssh/id_rsa_github</p>

<pre><code># second user(second@mail.com)
# 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
Host 172.16.11.11
 HostName 172.16.11.11
 User work
 IdentityFile ~/.ssh/id_rsa_work
</code></pre>

<p>```</p>

<p>编辑完成后可以使用命令 <code>ssh -vT git@github.com</code> 看看是不是采用了正确的id_rsa_github.pub文件</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<ul>
  <li>从上面一步可以看到，ssh区分账号，其实靠的是HostName这个字段，因此如果在github上有多个账号，很容易的可以把不同的账号映射到不同的HostName上就可以了。比如我有A和B两个账号， 先按照步骤一生成不同的key文件，再修改<code>~/.ssh/config</code> 内容应该是这样的。</li>
</ul>

<p>```
    # Default github user(A@mail.com),注意User项直接填git，不用填在github的用户名
    Host A.github.com
     HostName github.com
     User git
     IdentityFile ~/.ssh/id_rsa_github_A</p>

<pre><code># second user(B@mail.com)
# 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
Host A.github.com
 HostName github.com
 User git
 IdentityFile ~/.ssh/id_rsa_github_B
</code></pre>

<p>```</p>

<p>同时你的github的repo ssh url就要做相应的修改了，比如根据上面的配置,原连接地址是:</p>

<pre><code>git@github.com:testA/gopkg.git
</code></pre>

<p>那么根据上面的配置，就要把<code>github.com</code>换成<code>A.github.com</code>, 那么ssh解析的时候就会自动把<code>testA.github.com</code> 转换为 <code>github.com</code>,修改后就是</p>

<pre><code>git@A.github.com:testA/gopkg.git
</code></pre>

<p>直接更改 <code>repo/.git/config</code> 里面的url即可</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<h1 id="section-2">一些题外话</h1>

<h2 id="repopush">我有一个repo，想要同时push到不同的仓库该如何设置?</h2>

<p>很简单， 直接更改 <code>repo/.git/config</code> 里面的url即可，把里面对应tag下的url增加一个就可以了。例:</p>

<p>```
[remote “GitHub”]
    url = git@github.com:elliottcable/Paws.o.git
    fetch = +refs/heads/<em>:refs/remotes/GitHub/</em>
[branch “Master”]
    remote = GitHub
    merge = refs/heads/Master
[remote “Codaset”]
    url = git@codaset.com:elliottcable/paws-o.git
    fetch = +refs/heads/<em>:refs/remotes/Codaset/</em>
[remote “Paws”]
    url = git@github.com:Paws/Paws.o.git
    fetch = +refs/heads/<em>:refs/remotes/Paws/</em>
[remote “Origin”]
    url = git@github.com:Paws/Paws.o.git
    url = git@codaset.com:elliottcable/paws-o.git</p>

<p>```</p>

<p>上面这个立即就是有4个远端仓库，不同的tag表示不同的远端仓库，最后的Origin标签写法表示默认push到github和codaset这两个远端仓库去。当然，你可以自己随意定制tag和url</p>

<h2 id="githubrepoclonepusherror-the-requested-url-returned-error-403-while-accessing-xxx">我有一个github的repo，clone没有问题，push的时候总是报错:error: The requested URL returned error: 403 while accessing xxx</h2>

<p>这个问题也困扰了我一段时间，后来发现修改 <code>repo/.git/config</code> 里面的url，把https地址替换为ssh就好了。</p>

<p>例如</p>

<pre><code>url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git
</code></pre>

<p>替换为</p>

<pre><code>url=ssh://git@github.com/derekerdmann/lunch_call.git
</code></pre>

<h1 id="section-3">参考</h1>

<p>http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed
http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations/3195446#3195446</p>
]]></content>
  </entry>
  
</feed>
