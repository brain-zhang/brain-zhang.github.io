<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Network | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/network/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2018-11-23T20:08:34+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[两个经典的排障故事]]></title>
    <link href="https://happy123.me/blog/2018/10/04/liang-ge-jing-dian-de-pai-zhang-gu-shi/"/>
    <updated>2018-10-04T21:48:57+08:00</updated>
    <id>https://happy123.me/blog/2018/10/04/liang-ge-jing-dian-de-pai-zhang-gu-shi</id>
    <content type="html"><![CDATA[<p>很久之前就在某杂志上看过，不久前在知乎<a href="https://www.zhihu.com/question/21747929">有哪些让你目瞪口呆的 bug</a>里面又见到了；我觉得这两个troubleshooting的case有很深的道理在里面，记一下。</p>

<h3>电子邮件无法发送到500英里以外</h3>

<!-- more -->


<p>这个故事最早出现于2002年11月24日，而且每过若干年，它就会在不同的系统管理技术社区中再次出现，并且引发人们的热议和关注。有人对这个故事给出了这样的评价：</p>

<blockquote><p>这个故事大约每过三年或四年就会在系统管理社区出现，每次我读到它，都觉得很值得一读。即便在正常环境下已经做过检查，甚或经过片刻思考之后，我还是高度怀疑这种事情是否会发生在自己身上。</p></blockquote>

<p>这是一个真实的故事。如果你想要进一步了解它的相关信息，可以访问这个 <a href="http://www.ibiblio.org/harris/500milemail-faq.html">FAQ</a> &ndash; 一个关于本故事的常见问题列表，由本故事作者 Trey Harris 编写。</p>

<p>这个故事听起来有点儿天方夜谭的感觉&hellip; 我已经有些后悔把这个故事分享给大家了，因为它很可能会沦为众人茶余饭后的谈资。:&ndash;) 为了保护自己的内疚感，我对故事做了稍许改动，省略了无关紧要以及无聊的细节，总之让故事变得更加生动有趣了。</p>

<p>几年以前，我在一家运营校园邮件系统的公司工作。有一天，我接到了来自统计部主任给我的电话。</p>

<p>“我们的邮件系统存在一个问题。”</p>

<p>“什么问题？” 我问道。</p>

<p>“我们不能发送超过500英里距离的邮件，” 主任解释说。</p>

<p>我被手中的拿铁咖啡呛着了。“再说一遍？”</p>

<p>“我们不能把邮件发送到超过500英里距离的地方，” 他重复道。“真的，哪怕再远一点点。只能到达520英里，不能再远了。”</p>

<p>“嗯&hellip;通常来说，邮件真的不是按照这种方式来发送的，” 我说道，并尽力让自己的声音平静下来。一个人与部门主任谈话时通常不会带有恐慌情绪，即使是一个相对无实权的部门如统计部。“是什么让你认为邮件不能发送超过500英里之外的？”</p>

<p>“并非我这么认为，” 主任不耐烦地回答道。“你瞧，几天之前我们就发现了这一现象&hellip;”</p>

<p>“你等了好几天了？” 我打断他的话，声音有些颤抖地问道，“这段时间你都不能发送邮件吗？”</p>

<p>“我们能发邮件，只要不超过&hellip;”</p>

<p>“500英里，是吧，” 我替他补充道，“我知道了。但是为什么你不早点给我电话呢？”</p>

<p>“好吧，问题是直到刚才，我们才收集到足够的证据确定这一现象的发生。” 也对，他是统计部主任。“总之，我让一名地理统计人员去调查了这件事情&hellip;”</p>

<p>“地理统计人员&hellip;”</p>

<p>“是的，她制作了一张地图，地图上显示我们能发送邮件的区域半径比500英里多那么一点点。即便如此，这个半径区域之内的有些地方也不能发送，或者偶发性地能发送，但是在半径区域之外从来没有发送成功过。”</p>

<p>“我明白了，” 我说道，“何时开始的？你说几天之前，那么这段时间内系统发生什么改变了吗？”</p>

<p>“是的，技术服务人员来过，给服务器打了补丁然后重启了系统。但是我给他去过电话，他说他没碰邮件系统。”</p>

<p>“好的，我先看看吧，然后再给你打过去，” 我说，几乎不相信我也会来虚与委蛇这一套。今天不是愚人节啊。我试着去回忆，是不是有人欠我一个恶作剧。</p>

<p>我登进他们部门的服务器，发了一封测试邮件。这是发送到北卡罗莱纳州的三角研究实验，测试邮件很顺利地到达我的邮箱。同前面一样，我又发送到里士满、亚特兰大、华盛顿，还有普林斯顿（400英里），都能顺利到达。</p>

<p>但是当我尝试发送邮件到孟菲斯（600英里）时，却失败了。发往波士顿，失败了。发往底特律，同样是失败。我拿出我的地址薄，开始试图缩小范围。纽约（420英里）可以发送，但是普罗维登斯（580英里）就失败了。</p>

<p>我开始困惑，是不是我失去了理智。我试着给我一位居住在北卡罗来纳州的朋友发送邮件，他的 ISP（网络服务提供商）在西雅图。谢天谢地，发送失败了。如果这个问题只和收件人的居住位置有关，而不是和他（她）的邮件服务器有关的话，我想我真该泪奔了。</p>

<p>问题得以确认，尽管令人难以置信，但问题确实存在而且可以重现。我查看了 sendmail.cf 文件，它看起来很正常，没有任何问题。事实上，它看起来很熟悉。</p>

<p>我将这个文件和我本机 home 目录下的 sendmail.cf 文件进行了比对。二者没有什么不同，这个文件就是我自己写的。我也确信没有启用 “FAIL_MAIL_OVER_500_MILES” 这一选项。带着满腹困惑，我远程登录到 SMTP 端口。服务器使用一个 SunOS sendmail 标识愉快地做出了响应。</p>

<p>等等&hellip; 一个 SunOS sendmail 标识？在那时，Sun 仍然随同操作系统捆绑发布 Sendmail 5 版本，尽管 Sendmail 8 已经相当成熟了。作为一名优秀的系统管理员，我已经把 Sendmail 8 作为一个标配了。同时，作为一名优秀系统管理员，我写了一个 sendmail.cf 配置文件，使用了 Sendmail 8 中优雅详细且自我描述的选项和变量名，而不是 Sendmail 5 中含义模糊的标点符号标记的代码。</p>

<p>一切都水落石出了，突然间，我被那杯现已冷的掉渣的拿铁咖啡再次被呛到了。当那名技服给服务器打补丁的时候，很显然他也升级了 SunOS 的版本，如此一来自然把 Sendmail 的版本“降级”了。升级程序将 sendmail.cf 配置文件单独保留了下来，即使它现在对应的是错误的版本。</p>

<p>碰巧的是 Sendmail 5（至少 Sun 发布的版本，或许做过一些调整）可以处理 Sendmail 8 的 sendmail.cf 配置文件，因为大多数的规则在那时并没有改变。但是对于那些在 Sendmail 8 中新增的长配置项，Sendmail 5 将之视为垃圾而忽略掉了。sendmail 的二进制安装包对大多数选项没有提供默认值，因此，如果在 sendmail.cf 中找不到合适的设置，它们就会被设为0。</p>

<p>这些被设为0的选项之一就是连接远程 SMTP 服务器的超时时间。一些试验已经证实，在一个具有典型负载的特定机器上，零超时意味着如果连接时间稍微超过3毫秒，服务器就会终止连接。</p>

<p>当时我们的校园网络有一个很奇怪的特点，它是百分之百交换型网络。发送出去的数据包，在遇到 POP 服务器和远端路由器之前，不会出现路由器延迟。因此，连接到临近网络上负载较轻的服务器所花的时间，很大程度上是由光速决定的，而不是偶发的路由器延迟。</p>

<p>这可真是让人有点儿眼花缭乱啊，我在 shell 里敲入如下代码：</p>

<p>```
$ units
1311 units, 63 prefixes</p>

<p>You have: 3 millilightseconds<br/>
You want: miles</p>

<pre><code>    * 558.84719
    / 0.0017893979
</code></pre>

<p>&ldquo;500 miles, or a little bit more.&rdquo;
```</p>

<p>原文:</p>

<p><a href="http://www.ibiblio.org/harris/500milemail.html">http://www.ibiblio.org/harris/500milemail.html</a></p>

<h3>地板阻碍打印</h3>

<p>那还是80年代初期，我爸爸在一家存储设备公司工作，这个公司现在已经不存在了，它生产磁带机和驱动这些磁带高速运转的气动系统 —— 这是那个时代的产物。</p>

<p>他们技术改造了磁带驱动器，使得你可以只有一个中心驱动器 —— “A”盘 —— 由它连接着数个“B”盘，在跟A盘连接的内存里驻留这一个小型的操作系统，负责代理所有B盘的数据的读写操作。</p>

<p>每次当你启动A驱动器，你需要在外围驱动器里插入一张软盘，操作系统会把A盘加载到内存里。这个操作系统简单的出奇 —— 它的处理能力全部从一个8字节的微型控制器产生。</p>

<p>这种设备的目标用户是拥有大量数据的企业 —— 银行，杂志等等 —— 他们需要打印大量的地址簿或银行帐目。</p>

<p>有个客户出现了一个问题。在打印的过程中，有个别的驱动器会停止工作，导致整个打印过程终止。为了重载驱动器，值班人员必须重启所有驱动 —— 如果这种事情发生在一个6小时的打印任务中，大量宝贵的计算机使用时间都会浪费，整个任务将不能按时间完成。</p>

<p>公司派出了技术人员。技术人员尽了他最大的努力也不能在测试环境复制出这个问题：这个问题似乎只会出现在打印大量任务的过程中。尽管问题出在硬件上可能性微乎其微，他还是更换了所有的设备 —— 内存，微处理器，磁盘驱动，所有跟磁带机相关的部件 —— 但问题仍然出现。</p>

<p>于是技术人员打电话给总部叫来了一位专家。</p>

<p>专家要了一把椅子和一杯咖啡，坐在了计算机房 —— 那个时候他们已经专门为计算机提供了机房 —— 值班人员准备了一大堆的打印任务，他就在旁边看着。他等着，一直到机器崩溃。机器果真崩溃了，所有人都看着专家 —— 专家没有发现任何的线索。他命令把打印任务重新执行一次，所有的值班人员和技术人员都回各自岗位工作。</p>

<p>专家又在椅子上做下来，等着机器崩溃。这一等就是六小时，但真的又发生了。专家仍然没有弄清是什么导致了崩溃 —— 除了有一点他注意到，崩溃总是发生在屋内人比较多的时候。他命令再打印一次，重新坐下，等着。</p>

<p>当第三次崩溃时，他发现了一件事情。崩溃总是在值班人员更换其他没有关联的启动盘时发生的。进一步研究，他意识到当一个值班人员走过某块地板时崩溃就会发生。</p>

<p>地板是由铝制的板块拼成，下面有6 到 8 英寸高的隔空层，计算机所使用的大量的电缆都走地板下，这样可以避免值班人员无意间踢到它们。地板块间拼合的很紧密，这是为了保证垃圾不掉进电缆通过的空间。</p>

<p>专家说有一块地板变形了。当值班人员踩着这块变形的地板的一角时，地板块的边缘相互摩擦，这就会跟连接各地板的塑料之间产生静电，进而造成电磁干扰。</p>

<p>如今所有的RAM都有防电磁干扰功能。但当时并没有这种技术。专家指出，电磁干扰破坏的RAM的工作，操作系统也就崩溃了。</p>

<p>专家打电话给维护部门，拿来了一块新地板，他自己把它装上，问题就这样解决了。</p>

<p>原文:</p>

<p><a href="http://patrickthomson.tumblr.com/post/2499755681/the-best-debugging-story-ive-ever-heard">http://patrickthomson.tumblr.com/post/2499755681/the-best-debugging-story-ive-ever-heard</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用wireshark分析网络]]></title>
    <link href="https://happy123.me/blog/2018/10/02/yong-wiresharkfen-xi-wang-luo/"/>
    <updated>2018-10-02T21:36:37+08:00</updated>
    <id>https://happy123.me/blog/2018/10/02/yong-wiresharkfen-xi-wang-luo</id>
    <content type="html"><![CDATA[<p>这两天看了两本有意思的书，<a href="https://book.douban.com/subject/26268767/">《Wireshark网络分析就这么简单》</a>、<a href="https://book.douban.com/subject/26710788/">《wireshark网络分析的艺术》</a>。</p>

<p>之前工作中就常常用到这个软件，好多时候总是感叹<code>这个软件实在太NB了</code>，这本书作者也是个实战派，采用种种案例展示了如何用Wireshark探索网络现象，实在是很迷人。</p>

<p>开篇有一个很有意思的小问题，我思考了一下，觉得很容易作为网络理解的小case用在课堂ABC上，记录一下。</p>

<!-- more -->


<h3>问题：两台服务器A和B的网络配置如下</h3>

<ul>
<li><p>服务器A:</p>

<ul>
<li>IP:192.168.26.129</li>
<li>Mask: 255.255.255.0</li>
<li>Gateway: 192.160.26.2</li>
</ul>
</li>
<li><p>服务器B:</p>

<ul>
<li>IP:192.168.26.3</li>
<li>Mask: 255.255.255.224</li>
<li>Gateway: 192.160.26.2</li>
</ul>
</li>
</ul>


<p>B的子网掩码本应该是255.255.255.0，被不小心配成了255.255.255.224。它们还能正常通信吗？</p>

<p>哈哈，我就喜欢这样简单明快的问题。看似简单，其实想想还是有点陷阱的。而且这种问题有个共同点，就是如果你不懂原理，也没关系；喜欢瞎动手的童鞋一般都会去试试这种情况，所以能把答案<code>碰出来</code>。我就见到过这种·自学成才·的老师，他们从来没有在学校里系统学过什么TCP/IP或者老破旧的ISO 7层模型，照样能对网络和路由配置如数家珍，他们的能力完全建立在实战的基础上。</p>

<p>让我们好好分析一下这个问题。</p>

<p>首先B的子网掩码配置决定了它和A不在一个子网上，我们在书本上学到的知识，如果两台机器不在一个子网上，能够通信吗？</p>

<p>哈，如果死读书不实践的人肯定会说:不能通信，不在一个子网嘛。</p>

<p>那么我们照这个逻辑，公司里岂不是不同子网的机器老死不相往来了？</p>

<h4>看吧，这是第一个陷阱，两台机器跨子网能否通信，取决于网关。</h4>

<p>如果没有网关服务器，或者网关服务器限制的话，肯定是不能通信的，虽然A和B物理上处于同一个子网，但是这个时候可以看成有一道防火墙在两台机器之间。</p>

<h4>其实大部分网络管理员都会把网关设置为不同子网间相互转发的，不然一个公司各部门间的机器不能互访，岂不是很悲剧。</h4>

<p>那么在网关能正常转发的情况下，我们来脑补一下两个场景，B访问A，A访问B的具体过程。</p>

<h4>B Ping => A</h4>

<ol>
<li>B首先检查到A和它不在一个子网，这个时候它需要网关来转发数据包</li>
<li>B发一个网关IP的ARP请求</li>
<li>网关(192.168.26.2) 回复B的ARP请求，告诉它俺的MAC 地址是XXX</li>
<li>有了网关的MAC，B就可以直接发包给网关了，它告诉网关，我要你帮我转发包给A</li>
<li>如果网关没有限制的话，它就会把包转发给A</li>
<li>A收到B的请求，他就会问，这个B是谁呀？A检查一番，发现B和自己在一个子网</li>
<li>既然一个子网，那么A就不会走网关了，它直接发出ARP请求在以太网上广播，谁是B呀，MAC地址回我一个</li>
<li>B在物理上实际上是和A在一起的，所以直接响应A，俺的MAC地址是这个</li>
<li>A收到B的ARP响应，就很HAPPY的跳过网关，直接给B响应包啦</li>
<li>这样的结果就是B发给A的包需要走网关，A发给B的包直接广播到以太网上，由B直接接收</li>
<li>最终的效果就是B能和A正常通信，虽然B的通信绕了一点远路</li>
</ol>


<h4>A Ping => B</h4>

<p>这个过程其实跟上面一样，A发出ARP请求直接找到了B，所以A发包给B是不用走网关的，B的响应还要走网关。</p>

<p>怎么样，这么看看，是不是问题就很明晰了呢。大部分情况下(网关没有特殊配置)，A和B是能够正常通信的。</p>

<p>有点小得意的说，这个问题我很快就反应过来了；因为我和作者一样是野路子出家，实战瞎鼓捣过，所以这类小Case恰好是尝过的菜。</p>

<p>咳咳，真是有点自吹自擂了；其实绝大多数网络问题最后找到原因都很简单，但是当一个大型的网络里面发生诡异的情况时，能迅速定位问题点是很不容易的。我又回想起来之前工作时，在一个客户现场遇到的坑。</p>

<h4>很久很久以前~~~</h4>

<p>咳咳，其实也不是多久，但那个时候我已经工作挺长时间了，虽然没有经过什么系统理论培训，但是靠着大量野路子实践，我觉得也算是见过很多网络万年坑了，我去客户现场从来不怵头，但就是那一次，差点阴沟里翻船~~</p>

<p>我去国内的某家大型券商部署项目，那家券商真是壕啊，从服务器到网络设备都是定制的特别高端的一批货，然后我熟门熟路的安装好Centos7.1，他们的系统管理员按照内部规定，做了安全防护之后，我们从他们的顶层小机房转移到操作办公室，准备部署应用软件。</p>

<p>这家券商的网络大部分已经迁移到SDN上面，办公室的终端机器经过两层跳板，跳到一个云主机的shell上面，然后再远程ssh连接到我们刚刚装好的服务器上，准备大展拳脚~~~~</p>

<p>根据故事的发展，这个时候就出现了诡异的事情，随机过20~40分钟后，我们的ssh连接就会卡一段时间，然后有几率断掉，之前所有工作都是正常的，而且有时候能正常个1小时，但是最后总是会开始卡。</p>

<p>唉，网络卡死，网络时不时断掉，真的是现场网络工程师人生中的一大悲剧，这类问题感觉天天遇见，但是总是没有一个固定的套路去解决它。</p>

<p>我们的终端机经过了两重跳板，然后ssh客户端和服务器之间，还有一个庞大的网络拓扑，跋山涉水十万八千里才能相见，然后就被某个不知名的幽灵生生拆散了，想象他们艰难的会师路径，我不禁打个冷颤。</p>

<h4>肯定不能先去怀疑他们的会师历程，我们先去查找最简单的，也是最容易出错的部分，就是服务端的sshd配置</h4>

<p>因为安装完系统后，客户的管理员根据他们的安全管理条例，运行了自己开发一个脚本进行了系统加固，很自然的，我们怀疑这个脚本是不是有什么地方配置不对，导致问题</p>

<p>在对服务器配置文件和脚本代码详细检查之后，我失望的判定，人家的脚本没问题</p>

<h4>配置没有问题，那就看看是不是ssh终端软件有问题呢</h4>

<p>我反复使用ssh登陆不同的服务器，惊奇的发现，凡是登陆我们刚安装好的这批服务器，就会时不时断掉，其它服务器就没有问题；
但是悲剧的是我们的服务器所在的机房，没有其它测试机，所以只能证明ssh终端软件没问题</p>

<h4>不到万不得已，我是不想怀疑中间庞大的网络路径的，谁知道是不是什么抽风的防火墙规则呢</h4>

<h4>我抱着笔记本，跑到楼上服务器的小机房直联看看，发现直联好得很</h4>

<p>现在说起来简单，其实跑一趟机房需要审批、内部人员带路一堆手续，累的客户跟我上上下下，验证一次需要1个小时以上，而且重现时间是随机的，这就是一线人员苦逼的地方啊。</p>

<h4>看起来一切都导向那个我最不愿意看到的结果，好像是通信中间有个什么诡异的防火墙规则之类的~~，但是这么庞大的网络拓扑，怎么定位问题呢？</h4>

<h4>到了此时，客户不再纠结于安全管理条例，我们小心翼翼的祭出了·抓包·这个手段</h4>

<ul>
<li><p>不到万不得已，其实大家都不想抓包的；金融行业的客户群，重视安全问题甚于生命，所以能在生产环境中让你抓包，其实已经是皇恩浩荡了。</p></li>
<li><p>经过了几十分钟苦苦等待，终于问题又重现了，我们小心翼翼的把抓到的包存到本地，用wireshark打开，像欣赏小电影一样仔仔细细~~~</p></li>
<li><p>果然有问题，那台服务器的ARP响应包里面，MAC地址竟然会变！</p></li>
<li><p>奇哉怪哉，我们刚配好这台服务器，怎么就让人ARP欺骗了呢？而且如果是他们的网络里面有ARP病毒，为啥就只找我们的服务器呢？</p></li>
</ul>


<h4>当时已经从早上折腾到下午3点种左右，虽然有了重大发现，但是也有了更大的迷惑</h4>

<p>突然我灵光一闪，服务器接了两根网线，一根是管理口为了方便管理，这个一直没有动过，会不会是~~~</p>

<p>我立马报着笔记本和一台小交换机跑上楼去</p>

<h4>将服务器和笔记本通过一台小交换机联到一个小局域网络中，再抓包发现了真相</h4>

<p>这台定制的服务器是浪潮提供的，而浪潮的管理口有个奇怪的设定，它和服务器上的多个网卡被绑定成一个NIC Teaming，类型为Transmit Load Balancing（TLB）。TLB的特点就是收包工作只由一个网卡负责，发包工作则分摊给所有网卡，但是管理口的默认配置有问题，有时候莫名其妙会共享同一个IP，回应ARP请求的时候把自己的MAC地址发回去，但是系统中管理口是没有配置的，所以这台服务器莫名其妙就自己变成了一台ARP欺骗源。</p>

<p>问题定位了，我们打电话找浪潮的供应商；供应商也非常奇怪，表明是第一次碰到这种问题，可能是由于定制的机器，考虑不周导致的。</p>

<p>然后我们的解决方法就是，将笔记本直联服务器，在笔记本上运行一个DHCP 服务，这样管理口在开机的时候会被分配一个IP地址，我们再通过这个IP地址登陆服务器管理界面，配置一个静态IP，就OK了。</p>

<p>虽然最后是一个简单至极的ARP欺骗问题，但是发生在一个庞大的网络拓扑中，调试手段被限制，发生时间随机，楼上物理距离和安全条例导致你重现一次成本极为高昂，你还能·镇定自若，指挥谈笑间·吗，这是一次一波三折的排障经历啊。</p>

<p>我这么详细的回忆一次折腾的排障经历，是因为我在这本书里发现了作者和我一模一样的苦逼例子，在&lt;wireshark网络分析的艺术>这本书里，大家有兴趣可以自己去翻翻。</p>

<p>其实这两本书真可谓是作者的网络排障手记，因为我也有那么一段跑在一线的日子，读起来格外亲切。这就是一线工程师的日常啊。</p>

<p>曾经，我以为熟读&lt;TCP/IP详解>和&lt;Unix网络编程>就能成为无所不能的网络大拿；曾经，我以为独立实现一个网络协议栈就是开创天地的神邸；后来，我明白了，网络的海洋无穷无尽，虽然规则是死的，但是现实世界实在不可预测，也许下一分钟就会有一个匪夷所思的case来纠缠你，嘲笑你的妄自尊大。</p>

<p>在网络世界迈入SDN之际，我非常惶恐，因为我明白以我的智商，不可能成为什么·专家·了；我想，未来，可能只有在AWS或者Google Cloud浸淫数十年的人，才能小心翼翼的称自己为·真专家·；面对网络知识的变幻莫测，总有一种·生有涯，知无涯·的惶恐；我总是会感叹，网络这个东西实在是太神奇了，真不知道如何形容这份感觉，就是只有·神奇·来形容</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云计算的诞生]]></title>
    <link href="https://happy123.me/blog/2018/09/10/yun-ji-suan-de-dan-sheng/"/>
    <updated>2018-09-10T13:39:29+08:00</updated>
    <id>https://happy123.me/blog/2018/09/10/yun-ji-suan-de-dan-sheng</id>
    <content type="html"><![CDATA[<p>有一个很经典的问题: java和javascript是什么关系？</p>

<p>然后小伙伴们是这样回答的:</p>

<!-- more -->


<ul>
<li><p>人民政府和为人民服务的关系</p></li>
<li><p>对象和对象的关系&hellip;</p></li>
<li><p>老婆和老婆饼的关系</p></li>
<li><p>苹果和苹果手机的关系</p></li>
<li><p>卡巴斯基和巴基斯坦的关系</p></li>
<li><p>印度和印度尼西亚的关系</p></li>
<li><p>黑客和博客的关系</p></li>
<li><p>北大和北大青鸟的关系</p></li>
<li><p>dog和hotdog的关系</p></li>
<li><p>人民和人民大会堂的关系</p></li>
<li><p>天真和天真热的关系</p></li>
<li><p>梁山和梁山伯的关系</p></li>
</ul>


<p>&hellip;&hellip;</p>

<p>怎么样，同志你是不是对他们的关系有了更深入的了解呢？</p>

<p>我只能说，在计算机工程领域，话语权没有掌握在傻写代码的码农手里，他们顶多就是个苦力外包民工；真正主导一门技术发展的，是天才的营销人员，尤其是：擅长起华丽的名字的那波人。</p>

<p>来来来，这只是一个引子，让我们来唠唠一个非常非常火爆的科技名词，只要这个词从你嘴里说出来，立马就能将你加成为<code>拳打比尔盖茨，脚踢苹果谷歌</code>的霸道总裁，引起台下众人的谜之膜拜。&mdash; 云计算(Cloud Computing)</p>

<p>不过，这个词是怎么来的呢？</p>

<h4>懵懂岁月</h4>

<p>云计算和Cloud Computing这个词原本在中文和英文中，都是不存在的。Cloud Computing作为一个单词，在2006年之前在英文中并不存在。2006年前后，CloudComputing这个单词开始偶尔出现。2007年末，Cloud Computing出现的频率迅速增加。2008年初，Cloud Computing在中文中开始被翻译为“云计算”。</p>

<p>有人将云计算的基本思想-共享资源，往前推到1955年。单词“人工智能”的发明者、计算机科学家John McCarthy提出了“time-sharing”理论，即不同的用户复用、分享一台计算机。那是大型主机的年代，不同用户可以通过终端使用同一台主机。到了七十年代，有了被称之为虚拟机（Virtual Machine）的东西，IBM做的。即每个VM在逻辑上拥有独立的内存、处理器，但共用同一台服务器硬件。</p>

<p>而云计算的基本思-公共信息基础设施，可以追溯到上世纪六十年代。当时，在较广泛的范围讨论过computing utility。</p>

<p>John McCarthy，还是上面这个科学家，说计算机应该形成一个公用基础设施-computer utility，就像电话网络那样。原话是这样：</p>

<blockquote><p>&ldquo;If computers of the kind I have advocatedbecome the computers of the future, then computing may someday be organized asa public utility just as the telephone system is a public utility&hellip; Thecomputer utility could become the basis of a new and important industry.&rdquo;</p></blockquote>

<p>1965年4月30日，美国电报公司Western Union发布了一篇战略计划文档，提出建立计算基础设施“computing utility“：一个全国性的信息基础设施，让订阅者便宜、高效、迅速地获取所需的信息流，以便创建商业业务和其他东西。</p>

<h4>初试啼声</h4>

<p>1995年，SUN公司提出了“Network Computer”，将当时的PC简化，以降低硬件成本，客户端的计算机具备很少的固化软件，其他的系统软件和应用软件从网络下载。Network Computer的软件不是机器代码，而是一种通用的中间代码(如Java bytecode)。</p>

<p>Technology Review的Fechar janela认为是George Favaloro和Sean O’Sullivan最早使用cloud computing这个单词。</p>

<p>1996年，那还是Netscape的年代，在康柏（Compaq Computer）的办公室里，一群技术管理者在讨论互联网业务的未来时，称之为“cloud computing”。这群人的战略颇有先见之明。他们认为，不仅所有的商业软件都会转移到网络上，而且“cloud computing”驱动的应用，比如用户文件存储在网上，也会普及。对于当时在房间里的康柏市场主管George Favaloro，和年轻的技术专家Sean O’Sullivan来说，云计算的主意将意味着与以前不同的收入。对康柏来说，这是一个每年20亿美元的生意，卖服务器给互联网服务商。</p>

<p>在1997年5月，美国公司NetCentric试图将“Cloud Computinig”申请为商标，但在1999年4月放弃了，专利号75291765。NetCentric当时准备用这个商标来进行教育服务，比如课程和研讨会。NetCentric当时正在与康柏进行一个商业计划，计划中大量使用cloud computing这个单词，并且对其的描述与后来有很多相似之处。</p>

<p>O’Sullivan的创业公司正在与康柏谈判一笔500万美元的投资，而Favaloro刚被康柏委任负责互联网服务商业务。在他们的计划书里面，有这样的业务构想：用户用18.5美元购买37分钟的视频会议，用4.95美元购买253MB网络存储，3.95美元看一场泰森的拳赛。</p>

<p>NetCentric准备做一套软件，能让ISP（互联网服务商）们实现和对数百甚至数千个这样的服务进行收费。他们称之为“‘cloud computing’-enabled applications”。当然，康柏将在方案里卖硬件。Favaloro 和 O’Sullivan谁最先说出cloud computing已经不可考了，因为两个当事人回忆不起来这个单词被说出来的准确时间。</p>

<p>他们两都同意cloud computing被创造出来，是作为一个市场营销词汇。那时，电信网络已经被用cloud来；在工程图里，一朵云就代表网络。他们需要找一个广告语，将快速发展的互联网机会与康柏的业务联系起来。Favaloro说“计算是康柏的基石，而那朵朵云正快速发展，我们需要把两者联系起来”。</p>

<p>他们的业务并不好，NetCentric也在失望中放弃了这个业务，转而推广互联网传真服务，但是最后关门了。O’Sullivan说“我们窥见了一个机会，但我们最终没有推出大量的云计算应用，这些让我难以忘怀”。</p>

<h4>浮华人世</h4>

<p>2001年，纽约时报的JohnMarkoff，写了一篇Dave Winer对微软新的.net服务平台Hailstorm的负面评价时，使用了“cloud’ of computers”一词。Hailstorm当年，被设计为整合各种设备、数据和服务，为用户提供简洁、实用的计算方案，但受制于当时的技术和应用环境，Hailstorm并没有取得成功。可以看成是Windows Azure的祖先了。</p>

<p>2006年8月9日的战略大会上，谷歌CEO施密特在与Danny Sullivan对话时，谈到广告和互联网时有一段原话：</p>

<blockquote><p>What&rsquo;s interesting [now] is that there is anemergent new model, and you all are here because you are part of that newmodel. I don&rsquo;t think people have really understood how big this opportunityreally is. It starts with the premise that the data services and architectureshould be on servers. We call it cloudcomputing – they should be in a &ldquo;cloud&rdquo; somewhere. And that ifyou have the right kind of browser or the right kind of access, it doesn'tmatter whether you have a PC or a Mac or a mobile phone or a BlackBerry or whathave you – or new devices still to be developed – you can get access to thecloud. There are a number of companies that have benefited from that.Obviously, Google, Yahoo!, eBay, Amazon come to mind. The computation and thedata and so forth are in the servers.</p></blockquote>

<p>施密特大概是第一个说出cloud computing的公众人物，并被大众媒体报道。但是，很可惜，它用这个词是为了解释互联网，用cloud computing来指代服务器-浏览器架构中的服务器。这是一种当时已经存在的技术和架构。特别的，施密说这个词时，特并不是在指一种新的技术、产品、服务、商业模式。</p>

<p>但真正让云计算落地的商业产品——亚马逊AWS EC2，即ElasticComputing Cloud，在施密特参加搜索引擎战略会议会议两周后，2006年8月24日上线，沿用了以前将Cloud指代服务器集群的含义和说法，在其新闻稿里也没有提到Cloud Computing，而是这样描述EC2和S3：Amazon Elastic Compute Cloud (Amazon EC2) is a web service thatprovides resizable compute capacity in the cloud. Just as Amazon Simple StorageService (Amazon S3) enables storage in the cloud, Amazon EC2 enables “compute”in the cloud.</p>

<p>彼时，亚马逊等还不认为Cloud Computing是一个单词，仍然用Cloud指代服务器集群。亚马逊虽然已经在2006年3月13日推出了简单存储服务S3，并在8月24日推出了被后来看作是云计算产品真正到了的EC2，但亚马逊和当时的业界并不认为Cloud Computing是一个单词。</p>

<p>到此时，亚马逊还没有使用Cloud Computinig这个单词。而且亚马逊用来命名和描述其EC2产品的用词Computing Cloud 或者“compute” in the cloud与当时在一定范围内存在的说法并没有不同。Computing Cloud也好，“compute”in the cloud也好，与施密特的Cloud Computing在技术上并没有本质不同。</p>

<p>EC2最大的不同是，它是第一个让“compute” in the cloud商业化的产品，是第一个把让公司外的用户能够“compute” in the 亚马逊的cloud。施密特的Cloud Computing停留在技术架构层面，而且指的是一个公司内部从浏览器到数据中心的“compute” in the cloud。</p>

<p>谷歌在营销上开启了cloud computing的序幕，亚马逊AWS EC2 在产品和商业模式上开启了cloud computing的序幕。</p>

<h4>一锤定音</h4>

<p>云计算的概念在2008年2009年经过无数先驱的创造、争论、整理，才形成了如今比较统一的概念和认识。</p>

<p>2011年9月，NIST（美国国家标准与技术研究所）发布了最终版的《 The NIST Definition of Cloud Computing》,标志着云计算定义的争论已经平息。这是一个兼容并包的、标准的云计算定义，总结了市面上所有云计算服务的通用特征。</p>

<h4>事后诸葛</h4>

<p>自从云计算诞生起，就不乏反对声音。比如Oracle的埃里森斥责云计算是胡言乱语，当然后来变成云的粉丝。百度CEO李彦宏称云计算为新瓶装旧酒，同时发明了框计算，当然，2015年亚马逊发布财报后，又决定搞一下云计算。</p>

<p>更多人，只是把云计算当成广告语，能贴到产品上去就好。云计算都没有拒绝，知道云计算被泛华为基于互联网的任何企业或个人服务。</p>

<p>这似乎回到了起点：云计算就是互联网，或互联网服务的服务器部分。</p>

<p>有人事后诸葛亮了：转了一圈，这云计算不还是互联网嘛，我当时就这么说的。</p>

<p>云计算在大部分时候，确实只是一个营销术语。但不幸的是，它不仅仅是一个广告词，它背后的本质、创新、技术、战略代表了一个新时代的开始。</p>

<h4>一声叹息</h4>

<p>有人创造了一个新单词新概念，却一无所获，有人无心插柳被人贴上标签，却赚的盆满钵满，怎么就这么不平等呢？</p>

<p>在笔者上学的时候，系里面有个教授数据库知识的专业老师。这位老师的特点非常明显，上课打开PPT文档，从设计原理到历史段子，滔滔不绝，绝对引人入胜。</p>

<p>在一个学期的最后一堂课上，我记得这位老师为了来一把实践，打开Win2000 SQL server，想要敲一个join的嵌套查询语句秀一下，悲剧的是电脑就是不给面子，折腾了半个小时总是报语法错，最后他只能尴尬的回到PPT讲学模式继续。</p>

<p>从此，我对哪些满口浮华词汇的人抱有深深的怀疑。</p>

<h3>广告和产品谁更重要</h3>

<p>在商业的世界里，真相并不重要，重要的是利益在哪里。</p>

<p>现在想来，这位老师早已深得<code>无招胜有招</code>的真谛。当你能通过PPT创造世界的时候，何苦亲自动手呢？有一批傻傻的码农们帮你干活呢！掌握利益才是关键！</p>

<p>这个词给我们启示就是，在某个情形下，创造出一个名词的力量，远远大于产品本身。营销也是产品的一部分&mdash;很多时候是最重要的那一部分。</p>

<h4>传说在蛮荒的魔法时代，创造一样新事物的办法就是为它想一个好名字，掌握这项技艺的人被尊称为巫术大师。</h4>

<p>少年，我想说，下次听到这样的宣传，先不要急着笑，要看看它的利益在哪里，那位大师的目的何在？</p>

<blockquote><p>朋友们，我们有一个划时代的产品，它的底层采用了人工智能技术，整合了整个股票市场100年来的大数据，并存储在区块链上，现在，我们有好几组顶尖专家看好的量化策略，正用强大的量子计算机做回归测试。更妙的是，整套系统采用光伏能源，并由石墨烯材料打造一个稳定的能量转换站，可以无限运行下去；现在，我们就等你们来投资数钱了，还等什么，马上拿起电话，拨打xxxxxx ~~~</p></blockquote>

<h4>引用:</h4>

<p><a href="http://www.infoq.com/cn/articles/romance-of-cloud-computing--part01">http://www.infoq.com/cn/articles/romance-of-cloud-computing--part01</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么不用MAC地址来定位机器]]></title>
    <link href="https://happy123.me/blog/2018/09/09/wei-shi-yao-bu-yong-macdi-zhi-lai-ding-wei-ji-qi/"/>
    <updated>2018-09-09T15:09:42+08:00</updated>
    <id>https://happy123.me/blog/2018/09/09/wei-shi-yao-bu-yong-macdi-zhi-lai-ding-wei-ji-qi</id>
    <content type="html"><![CDATA[<p>在知乎看到了这个问题，MAC地址48Bit, IP地址32Bit，完全可以用MAC划分出一个段来作为IP的映射，或者干脆不用IP了，有啥不可以呢？</p>

<p>我觉得问题挺有意思的。我推测了一下。</p>

<p>这纯粹是一个历史演变：</p>

<p>10Base 以太网[Ethernet Version 2（EV2）] 是由施乐公司出去的人发明的，后来以太网被市场承认了就纳入IEEE802标准，这是20世纪80年代的事情，那个时候就已经定义MAC地址了。</p>

<p>TCP/IP虽然最初是在1983年提出的，但是发展还是在1990年之后；另外TCP/IP也不是一个协议，而是一组协议簇，像ARP之类的和MAC地址相关的协议，很明显的，是在已有的硬件基础上开发的。</p>

<p>所以结论很明显，在早期只有局域网的时代，诞生了MAC地址这种硬件地址规定；后来联网机器越来越多，TCP/IP 成为主流联网协议，但是它的年龄和MAC地址是差不多的，也不可能再重新搞，为了适配现有的局域网模式，开发了ARP等协议；</p>

<p>计算机很多问题都是工程问题、商业问题，并不是技术完美就通吃天下，很多东西都是历史积淀、为了兼容现有系统而发展出来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP Illustrated Note1]]></title>
    <link href="https://happy123.me/blog/2016/06/05/tcp-slash-ip-illustrated-note1/"/>
    <updated>2016-06-05T21:59:52+08:00</updated>
    <id>https://happy123.me/blog/2016/06/05/tcp-slash-ip-illustrated-note1</id>
    <content type="html"><![CDATA[<p>又开始重读&lt;TCP/IP详解>。发现真的是年纪大了&hellip;.T_T，看了就忘，做笔记也用处不大。</p>

<p>打算每天读完一部分，在这里捡一些重要的地方记一下。</p>

<h2>ARP</h2>

<p>习得技能:</p>

<ul>
<li><code>tcpdump -e</code> 可以显示硬件层地址</li>
</ul>


<h2>IP</h2>

<p>重要提示:</p>

<ul>
<li>传输之前需要把首部转换成网络字节序。注意，仅仅是首部就可以。</li>
</ul>


<h2>ICMP</h2>

<p>重要提示:</p>

<ul>
<li><p>在对ICMP差错报文响应时，永远不会生成另一份ICMP差错报文</p></li>
<li><p>当发放一份ICMP差错报文时，始终包含IP首部和产生ICMP差错报文的IP数据包的前8个字节。这样就可以精准知道谁产生的ICMP差错</p></li>
<li><p>ICMP的典型应用:</p>

<ul>
<li><p>掩码请求和应答 (大多数主机在收到请求后都会产生应答，而不是指定的主机应答，这其实是实现上的冗余)</p></li>
<li><p>时间戳请求和应答</p></li>
</ul>
</li>
<li><p>多宿主机发送报文给自己的某个接口，其实都是给回环地址的，这样产生的ICMP应答其实搞不明白原始报文发给哪个接口</p></li>
</ul>


<h2>Ping</h2>

<p>习得技能:</p>

<ul>
<li><p><code>Ping -S</code> 每秒一个往返请求</p></li>
<li><p><code>Ping -R</code> 记录路由，但是有限制，最大只能存放9个IP地址，而且只记录路由出口</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
