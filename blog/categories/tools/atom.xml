<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Living a Simple Life is a Happy Life]]></title>
  <link href="https://brain-zhang.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="https://brain-zhang.github.io/"/>
  <updated>2023-08-02T15:44:57+08:00</updated>
  <id>https://brain-zhang.github.io/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ios Dev and Xcode Cheat]]></title>
    <link href="https://brain-zhang.github.io/blog/2023/08/02/ios-dev-and-xcode-cheatsheet/"/>
    <updated>2023-08-02T15:30:42+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2023/08/02/ios-dev-and-xcode-cheatsheet</id>
    <content type="html"><![CDATA[<p>自学Swfit开发了一个App，记录一下坑:</p>

<ul>
  <li>
    <p>Swift和ObjectC混编的时候，检查 <code>ProjectName--Bridging-Header.h</code> 文件是否被指定为桥接文件 : <code>Target-&gt; Build Settings -&gt;Swift Compiler -&gt; Install Object-C Compatibility  Header</code> 设置为Yes， <code>Target-&gt;Build Settings -&gt; Swift Compiler -&gt;Object-C Briding Header</code> 是否设置为这个文件</p>
  </li>
  <li>
    <p><code>xxx-Bridging-header.h</code> 文件内容一般是 swift的头文件和公共的头文件，内容一般是</p>
  </li>
</ul>

<p><code>
	#import "xxx.h"
</code></p>

<ul>
  <li>当引用类似 ``#import “happynet-Swfit.h”` 提示找不到的时候， 请检查引用次序，类似:</li>
</ul>

<p><code>
@import TestDylib;
#include "xxx-Swift.h"
#import "xxxmanager.h"
</code></p>

<ul>
  <li>编译提示少符号的时候，检查 <code>Target-&gt; Build Phases-&gt; Compile Sources</code> 是否把所有文件添加进去了</li>
  <li>调试第三方库，例如Tunnel的时候，先用 <code>Debug-&gt;Attach To Process by PID Or Name</code> 挂载进程</li>
  <li>如果是线程错误，xcode会弹出一个Text Table，显示汇编指令哪一行有问题，同时临近的Table回显示代码文件中对应的哪一行，一般是淡绿色标注那一行</li>
  <li>如果出现莫名其妙的编译错误，先<code>Build -&gt; Clean Build xxx</code>；清理一下，重新编译试试</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Connection Error Between Ipad and Macbook]]></title>
    <link href="https://brain-zhang.github.io/blog/2023/04/09/fix/"/>
    <updated>2023-04-09T16:44:24+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2023/04/09/fix</id>
    <content type="html"><![CDATA[<p>iOS真机调试，Mac连上iPad一直闪，信任不了设备问题</p>

<p>打开终端Terminal，输入</p>

<p><code>
$ sudo killall -STOP -c usbd
</code></p>

<p>命令回车，即可把进程关闭。插上iPhone，正常连接，问题解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix LVM Disks Missing Under /dev/xxx in PVE7.1]]></title>
    <link href="https://brain-zhang.github.io/blog/2023/03/20/fix-lvm-disks-missing-under-slash-dev-slash-xxx-in-pve7-dot-1/"/>
    <updated>2023-03-20T11:06:10+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2023/03/20/fix-lvm-disks-missing-under-slash-dev-slash-xxx-in-pve7-dot-1</id>
    <content type="html"><![CDATA[<p>PVE7.1，重启后 LVM thinpool 丢掉了一块VM Disk；</p>

<p>解决方法:</p>

<p><code>
lvchange -an storagename
vgchange -ay storagename
</code></p>

<p>参考:</p>

<p>https://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg1807169.html
https://www.reddit.com/r/Proxmox/comments/ot6lfr/lvm_issues_after_upgrade_disks_missing_under/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate PVE Storage From ZFS to Lvm]]></title>
    <link href="https://brain-zhang.github.io/blog/2023/01/18/migrate-pve-storage-zfs-to-lvm/"/>
    <updated>2023-01-18T10:21:13+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2023/01/18/migrate-pve-storage-zfs-to-lvm</id>
    <content type="html"><![CDATA[<p>之前PVE的存储我用ZFS做了三个pool，一个RaidZ1，两个Raid0；</p>

<p>我的PVE内核版本为 <code>5.13.19-6-pve</code>;</p>

<p>实际用下来有一个大槽点；</p>

<p>就是对于12T以上的单盘，ZFS每次写入的时候都会炒豆子音大爆发，放在家里实在不是什么好体验；而且我一直有个困扰已久的问题没有解决；就是ZFS强壮是强壮；但是对于其dataset的管理方式，无论是send还是destroy，每个操作都会有长时间的卡顿lock；另外相对于读性能，不知道为什么，我的RaidZ1写性能一直没有达到单盘读写能力，我加了ARC、ZIL，各种方法都折腾了一遍，但是效果都不好；
还有一个最大的问题，就是虚拟机多了之后，比如我同时对20台虚拟机做硬盘迁移操作；ZFS的lock太严重了，比如我同时delete两个虚拟硬盘，必定lock timeout;这个lock timeout 60s的限制，没有找到设置的地方，只能硬改代码，非常tricky；而不用后台命令，PVE的web UI对于并行操作的支持不好，所以降低磁盘并行操作的locktime非常必要；</p>

<!-- more -->

<p>当然实际使用上，ZFS的优点也很突出:</p>

<ul>
  <li>透明压缩、文件去重；太有用了，尤其是PVE 创建LXC容器，文件存储直接继承ZFS的所有能力</li>
  <li>dataset级别的存储操作；这种块级别管理文件的方式，对于大规模数据迁移很有用，而且可以针对不同的需求对每一个dataset参数调整</li>
  <li>快照；ZFS的杀手特性</li>
</ul>

<p>总之折腾了一年多，我已经把ZFS的手册翻了好几遍了，我已经理解这个文件系统的使用方式了；</p>

<p>但是为了静音，我打算切换到PVE 源远流长的LVM存储管理；鉴于现在我的忘性越来越大，我想用尽可能简单的方式，来描述PVE如何使用LVM的；以后随时能扫一眼回忆回忆；</p>

<h2 id="lvm">几句话过一下LVM</h2>

<ul>
  <li>LVM是整个一套管理磁盘存储的机制；包括分区扩容缩减，替换磁盘等等等等</li>
  <li>一个物理磁盘称之为PhysicalStorageMedia</li>
  <li>LVM最底层的设备称之为PV(物理卷)， 物理卷可以是一组raid盘，可以是单个物理硬盘，可以是一个分区(比如/dev/sda1)</li>
  <li>多个PV组成了VG(卷组)，一个VG对外表现就是一个块设备，就像一块硬盘一样</li>
  <li>一个VG可以划分为多个LV(逻辑卷)；其表现就跟一块硬盘划分多个分区是一样的</li>
  <li>有一种特殊的LV，称之为Thinly-Provisioned Logical Volumes(精简模式LVM)；</li>
  <li>thin LV支持COW(快照方便)和动态存储分配空间(按需分配而不是虚拟之指定的磁盘大小，节约空间)，跟ZFS一样，适合云环境</li>
  <li>创建thinLV之前，必须先创建一个thinpool，次序依次是 创建PV-&gt;创建VG-&gt;在此VG上创建thinpool-&gt;在此thinpool上创建thin LV；</li>
  <li>LVM可以动态缩减空间，增删硬盘</li>
  <li>一个VG可以单个PV，也可以多个PV组成</li>
  <li>一个VG可以包含多个thinpool+多个普通LV</li>
  <li>VG可以动态扩展，空间可以动态调整</li>
  <li>LV空间可以动态调整</li>
</ul>

<h2 id="pvelvm">PVE中的LVM</h2>

<ul>
  <li>PVE上后台用命令行可以支持所有LVM特性</li>
  <li>PVE Web界面功能比较弱，只支持
    <ul>
      <li>将一个PV划分为一个VG</li>
      <li>将一个VG划分为一个thinpool，即lvm-thin</li>
      <li>Web UI不可以组合划分</li>
    </ul>
  </li>
</ul>

<p>参考了一篇非常详细的文章，人家写的很清楚，就不啰嗦了:</p>

<p>https://codeantenna.com/a/SG6LHk1x9s</p>

<h2 id="section">规划</h2>

<ul>
  <li>三块硬盘，分成三个VG</li>
  <li>两个VG做成thin pool，只有lvm thin，分别用于存储LXC容器和VM</li>
  <li>一个VG 用来做文件服务器</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rsync Cheat]]></title>
    <link href="https://brain-zhang.github.io/blog/2022/07/26/rsync-cheat/"/>
    <updated>2022-07-26T15:35:51+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2022/07/26/rsync-cheat</id>
    <content type="html"><![CDATA[<p>这条命令我用了不下百次了，但是每次还得查，老年痴呆的前兆，/(ㄒoㄒ)/~~</p>

<p><code>
rsync -acvruP --progress /opt/src1 /opt/src2  /mnt/dest/
</code></p>

<ul>
  <li>-c, –checksum 打开校验开关，强制对文件传输进行校验; 开了前置计算会很慢，文件多的时候不要用</li>
  <li>-a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD</li>
  <li>-r, –recursive 对子目录以递归模式处理</li>
  <li>-u, –update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)；已经有拷贝了一半的文件的情况下不要用，不会自动更新</li>
</ul>

<p>最后，要注意路径中的斜杠处理:</p>

<p><code>
rsync -acvruP --progress /opt/src1 /mnt/dest/
</code></p>

<p>与下面的命令是不一样的</p>

<p><code>
rsync -acvruP --progress /opt/src1/ /mnt/dest/
</code></p>

<p>前者会拷贝src1目录，后者会拷贝src1目录下的文件，但是不会带src1</p>
]]></content>
  </entry>
  
</feed>
