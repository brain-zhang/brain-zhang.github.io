<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/tools/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2021-01-08T17:44:15+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux服务器极简安全配置]]></title>
    <link href="https://happy123.me/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi/"/>
    <updated>2021-01-06T17:33:38+08:00</updated>
    <id>https://happy123.me/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi</id>
    <content type="html"><![CDATA[<p>网络知识了解的越多，就越胆小；也许，这就是江湖吧；</p>

<p>当配置一台新的Linux服务器并上线时，其实就是将Server暴露到了炮火横飞的战场上，任何的大意都会让其万劫不复；但由于永恒的人性的弱点，我们总是在安全和便利之间摇摆；</p>

<p>本文希望能提供一种最简单的办法，帮助我们抵抗大多数的炮火；</p>

<!-- more -->

<h4 id="section">用户管理</h4>

<p>最重要的就是不要用root用户操作，当一台服务器部署初期，为不同用途划分不同用户组以及用户能避免绝大多数悲剧；</p>

<ol>
  <li>
    <p>增加一个用户组 <code>develop</code></p>

    <p><code>
 groupadd develop
</code></p>
  </li>
  <li>
    <p>增加一个用户<code>brain</code>，设置密码，并把他加入到组 <code>develop</code></p>

    <p><code>
 useradd -d /home/brain -s /bin/bash -m brain
 passwd brain
 usermod -a -G develop brain
</code></p>
  </li>
  <li>
    <p>允许用户登录</p>

    <p><code>
 vim /etc/sudoers
</code></p>

    <p>找到类似下面的一行，并在后面增加一行</p>

    <p><code>
 root     ALL=(ALL:ALL) ALL
 brain    ALL=(ALL) NOPASSWD: ALL
</code></p>

    <p>上面的NOPASSWD表示，切换sudo的时候，不需要输入密码，这样比较省事。如果出于安全考虑，也可以强制要求输入密码。</p>

    <p><code>
 root    ALL=(ALL:ALL) ALL
 brain    ALL=(ALL:ALL) ALL
</code></p>

    <p>然后，切换到新用户的身份，检查到这一步为止，是否一切正常。</p>

    <p><code>
 su brain
</code></p>
  </li>
</ol>

<h4 id="section-1">防火墙</h4>

<p>防火墙为我们抵抗绝大多数的脚本小子的攻击，是最省力，性价比最高的配置，切勿偷懒;</p>

<p>几乎所有的公有云都提供了非常傻瓜化的web 操作界面，来设置防火墙规则，一般情况下这些设置足够了；</p>

<p>设置第一原则是：只开放必要的端口</p>

<p>如果是自己设置防火墙，iptable的使用比较复杂，我们采用最简单的规则链:</p>

<p>待整理……</p>

<h4 id="sshd">sshd配置</h4>

<p>几条最简单的配置，即能避免90%以上的恶意嗅探；</p>

<ol>
  <li>
    <p>修改默认端口</p>

    <p><code>
 vim /etc/ssh/sshd_config
</code></p>

    <p>找到默认的22端口</p>

    <p><code>
 Port 22
</code></p>

    <p>修改为</p>

    <p><code>
 Port 12222
</code></p>
  </li>
  <li>
    <p>DNS</p>

    <p><code>
 UseDNS no
</code>
 提升ssh连接速度</p>
  </li>
  <li>
    <p>Key</p>

    <p>首先，确定有SSH公钥（一般是文件~/.ssh/id_rsa.pub），如果没有的话，使用ssh-keygen命令生成一个</p>

    <p><code>
 echo "ssh-rsa [your public key]" &gt; ~/.ssh/authorized_keys
</code>
 <code>
 sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/
</code></p>

    <p>修改/etc/ssh/sshd_config</p>

    <p><code>
 PermitRootLogin no
</code>
 <code>
 PermitEmptyPasswords no
</code>
 <code>
 PasswordAuthentication no
</code></p>

    <p><code>
 RSAAuthentication yes
</code>
 <code>
 PubkeyAuthentication yes
</code>
 <code>
 AuthorizedKeysFile .ssh/authorized_keys
</code></p>
  </li>
  <li>
    <p>重新启动sshd服务让配置生效</p>

    <p><code>
 systemctl restart sshd
</code></p>
  </li>
  <li>
    <p>验证</p>

    <p>注意，此时不要退出终端；而是另开一个终端，验证配置无误，可以正常登陆后再关闭老终端；</p>

    <p>如果出现什么问题无法登录，而之前的终端窗口又关闭了，如果是远程机房，那就有得麻烦了。所以一切验证无误后再收工，是个好习惯。</p>
  </li>
</ol>

<h4 id="fail2ban">Fail2Ban</h4>

<p>警惕那些不怀好意的撞库者，用Fail2Ban 将尝试暴力破解的脚本小子自动封禁</p>

<ol>
  <li>
    <p>安装</p>

    <p>centos:
 <code>
 yum -y install epel-release
</code>
 <code>
 sudo yum install fail2ban
</code></p>

    <p>ubuntu:
 <code>
 sudo apt-get install fail2ban
</code></p>
  </li>
  <li>
    <p>编辑规则文件</p>
  </li>
</ol>

<p>```
    vim /etc/fail2ban/jail.local
    [DEFAULT]
    ignoreip = 127.0.0.1/8
    bantime  = 86400
    maxretry = 5
    findtime = 1800
    destemail = xxxx@xxx.com
    sender = xxxx@gmail.com
    mta = mail
    protocol = tcp
    banaction = firewallcmd-ipset
    action = %(action_mwl)s</p>

<pre><code>[sshd]
enabled = true
filter  = sshd
port    = 12222
action = %(action_mwl)s
logpath = /var/log/secure ```
</code></pre>

<ol>
  <li>设定邮件转发</li>
</ol>

<p>```
    vim /etc/nail.rc</p>

<pre><code>## Add sendmail settings
set from=xxxx@gmail.com
set smtp=smtps:smtp.gmail.com:587
set smtp-auth-user=xxxx@gmail.com
set smtp-auth-password=xxxxx
set smtp-auth=login
set ssl-verify=ignore
set nss-config-dir=/etc/pki/nssdb ```
</code></pre>

<ol>
  <li>设定邮件模板</li>
</ol>

<p>```
     vim /etc/fail2ban/action.d/mail-whois-lines.conf</p>

<pre><code># Fail2Ban configuration file
#
# Author: Cyril Jaquier
#
#

[Definition]

# Option: actionstart
# Notes.: command executed once at the start of Fail2Ban.
# Values: CMD
#
actionstart = printf %%b "Hi,\n The jail &lt;name&gt; has been started successfully.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: started on `uname -n`" &lt;dest&gt;

# Option: actionstop
# Notes.: command executed once at the end of Fail2Ban
# Values: CMD
#
actionstop = printf %%b "Hi,\n The jail &lt;name&gt; has been stopped.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: stopped on `uname -n`" &lt;dest&gt;

# Option: actioncheck
# Notes.: command executed once before each actionban command
# Values: CMD
#
actioncheck =

# Option: actionban
# Notes.: command executed when banning an IP. Take care that the
# command is executed with Fail2Ban user rights.
# Tags: See jail.conf(5) man page
# Values: CMD
#
actionban = printf %%b "Hi,\n The IP &lt;ip&gt; has just been banned by Fail2Ban after &lt;failures&gt; attempts against &lt;name&gt;.\n\n Here are more information about &lt;ip&gt;:\n `whois &lt;ip&gt;`\n `/bin/curl http://ip.taobao.com/service/getIpInfo.php?ip=&lt;ip&gt;`\n\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: banned &lt;ip&gt; from `uname -n`" &lt;dest&gt;

# Option: actionunban
# Notes.: command executed when unbanning an IP. Take care that the
# command is executed with Fail2Ban user rights.
# Tags: See jail.conf(5) man page
# Values: CMD
#
actionunban =

[Init]

# Default name of the chain
#
name = default

# Destination/Addressee of the mail
#
dest = root
</code></pre>

<p>```</p>

<ol>
  <li>启动服务，查看状态</li>
</ol>

<p><code>
    systemctl start fail2ban
    systemctl status fail2ban
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Sort by Length of String Followed by Alphabetical Order]]></title>
    <link href="https://happy123.me/blog/2020/08/17/how-to-sort-by-length-of-string-followed-by-alphabetical-order/"/>
    <updated>2020-08-17T08:34:52+08:00</updated>
    <id>https://happy123.me/blog/2020/08/17/how-to-sort-by-length-of-string-followed-by-alphabetical-order</id>
    <content type="html"><![CDATA[<p>shell中，多行文本，先按照字母长度排序，相同长度再按照字母序排列；</p>

<p>做了很多次，隔几天就忘，让人绝望：</p>

<p><code>
cat /tmp/xxx.txt|sort -u | awk '{print length($0), $0}'  | sort -k2,2n -k1,1n -k3,3 |cut -d" " -f2-|less
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xargs Sh -c Skipping the First Argument]]></title>
    <link href="https://happy123.me/blog/2020/08/12/xargs-sh-c-skipping-the-first-argument/"/>
    <updated>2020-08-12T16:46:27+08:00</updated>
    <id>https://happy123.me/blog/2020/08/12/xargs-sh-c-skipping-the-first-argument</id>
    <content type="html"><![CDATA[<p>其实这个问题已经见过很多次了，但是知其然不知其所以然；今天偶尔在stackoverflow上看到了，记录一下；</p>

<h4 id="shellarg1-arg2">shell中的arg1, arg2…</h4>

<p>在bash shell中，<code>$1</code>, <code>$2</code>代表arg1, arg2，比如</p>

<p>```
# echo hello world|xargs echo $1 $2</p>

<p>hello world
```</p>

<!-- more -->

<p><code>$0</code> 代表执行环境，如果是一个执行脚本的话，<code>$0</code> 代表其脚本名；比如下面这个脚本hello.sh:</p>

<p>```
#!/bin/bash</p>

<p>echo $0
echo $1
echo $2
```</p>

<p>执行:</p>

<p>```
# ./hello.sh arg1 arg2</p>

<p>```
会输出</p>

<p><code>
./hello.sh
arg1
arg2
</code></p>

<h4 id="xargs-sh--c-arg">xargs 调用sh -c 中的arg</h4>

<p>但是使用<code>xargs sh -c</code>时会出现一个比较疑惑的情况，比如执行:</p>

<p>```
# echo hello world|xargs sh -c ‘echo $1 $2’</p>

<p>world
```</p>

<p>此时<code>$1</code>代表world，<code>$2</code>已经没有值了；而执行</p>

<p>```
# echo hello world|xargs sh -c ‘echo $0 $1’</p>

<p>hello world
```</p>

<p>反而得到了正确结果；</p>

<h4 id="why">why</h4>

<p>之前我一直认为<code>xargs sh -c</code>调用的时候吃掉了<code>$0</code>，不求甚解；偶尔读了一下sh的手册才发现玄机:</p>

<blockquote>
  <p>From the documentation for the -c option:</p>
</blockquote>

<blockquote>
  <p>Read commands from the command_string operand. Set the value of special parameter 0 (see Special Parameters) from the value of the command_name operand and the positional parameters ($1, $2, and so on) in sequence from the remaining argument operands.</p>
</blockquote>

<p>就是说在上面这条命令中，其实是没有找到要执行的命令，或者说要执行的命令为空，而hello world作为<code>$1</code>, <code>$2</code>传给一个空命令了；</p>

<p>后面追加一个dummy的命令会看的更清楚:</p>

<p>```
# echo hello world|xargs sh -c ‘echo $1 $2’ _</p>

<p>hello world
```</p>

<p>后面我加了一条下划线作为xargs的dummy command，这样<code>$1</code>, <code>$2</code>就恢复正常了；</p>

<h4 id="section">总结</h4>

<p>虽然这是一个啥用也没有的Magic Topic，但是搞明白之后还是挺有意思的，娱乐用；</p>

<p>另外隐隐约约觉得这里面隐含着一些安全方面的问题，暂时只是一种感觉，将来需要留意有没有这方面的hack手段;</p>

<h4 id="section-1">引用</h4>

<p>https://stackoverflow.com/questions/41043163/xargs-sh-c-skipping-the-first-argument</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSL环境备份恢复]]></title>
    <link href="https://happy123.me/blog/2019/11/18/wslhuan-jing-bei-fen-hui-fu/"/>
    <updated>2019-11-18T11:04:27+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/wslhuan-jing-bei-fen-hui-fu</id>
    <content type="html"><![CDATA[<p>WSL环境是可以单独备份还原的，有个工具名为LxRunOffline:</p>

<p>https://github.com/DDoSolitary/LxRunOffline</p>

<p>release版本下载下来之后直接使用就可以；记录一下操作命令:</p>

<!-- more -->

<h4 id="wsl">备份wsl</h4>

<p><code>
LxRunOffline.exe export -n Ubuntu-18.04 -f ubuntu18.04.backup.tar.gz
</code></p>

<p>-n ：wsl的别名，就是之前用list查看的其中一个</p>

<p>-f ：备份的路径，我这直接备份到当前路径backup.tar.gz</p>

<h4 id="wsl-1">还原wsl</h4>

<p><code>
LxRunOffline.exe install -n Ubuntu-18.04 -d C:\wsl -f D:\temp\ubuntu18.04.backup.tar.gz
</code></p>

<p>-n ：起个名字</p>

<p>-d ：wsl安装目录</p>

<p>-f ：备份文件目录</p>

<h4 id="wsl-2">删除WSL环境</h4>

<p>可以直接用wsl原生的命令：wslconfig</p>

<p><code>
wslconfig /u Ubuntu-18.04
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSL权限管理]]></title>
    <link href="https://happy123.me/blog/2019/11/18/wslquan-xian-guan-li/"/>
    <updated>2019-11-18T10:45:54+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/wslquan-xian-guan-li</id>
    <content type="html"><![CDATA[<p>重装系统，又折腾了一遍WSL环境，记录一下:</p>

<p>WSL (Win­dows Sub­sys­tem for Linux) 通过 /mnt 目录下的 c、d、e 等目录可分别访问本地的 C、D、E 等盘，虽然可以直接访问 Win­dows 下的文件内容，但输入 ls -al 查看文件你会发现文件权限全都是 777。这会导致一些问题出现，比如 Git会保留这些文件的执行权限，如果你之前在 Win­dows 下使用过 Git Bash ，那么在 WSL 中使用 <code>git status</code>查看本地仓库的文件状态时你会发现它们全部被标记成了 modified。</p>

<!-- more -->

<h3 id="section">分析问题</h3>

<p>首先要了解 WSL 中的两种文件系统：</p>

<h4 id="volfs">VolFs</h4>
<p>着力于在 Win­dows 文件系统上提供完整的 Linux 文件系统特性，通过各种手段实现了对 In­odes、Di­rec­tory en­tries、File ob­jects、File de­scrip­tors、Spe­cial file types 的支持。比如为了支持 Win­dows 上没有的 In­odes，VolFs 会把文件权限等信息保存在文件的 NTFS Ex­tended At­trib­utes 中。</p>

<p>WSL 中的 / 使用的就是 VolFs 文件系统。</p>

<h4 id="drvfs">DrvFs</h4>
<p>着力于提供与 Win­dows 文件系统的互操作性。与 VolFs 不同，为了提供最大的互操作性，DrvFs 不会在文件的 NTFS Ex­tended At­trib­utes 中储存附加信息，而是从 Win­dows 的文件权限（Ac­cess Con­trol Lists，就是你右键文件 &gt; 属性 &gt; 安全选项卡中的那些权限配置）推断出该文件对应的的 Linux 文件权限。</p>

<p>所有 Win­dows 盘符挂载至 WSL 下的 /mnt 时都是使用的 DrvFs 文件系统。</p>

<p>简单来说就是 WSL 对 / 目录下的文件拥有完整的控制权，而 /mnt 目录中的文件无法被 WSL 完全控制（可修改数据，无法真实的修改权限）。WSL 对 /mnt 目录中权限的修改不会直接记录到文件本身，而在 Win­dows 下对文件权限的修改直接可作用到 WSL 。关于权限在<a href="https://p3terx.com/go/aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL2NvbW1hbmRsaW5lL2NobW9kLWNob3duLXdzbC1pbXByb3ZlbWVudHMv">微软开发者博客中</a>有更详细的说明。</p>

<h3 id="section-1">解决方案</h3>

<p>这只是让文件在 WSL 中的权限看起来正常（目录 755，文件 644），实际并不会作用到 Win­dows 文件系统下的文件本身。</p>

<p>在 /etc/wsl.conf 中添加以下配置：</p>

<p><code>
[automount]
enabled = true
root = /mnt/
options = "metadata,umask=22,fmask=111"
mountFsTab = true
</code></p>

<p>上面的方法对所有盘符都有效，如果你想在 WSL 中调用 Win­dows 下的应用程序（比如 explorer.exe . 调用资源管理器打开当前路径）就需要对 C 盘进行单独设置，否则会提示没有权限。首先确认 wsl.conf 中的 mountFsTab 没有被设置为 false，然后编辑 /etc/fstab，添加如下内容：</p>

<p><code>
C:\ /mnt/c drvfs rw,noatime,uid=1000,gid=1000,metadata,umask=22,fmask=11 0 0
</code></p>

<p>此时执行<code>mkdir</code>等命令的时候，会发现新建的目录权限依然是 777。</p>

<p>目前民间解决方案是在.profile、.bashrc、.zshrc 或者其他 shell 配置文件中添加如下命令，重新设置 umask</p>

<p><code>
[filesystem]
umask = 022
</code></p>

<p>全部设置完成之后，最好重启一遍Windows系统。</p>

<h4 id="section-2">参考:</h4>

<p>https://segmentfault.com/a/1190000016677670</p>

<p>https://p3terx.com/archives/problems-and-solutions-encountered-in-wsl-use-2.html</p>
]]></content>
  </entry>
  
</feed>
