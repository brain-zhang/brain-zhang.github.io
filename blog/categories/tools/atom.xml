<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/tools/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2021-05-20T09:43:47+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Become Superuser on Ubuntu Linux]]></title>
    <link href="https://happy123.me/blog/2021/05/17/how-to-become-superuser-on-ubuntu-linux/"/>
    <updated>2021-05-17T17:31:30+08:00</updated>
    <id>https://happy123.me/blog/2021/05/17/how-to-become-superuser-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>```
sudo passwd root</p>

<p>su -
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Enable VNC+xfce on Ubuntu16]]></title>
    <link href="https://happy123.me/blog/2021/05/17/how-to-enable-vnc-plus-xfce-on-ubuntu16/"/>
    <updated>2021-05-17T17:13:32+08:00</updated>
    <id>https://happy123.me/blog/2021/05/17/how-to-enable-vnc-plus-xfce-on-ubuntu16</id>
    <content type="html"><![CDATA[<h4 id="vncserver">安装桌面环境和vncserver</h4>

<p><code>
sudo apt-get install xfce4 vnc4server
</code></p>

<h4 id="vncserver-1">启动vncserver</h4>

<p><code>
vncserver
</code></p>

<h4 id="section">修改配置文件</h4>

<p>```
vim ~/.vnc/xstartup</p>

<h1 id="binsh">!/bin/sh</h1>
<p>unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
startxfce4 &amp;</p>

<p>[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources
xsetroot -solid grey
```</p>

<h4 id="section-1">修改配置文件后，运行如下命令结束掉之前产生的窗口:1</h4>

<p><code>
vncserver -kill :1
</code></p>

<h4 id="vnc-clienttab">用vnc client连接后，tab键自动补全用不了，可以进行如下设置</h4>

<p>settings -&gt; window manager -&gt; keyboard -&gt; switch window for same application -&gt; clear</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下块设备缓存Bcache设置]]></title>
    <link href="https://happy123.me/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi/"/>
    <updated>2021-04-22T10:04:17+08:00</updated>
    <id>https://happy123.me/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi</id>
    <content type="html"><![CDATA[<h2 id="bcache">Bcache简介</h2>

<p>Bcache是Linux内核块设备层cache，支持多块HDD使用同一块SSD作为缓存盘。它让SSD作为HDD的缓存成为了可能。由于SSD价格昂贵，存储空间小，而HDD价格低廉，存储空间大，因此采用SSD作为缓存，HDD作为数据存储盘，既解决了SSD容量太小，又解决了HDD运行速度太慢的问题。</p>

<p>Bcache是从Linux-3.10开始正式并入内核主线的，因此，要使用Bcache，需要将内核升级到3.10及以上版本才行。</p>

<!-- more -->

<h2 id="bcache-1">Bcache缓存策略</h2>

<p>Bcache支持三种缓存策略，分别是：writeback、writethrough、writearoud，默认使用writethrough，缓存策略可动态修改。</p>

<ul>
  <li>
    <p>writeback 回写策略：回写策略默认是关闭的，如果开启此策略，则所有的数据将先写入缓存盘，然后等待系统将数据回写入后端数据盘中。</p>
  </li>
  <li>
    <p>writethrough 写通策略：默认的就是写通策略，此模式下，数据将会同时写入缓存盘和后端数据盘。</p>
  </li>
  <li>
    <p>writearoud ：选择此策略，数据将直接写入后端磁盘。</p>
  </li>
</ul>

<p>Write-misses写缺失(写入的数据不在缓存中)有两种处理方式：</p>

<pre><code>* Write allocate方式将写入位置读入缓存，然后采用write-hit（缓存命中写入）操作。写缺失操作与读缺失操作类似。

* No-write allocate方式并不将写入位置读入缓存，而是直接将数据写入存储。这种方式下，只有读操作会被缓存。
</code></pre>

<p>无论是Write-through还是Write-back都可以使用写缺失的两种方式之一。只是通常Write-back采用Write allocate方式，而Write-through采用No-write allocate方式；因为多次写入同一缓存时，Write allocate配合Write-back可以提升性能；而对于Write-through则没有帮助。</p>

<h2 id="section">安装</h2>

<p><code>
sudo apt-get update
sudo apt-get install bcache-tools
</code></p>

<h2 id="section-1">操作</h2>

<p>假设我们的HDD设备为/dev/sdb， SSD设备为/dev/sdc，我们需要用SSD加速HDD</p>

<h4 id="section-2">擦除磁盘中的超级块信息</h4>

<p><code>
# wipefs -a /dev/sdb
# wipefs -a /dev/sdc
</code></p>

<h4 id="hdd">创建后端磁盘(HDD)</h4>

<p><code>
make-bcache -B /dev/sdb
</code></p>

<h4 id="ssd">创建缓存盘(SSD)</h4>

<p><code>
make-bcache -C /dev/sdc  -b1M --writeback
</code></p>

<h4 id="section-3">添加缓存盘</h4>

<p>要为bcache后端磁盘添加缓存盘，在创建缓存盘成功之后，首先需要获取该缓存盘的cset.uuid</p>

<p>```
# ls /sys/fs/bcache/
5d9e80f1-e4b7-48f5-ace2-f2f391877ea7</p>

<h1 id="bash--c-echo-5d9e80f1-e4b7-48f5-ace2-f2f391877ea7--sysblockbcache0bcacheattach">bash -c ‘echo 5d9e80f1-e4b7-48f5-ace2-f2f391877ea7 &gt; /sys/block/bcache0/bcache/attach’</h1>
<p>```</p>

<p>注意，写入UUID必须以root身份才能执行，在zsh里面sudo可能会出现权限不够的问题，所以直接用<code>bash -c</code>来做</p>

<h4 id="section-4">看一下块设备结构</h4>

<p>```
# lsblk</p>

<p>sdb         8:16   0 1000G  0 disk
└─bcache0 251:0    0 1000G  0 disk
sdc         8:32   0  300G  0 disk
└─bcache0 251:0    0 1000G  0 disk</p>

<p>ls /sys/block/sdb/bcache/dev/slaves
```</p>

<h4 id="section-5">查看缓存模式</h4>

<p>```
# cat /sys/block/bcache0/bcache/cache_mode</p>

<p>[writethrough] writeback writearound none</p>

<p>```</p>

<h4 id="section-6">更改缓存模式</h4>

<p>```
# echo writeback &gt; /sys/block/bcache0/bcache/cache_mode
# cat /sys/block/bcache0/bcache/cache_mode</p>

<p>writethrough [writeback] writearound none</p>

<p>```</p>

<h4 id="section-7">查看缓存数据量</h4>

<p>```
# cat /sys/block/bcache0/bcache/dirty_data</p>

<p>4.1G
```</p>

<h4 id="section-8">格式化、挂载</h4>

<p><code>
# mkfs.ext4 /dev/bcache0
# mount /dev/bcache0 /opt
</code></p>

<h4 id="section-9">开机自动挂载</h4>

<p><code>
echo "/dev/bcache0 /opt ext4 rw 0 0" &gt;&gt; /etc/fstab
</code></p>

<h4 id="section-10">测试性能</h4>

<p><code>
# fio -filename=/dev/sdb -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=16k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest
</code></p>

<h2 id="bcache-2">停用Bcache</h2>

<h4 id="section-11">卸载</h4>

<p><code>
umount /dev/bcache0
</code></p>

<h4 id="section-12">注销缓存盘</h4>

<p><code>
echo 1 &gt;/sys/fs/bcache/5d9e80f1-e4b7-48f5-ace2-f2f391877ea7/unregister
</code></p>

<h4 id="section-13">停用后端磁盘</h4>

<p><code>
echo 1 &gt; /sys/block/bcache0/bcache/stop
</code></p>

<h4 id="lsblk">操作完成后，通过lsblk命令查看结果</h4>

<p><code>
# lsblk /dev/sdb
</code></p>

<p>停用之后，后端磁盘的数据是不会丢的，只不过加速功能没有了；当然，注销缓存盘的时候，缓存盘不能有数据读写操作</p>

<h2 id="section-14">参考</h2>

<p>https://wiki.ubuntu.com/ServerTeam/Bcache</p>

<p>https://askubuntu.com/questions/523817/how-to-setup-bcache</p>

<p>https://markrepo.github.io/maintenance/2018/09/10/bcache/</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Split a File Into Equal Parts Without Breaking Individual Lines?]]></title>
    <link href="https://happy123.me/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines/"/>
    <updated>2021-04-19T17:26:06+08:00</updated>
    <id>https://happy123.me/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines</id>
    <content type="html"><![CDATA[<p><code>
split -n l/5 your_file.txt
</code>
注意 l/5 前面是小写的L;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remove All Non-ascii Content From a Workflow (File)]]></title>
    <link href="https://happy123.me/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file/"/>
    <updated>2021-04-17T09:46:10+08:00</updated>
    <id>https://happy123.me/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file</id>
    <content type="html"><![CDATA[<h4 id="grep-remove-lines">grep remove lines</h4>

<p><code>
grep --colour='auto' -P '[^\x00-\x7]' file
</code></p>

<h4 id="tr-remove-characters">tr remove characters</h4>

<p><code>
LC_ALL=C tr -dc '\0-\177' &lt;file &gt;newfile
</code></p>

<h4 id="ignore-invalid-or-incomplete-multibyte-or-wide-character">ignore Invalid or incomplete multibyte or wide character</h4>

<p><code>
cat $file|iconv -f utf8 -c -t ascii//IGNORE
</code></p>
]]></content>
  </entry>
  
</feed>
