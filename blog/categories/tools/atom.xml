<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Living a Simple Life is a Happy Life]]></title>
  <link href="https://brain-zhang.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="https://brain-zhang.github.io/"/>
  <updated>2025-04-04T12:12:04+08:00</updated>
  <id>https://brain-zhang.github.io/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何配置Fail2Ban阻止Web频繁请求]]></title>
    <link href="https://brain-zhang.github.io/blog/2025/03/22/ru-he-pei-zhi-fail2banzu-zhi-webpin-fan-qing-qiu/"/>
    <updated>2025-03-22T10:38:46+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2025/03/22/ru-he-pei-zhi-fail2banzu-zhi-webpin-fan-qing-qiu</id>
    <content type="html"><![CDATA[<p>这类问题，AI回答已经非常靠谱了；记录一下，仅仅是加强一下记忆；</p>

<h3 id="nginx">1. 确认Nginx日志格式</h3>

<h4 id="nginxipremoteaddrnginxetcnginxnginxconf">1.1 确保Nginx日志中包含客户端IP（$remote_addr），检查Nginx配置（通常位于/etc/nginx/nginx.conf）：</h4>

<p><code>
http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';
    access_log /var/log/nginx/access.log main;
}
</code></p>

<h4 id="nginx-1">1.2 重启Nginx使配置生效：</h4>
<p><code>
sudosystemctl restart nginx
</code></p>

<h3 id="fail2ban">2. 安装Fail2Ban</h3>

<p>```
# Ubuntu/Debian
sudo apt update &amp;&amp; sudo apt install fail2ban</p>

<h1 id="centosrhel">CentOS/RHEL</h1>
<p>sudo yum install epel-release &amp;&amp; sudo yum install fail2ban
```</p>

<h3 id="filter">3. 创建自定义Filter规则</h3>

<p>比如要监控 所有 <code>/hello</code> url下的请求；</p>

<p>新建文件 <code>/etc/fail2ban/filter.d/nginx-url-bruteforce.conf</code></p>

<p><code>
[Definition]failregex=^&lt;HOST&gt; -.*"(GET|POST) /hello/[a-fA-F0-9]{64} HTTP/.*".*ignoreregex=
</code></p>

<h3 id="jail">4. 配置Jail规则</h3>

<p>编辑 /etc/fail2ban/jail.local，添加以下内容</p>

<p><code>
[nginx-url-bruteforce]
enabled = true
port = http,https
filter = nginx-url-bruteforce
logpath = /var/log/nginx/access.log
 # 允许的最大尝试次数
maxretry = 5
# 在60秒内超过maxretry则封禁
findtime = 60
# 封禁1小时
bantime = 3600
action = %(action_mwl)s
</code></p>

<h3 id="filter-1">5. 测试Filter规则</h3>

<p>使用 fail2ban-regex 测试正则匹配</p>

<p><code>
sudo fail2ban-regex /var/log/nginx/access.log /etc/fail2ban/filter.d/nginx-url-bruteforce.conf
</code></p>

<h3 id="fail2ban-1">6. 重启Fail2Ban并监控</h3>
<p><code>
sudo systemctl restart fail2ban
sudo fail2ban-client status nginx-url-bruteforce
</code></p>

<h3 id="section">7. 高级调整（可选）</h3>

<ul>
  <li>
    <p>日志路径：如果日志路径不同，修改 logpath。</p>
  </li>
  <li>
    <p>封禁时间：调整 bantime（单位：秒，如 86400 封禁1天）。</p>
  </li>
  <li>
    <p>精确匹配状态码：如需仅封禁500错误，修改 failregex：</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用watch命令高亮输出的不同]]></title>
    <link href="https://brain-zhang.github.io/blog/2024/12/13/yong-watchming-ling-gao-liang-shu-chu-de-bu-tong/"/>
    <updated>2024-12-13T12:07:14+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2024/12/13/yong-watchming-ling-gao-liang-shu-chu-de-bu-tong</id>
    <content type="html"><![CDATA[<p><code>
watch -d date
</code></p>

<p><code>-d</code> 参数会将两次输出之间的差异高亮显示；</p>

<p>我赶紧又 <code>man</code> 了一下 <code>watch</code> 命令的选项，又得到了几个对我有用的功能:</p>

<p><code>-b</code> 参数可以在程序异常退出的时候响铃</p>

<p><code>-g</code> 参数可以在程序输出发生变化时退出watch命令</p>

<p>还有我最常用的 <code>-n</code>参数，控制watch的间隔</p>

<p>Linux上面很多小命令，是从上世纪70年代的上古UNIX时期一路经过血战竞争才能留到现在的，论设计肯定是精益求精了；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Resize Partition on Linux]]></title>
    <link href="https://brain-zhang.github.io/blog/2024/04/19/how-to-resize-partition-on-linux/"/>
    <updated>2024-04-19T16:16:46+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2024/04/19/how-to-resize-partition-on-linux</id>
    <content type="html"><![CDATA[<p>之前操作Linux，扩容已有分区，一直是手工<code>fdisk</code>删除分区重建搞定的，这种方式不直观且容易出错；最近采用<code>parted</code>操作了以下，发现很直观；</p>

<p>比如我要对 /dev/sda1 从 100GB，扩容至200GB，操作如下</p>

<h3 id="section">查看当前分区情况</h3>

<p><code>
# 进入 parted 工具
$ sudo parted
GNU Parted 3.4
Using /dev/sda
Welcome to GNU Parted! Type 'help' to view a list of commands.
# 查看磁盘信息
(parted) print /dev/sda
</code></p>

<p>我只有 /dev/sda1 一个分区，因此很好办</p>

<h3 id="section-1">根分区扩容</h3>

<p><code>
# 进入 parted 工具
$ sudo parted /dev/sda
# 查看磁盘信息
(parted) print
# 此时应该只有一个分区，直接扩展这个分区
(parted)resizepart 1
Warning: Partition /dev/sda1 is being used. Are you sure you want to continue?
# 直接输入 yes 确认
Yes/No? yes
# 输入新的结束点
# 这里输入的数值，就是上方输出中 Disk: 后方的数值
End?  [200GB]? 200GB
# 扩展完成之后退出 parted
(parted) quit
</code></p>

<h3 id="resize2fs-">用resize2fs 工具扩展文件系统</h3>

<p><code>
$ sudo resize2fs /dev/sda1
</code></p>

<p>不出意外，应该搞定了； </p>

<h3 id="section-2">注意事项</h3>

<p>扩容之前，最好用 <code>lsof</code> 查看以下扩容分区，把所有的读写进程都停掉，如果条件允许，umount 这个分区再扩容，更加安全</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Solve 'PCI Passthrough Failed: Got Timeout' With PVE Vm Starts Failed]]></title>
    <link href="https://brain-zhang.github.io/blog/2024/04/03/how-to-solve-pci-passthrough-failed-got-timeout-with-pve-vm-starts-failed/"/>
    <updated>2024-04-03T14:38:15+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2024/04/03/how-to-solve-pci-passthrough-failed-got-timeout-with-pve-vm-starts-failed</id>
    <content type="html"><![CDATA[<p>PVE的虚机做了显卡直通后，有时候启动会报错:</p>

<p><code>
start failed .... got timeout.
</code></p>

<p>这一般是因为系统的内存不够了，因为硬件直通，虚拟机的内存需要跟物理内存的DMA映射一致，他就需要物理上连续的内存空间；如果此时物理机的空余内存看起来是够的，但是连续空间不够，就会报错；</p>

<!-- more -->

<p>解决方法有几个:</p>

<p>方法1. 比如我的机器是开启ZFS的ARC占用内存过多导致的，可以简单的执行下面的命令回收一下，可能内存就够了：</p>

<p><code>
echo 3 &gt; /proc/sys/vm/drop_caches
</code></p>

<p>方法2. 如果通过1确定是ZFS的缓存导致内存占用过高，可以设置ZFS的最大缓存限制:</p>

<p>```
$ vim /etc/modprobe.d/zfs.conf</p>

<h1 id="zfs-tuning-for-a-proxmox-machine-that-reserves-8gb-for-zfs">ZFS tuning for a proxmox machine that reserves 8GB for ZFS</h1>
<p>#
# Don’t let ZFS use less than 4GB and more than 8GB
options zfs zfs_arc_min=4294967296
options zfs zfs_arc_max=8589934592
#
# disabling prefetch is no longer required
options zfs l2arc_noprefetch=0</p>

<p>```</p>

<p>上面的配置把ZFS的最大缓存占用限制在4GB-8GB之间；</p>

<p>然后执行下面命令重新生成内核，重启物理机器生效</p>

<p><code>
$ update-initramfs -u
</code></p>

<p>方法3. 上面两种方法都属于指标不治本，最直接有效的方法就是预先留下一定量的内存，只能给特定虚拟机使用，没有分配的话宁可一直闲着也不用；</p>

<p>这可以用Linux的hugepage机制来实现:</p>

<p>修改 <code>/etc/default/grub</code> 中的启动参数，加入</p>

<p><code>
default_hugepagesz=1G hugepagesz=1G hugepages=128
</code></p>

<p>比如我的机器，修改为</p>

<p><code>
GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`
#GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt pcie_acs_override=downstream,multifunction nofb textonly nomodeset video=efifb:off"
GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt pcie_acs_override=downstream default_hugepagesz=1G hugepagesz=1G hugepages=128,multifunction nofb textonly nomodeset video=efifb:off"
GRUB_CMDLINE_LINUX=""
</code>
然后执行下面命令重新生成引导配置文件，最后重启物理机器生效</p>

<p><code>
update-grub
</code></p>

<p>重启后，系统会保留128G内存不用，如果要指定某台虚拟机使用，比如ID 121 虚拟机，请手工修改它的配置文件，加入hugepage参数:</p>

<p>```
$ vim /etc/pve/qemu-server/121.conf</p>

<p>…
hugepages: 1024
…
```</p>

<p>之后启动虚拟机，他就会从128G内存中分配它需要的内存；当然，这个虚拟机的内存是不能大于128GB的；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable /etc/rc.local With Systemd on Ubuntu 20.04]]></title>
    <link href="https://brain-zhang.github.io/blog/2023/08/20/enable-slash-etc-slash-rc-dot-local-with-systemd-on-ubuntu-20-dot-04/"/>
    <updated>2023-08-20T15:01:38+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2023/08/20/enable-slash-etc-slash-rc-dot-local-with-systemd-on-ubuntu-20-dot-04</id>
    <content type="html"><![CDATA[<h1 id="setup-systemd-service-file">setup systemd service file</h1>

<p>```
sudo vi /etc/systemd/system/rc-local.service</p>

<p>[Unit]
 Description=/etc/rc.local Compatibility
 ConditionPathExists=/etc/rc.local
[Service]
 Type=forking
 ExecStart=/etc/rc.local start
 TimeoutSec=0
 StandardOutput=tty
 RemainAfterExit=yes
 SysVStartPriority=99
[Install]
 WantedBy=multi-user.target
```</p>

<h1 id="enable-systemd-service">enable systemd service</h1>

<p><code>
sudo systemctl enable rc-local
</code></p>

<h1 id="create-rclocal">create rc.local</h1>

<p>```
sudo vi /etc/rc.local</p>

<h1 id="binbash">!/bin/bash</h1>
<p>…</p>

<p>sudo chmod +x /etc/rc.local
```</p>
]]></content>
  </entry>
  
</feed>
