<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/blog/categories/tools/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2021-04-22T10:12:49+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux下块设备缓存Bcache设置]]></title>
    <link href="https://happy123.me/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi/"/>
    <updated>2021-04-22T10:04:17+08:00</updated>
    <id>https://happy123.me/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi</id>
    <content type="html"><![CDATA[<h2 id="bcache">Bcache简介</h2>

<p>Bcache是Linux内核块设备层cache，支持多块HDD使用同一块SSD作为缓存盘。它让SSD作为HDD的缓存成为了可能。由于SSD价格昂贵，存储空间小，而HDD价格低廉，存储空间大，因此采用SSD作为缓存，HDD作为数据存储盘，既解决了SSD容量太小，又解决了HDD运行速度太慢的问题。</p>

<p>Bcache是从Linux-3.10开始正式并入内核主线的，因此，要使用Bcache，需要将内核升级到3.10及以上版本才行。</p>

<!-- more -->

<h2 id="bcache-1">Bcache缓存策略</h2>

<p>Bcache支持三种缓存策略，分别是：writeback、writethrough、writearoud，默认使用writethrough，缓存策略可动态修改。</p>

<ul>
  <li>
    <p>writeback 回写策略：回写策略默认是关闭的，如果开启此策略，则所有的数据将先写入缓存盘，然后等待系统将数据回写入后端数据盘中。</p>
  </li>
  <li>
    <p>writethrough 写通策略：默认的就是写通策略，此模式下，数据将会同时写入缓存盘和后端数据盘。</p>
  </li>
  <li>
    <p>writearoud ：选择此策略，数据将直接写入后端磁盘。</p>
  </li>
</ul>

<p>Write-misses写缺失(写入的数据不在缓存中)有两种处理方式：</p>

<pre><code>* Write allocate方式将写入位置读入缓存，然后采用write-hit（缓存命中写入）操作。写缺失操作与读缺失操作类似。

* No-write allocate方式并不将写入位置读入缓存，而是直接将数据写入存储。这种方式下，只有读操作会被缓存。
</code></pre>

<p>无论是Write-through还是Write-back都可以使用写缺失的两种方式之一。只是通常Write-back采用Write allocate方式，而Write-through采用No-write allocate方式；因为多次写入同一缓存时，Write allocate配合Write-back可以提升性能；而对于Write-through则没有帮助。</p>

<h2 id="section">安装</h2>

<p><code>
sudo apt-get update
sudo apt-get install bcache-tools
</code></p>

<h2 id="section-1">操作</h2>

<p>假设我们的HDD设备为/dev/sdb， SSD设备为/dev/sdc，我们需要用SSD加速HDD</p>

<h4 id="section-2">擦除磁盘中的超级块信息</h4>

<p><code>
# wipefs -a /dev/sdb
# wipefs -a /dev/sdc
</code></p>

<h4 id="hdd">创建后端磁盘(HDD)</h4>

<p><code>
make-bcache -B /dev/sdb
</code></p>

<h4 id="ssd">创建缓存盘(SSD)</h4>

<p><code>
make-bcache -C /dev/sdc -w4k -b1M --writeback
</code></p>

<h4 id="section-3">添加缓存盘</h4>

<p>要为bcache后端磁盘添加缓存盘，在创建缓存盘成功之后，首先需要获取该缓存盘的cset.uuid</p>

<p>```
# ls /sys/fs/bcache/
5d9e80f1-e4b7-48f5-ace2-f2f391877ea7</p>

<h1 id="bash--c-echo-5d9e80f1-e4b7-48f5-ace2-f2f391877ea7--sysblockbcache0bcacheattach">bash -c ‘echo 5d9e80f1-e4b7-48f5-ace2-f2f391877ea7 &gt; /sys/block/bcache0/bcache/attach’</h1>
<p>```</p>

<p>注意，写入UUID必须以root身份才能执行，在zsh里面sudo可能会出现权限不够的问题，所以直接用<code>bash -c</code>来做</p>

<h4 id="section-4">看一下块设备结构</h4>

<p>```
# lsblk</p>

<p>sdb         8:16   0 1000G  0 disk
└─bcache0 251:0    0 1000G  0 disk
sdc         8:32   0  300G  0 disk
└─bcache0 251:0    0 1000G  0 disk</p>

<p>ls /sys/block/sdb/bcache/dev/slaves
```</p>

<h4 id="section-5">格式化、挂载</h4>

<p><code>
# mkfs.ext4 /dev/bcache0
# mount /dev/bcache0 /opt
</code></p>

<h4 id="section-6">开机自动挂载</h4>

<p><code>
echo "/dev/bcache0 /opt ext4 rw 0 0" &gt;&gt; /etc/fstab
</code></p>

<h4 id="section-7">测试性能</h4>

<p><code>
# fio -filename=/dev/sda -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=16k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest
</code></p>

<h2 id="bcache-2">停用Bcache</h2>

<h4 id="section-8">卸载</h4>

<p><code>
umount /dev/bcache0
</code></p>

<h4 id="section-9">注销缓存盘</h4>

<p><code>
echo 1 &gt;/sys/fs/bcache/5d9e80f1-e4b7-48f5-ace2-f2f391877ea7/unregister
</code></p>

<h4 id="section-10">停用后端磁盘</h4>

<p><code>
echo 1 &gt; /sys/block/bcache0/bcache/stop
</code></p>

<h4 id="lsblk">操作完成后，通过lsblk命令查看结果</h4>

<p><code>
# lsblk /dev/sdb
</code></p>

<p>停用之后，后端磁盘的数据是不会丢的，只不过加速功能没有了；当然，注销缓存盘的时候，缓存盘不能有数据读写操作</p>

<h2 id="section-11">参考</h2>

<p>https://wiki.ubuntu.com/ServerTeam/Bcache</p>

<p>https://askubuntu.com/questions/523817/how-to-setup-bcache</p>

<p>https://markrepo.github.io/maintenance/2018/09/10/bcache/</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Split a File Into Equal Parts Without Breaking Individual Lines?]]></title>
    <link href="https://happy123.me/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines/"/>
    <updated>2021-04-19T17:26:06+08:00</updated>
    <id>https://happy123.me/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines</id>
    <content type="html"><![CDATA[<p><code>
split -n l/5 your_file.txt
</code>
注意 l/5 前面是小写的L;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remove All Non-ascii Content From a Workflow (File)]]></title>
    <link href="https://happy123.me/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file/"/>
    <updated>2021-04-17T09:46:10+08:00</updated>
    <id>https://happy123.me/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file</id>
    <content type="html"><![CDATA[<h4 id="grep-remove-lines">grep remove lines</h4>

<p><code>
grep --colour='auto' -P '[^\x00-\x7]' file
</code></p>

<h4 id="tr-remove-characters">tr remove characters</h4>

<p><code>
LC_ALL=C tr -dc '\0-\177' &lt;file &gt;newfile
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Modify an Invalid '/etc/sudoers' File?]]></title>
    <link href="https://happy123.me/blog/2021/01/09/how-to-modify-an-invalid-slash-etc-slash-sudoers-file/"/>
    <updated>2021-01-09T16:16:31+08:00</updated>
    <id>https://happy123.me/blog/2021/01/09/how-to-modify-an-invalid-slash-etc-slash-sudoers-file</id>
    <content type="html"><![CDATA[<p>刚说小心驶得万年船，就想自己偷奸耍滑，手工裸编辑 <code>/etc/sudoers</code> 文件把sudo权限搞挂了…-_-</p>

<p>仔细瞅了瞅，少加了一个冒号，导致现在进退两难…</p>

<!-- more -->

<p>解决这个问题的标准方法是pkexec，参考：</p>

<p>https://askubuntu.com/questions/73864/how-to-modify-an-invalid-etc-sudoers-file</p>

<p>但是执行pkexec的时候又暴露了一个问题:</p>

<p><code>
polkit-agent-helper-1: error response to PolicyKit daemon: GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed: No session for cookie
==== AUTHENTICATION FAILED ===
Error executing command as another user: Not authorized
</code></p>

<p>最后解决需要一点小技巧:</p>

<ol>
  <li>
    <p>在第一个shell种执行:<code>echo $$</code>，得到PID</p>
  </li>
  <li>
    <p>再开一个shell，再执行<code>pkttyagent --process PID</code></p>
  </li>
  <li>
    <p>再回到第一个shell执行<code>pkexec visudo</code></p>
  </li>
</ol>

<p>参考：</p>

<p>https://github.com/NixOS/nixpkgs/issues/18012</p>

<p>最后的教训是：人就是这样，要求别人头头是道，轮到自己偷奸耍滑；早用<code>visudo</code>还有这种事吗？</p>

<p>三省吾身，不说了，我得赶紧检查下自己其它耍滑头找方便留下的口子;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux服务器极简安全配置]]></title>
    <link href="https://happy123.me/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi/"/>
    <updated>2021-01-06T17:33:38+08:00</updated>
    <id>https://happy123.me/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi</id>
    <content type="html"><![CDATA[<p>网络知识了解的越多，就越胆小；也许，这就是江湖吧；</p>

<p>当配置一台新的Linux服务器并上线时，其实就是将Server暴露到了炮火横飞的战场上，任何的大意都会让其万劫不复；但由于永恒的人性的弱点，我们总是在安全和便利之间摇摆；</p>

<p>本文希望能提供一种最简单的办法，帮助我们抵抗大多数的炮火；</p>

<!-- more -->

<h4 id="section">用户管理</h4>

<p>最重要的就是不要用root用户操作，当一台服务器部署初期，为不同用途划分不同用户组以及用户能避免绝大多数悲剧；</p>

<ol>
  <li>
    <p>增加一个用户组 <code>develop</code></p>

    <p><code>
 groupadd develop
</code></p>
  </li>
  <li>
    <p>增加一个用户<code>brain</code>，设置密码，并把他加入到组 <code>develop</code></p>

    <p><code>
 useradd -d /home/brain -s /bin/bash -m brain
</code></p>

    <p><code>
 passwd brain
</code></p>

    <p><code>
 usermod -a -G develop brain
</code></p>
  </li>
  <li>
    <p>允许用户登录</p>

    <p><code>
 vim /etc/sudoers
</code></p>

    <p>找到类似下面的一行，并在后面增加一行</p>

    <p><code>
 root     ALL=(ALL:ALL) ALL
</code></p>

    <p><code>
 brain    ALL=(ALL) NOPASSWD: ALL
</code></p>

    <p>上面的NOPASSWD表示，切换sudo的时候，不需要输入密码，这样比较省事。如果出于安全考虑，也可以强制要求输入密码。</p>

    <p><code>
 root    ALL=(ALL:ALL) ALL
</code></p>

    <p><code>
 brain    ALL=(ALL:ALL) ALL
</code></p>

    <p>然后，切换到新用户的身份，检查到这一步为止，是否一切正常。</p>

    <p><code>
 su brain
</code></p>
  </li>
</ol>

<h4 id="section-1">防火墙</h4>

<p>防火墙为我们抵抗绝大多数的脚本小子的攻击，是最省力，性价比最高的配置，切勿偷懒;</p>

<p>几乎所有的公有云都提供了非常傻瓜化的web 操作界面，来设置防火墙规则，一般情况下这些设置足够了；</p>

<p>设置第一原则是：只开放必要的端口</p>

<p>如果是自己设置防火墙，iptable的使用比较复杂，我们采用最简单的规则链:</p>

<p>待整理……</p>

<h4 id="sshd">sshd配置</h4>

<p>几条最简单的配置，即能避免90%以上的恶意嗅探；</p>

<ol>
  <li>
    <p>修改默认端口</p>

    <p><code>
 vim /etc/ssh/sshd_config
</code></p>

    <p>找到默认的22端口</p>

    <p><code>
 Port 22
</code></p>

    <p>修改为</p>

    <p><code>
 Port 12222
</code></p>
  </li>
  <li>
    <p>DNS</p>

    <p><code>
 UseDNS no
</code>
 提升ssh连接速度</p>
  </li>
  <li>
    <p>Key</p>

    <p>首先，确定有SSH公钥（一般是文件~/.ssh/id_rsa.pub），如果没有的话，使用ssh-keygen命令生成一个</p>

    <p><code>
 echo "ssh-rsa [your public key]" &gt; ~/.ssh/authorized_keys
</code></p>

    <p><code>
 sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/
</code></p>

    <p>修改/etc/ssh/sshd_config</p>

    <p><code>
 PermitRootLogin no
</code></p>

    <p><code>
 PermitEmptyPasswords no
</code></p>

    <p><code>
 PasswordAuthentication no
</code></p>

    <p><code>
 RSAAuthentication yes
</code></p>

    <p><code>
 PubkeyAuthentication yes
</code></p>

    <p><code>
 AuthorizedKeysFile .ssh/authorized_keys
</code></p>
  </li>
  <li>
    <p>重新启动sshd服务让配置生效</p>

    <p><code>
 systemctl restart sshd
</code></p>
  </li>
  <li>
    <p>验证</p>

    <p>注意，此时不要退出终端；而是另开一个终端，验证配置无误，可以正常登陆后再关闭老终端；</p>

    <p>如果出现什么问题无法登录，而之前的终端窗口又关闭了，如果是远程机房，那就有得麻烦了。所以一切验证无误后再收工，是个好习惯。</p>
  </li>
</ol>

<h4 id="fail2ban">Fail2Ban</h4>

<p>警惕那些不怀好意的撞库者，用Fail2Ban 将尝试暴力破解的脚本小子自动封禁</p>

<ul>
  <li>
    <p>安装</p>

    <p>centos:
  <code>
  yum -y install epel-release
 </code></p>

    <p><code>
  sudo yum install fail2ban
 </code></p>

    <p>ubuntu:
  <code>
  sudo apt-get install fail2ban
 </code></p>
  </li>
  <li>
    <p>编辑规则文件</p>
  </li>
</ul>

<p>```
    vim /etc/fail2ban/jail.local
    [DEFAULT]
    ignoreip = 127.0.0.1/8
    bantime  = 86400
    maxretry = 5
    findtime = 1800
    destemail = xxxx@xxx.com
    sender = xxxx@gmail.com
    mta = mail
    protocol = tcp
    banaction = firewallcmd-ipset
    action = %(action_mwl)s</p>

<pre><code>[sshd]
enabled = true
filter  = sshd
port    = 12222
action = %(action_mwl)s
logpath = /var/log/secure ```
</code></pre>

<ul>
  <li>设定邮件转发</li>
</ul>

<p>```
    vim /etc/nail.rc</p>

<pre><code>## Add sendmail settings
set from=xxxx@gmail.com
set smtp=smtps:smtp.gmail.com:587
set smtp-auth-user=xxxx@gmail.com
set smtp-auth-password=xxxxx
set smtp-auth=login
set ssl-verify=ignore
set nss-config-dir=/etc/pki/nssdb ```
</code></pre>

<ul>
  <li>设定邮件模板</li>
</ul>

<p>```
     vim /etc/fail2ban/action.d/mail-whois-lines.conf</p>

<pre><code># Fail2Ban configuration file
#
# Author: Cyril Jaquier
#
#

[Definition]

# Option: actionstart
# Notes.: command executed once at the start of Fail2Ban.
# Values: CMD
#
actionstart = printf %%b "Hi,\n The jail &lt;name&gt; has been started successfully.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: started on `uname -n`" &lt;dest&gt;

# Option: actionstop
# Notes.: command executed once at the end of Fail2Ban
# Values: CMD
#
actionstop = printf %%b "Hi,\n The jail &lt;name&gt; has been stopped.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: stopped on `uname -n`" &lt;dest&gt;

# Option: actioncheck
# Notes.: command executed once before each actionban command
# Values: CMD
#
actioncheck =

# Option: actionban
# Notes.: command executed when banning an IP. Take care that the
# command is executed with Fail2Ban user rights.
# Tags: See jail.conf(5) man page
# Values: CMD
#
actionban = printf %%b "Hi,\n The IP &lt;ip&gt; has just been banned by Fail2Ban after &lt;failures&gt; attempts against &lt;name&gt;.\n\n Here are more information about &lt;ip&gt;:\n `whois &lt;ip&gt;`\n `/bin/curl http://ip.taobao.com/service/getIpInfo.php?ip=&lt;ip&gt;`\n\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: banned &lt;ip&gt; from `uname -n`" &lt;dest&gt;

# Option: actionunban
# Notes.: command executed when unbanning an IP. Take care that the
# command is executed with Fail2Ban user rights.
# Tags: See jail.conf(5) man page
# Values: CMD
#
actionunban =

[Init]

# Default name of the chain
#
name = default

# Destination/Addressee of the mail
#
dest = root
</code></pre>

<p>```</p>

<ul>
  <li>启动服务，查看状态</li>
</ul>

<p><code>
    systemctl start fail2ban
    systemctl status fail2ban
    fail2ban-client status
</code></p>
]]></content>
  </entry>
  
</feed>
