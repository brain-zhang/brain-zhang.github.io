<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Living a Simple Life is a Happy Life]]></title>
  <link href="http://happy123.me/atom.xml" rel="self"/>
  <link href="http://happy123.me/"/>
  <updated>2018-09-12T11:23:20+08:00</updated>
  <id>http://happy123.me/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The History of X86]]></title>
    <link href="http://happy123.me/blog/2018/09/12/the-history-of-x86/"/>
    <updated>2018-09-12T10:22:01+08:00</updated>
    <id>http://happy123.me/blog/2018/09/12/the-history-of-x86</id>
    <content type="html"><![CDATA[<p>我们平时老看到<code>X86指令集</code>, <code>X86架构</code>等等词汇，很容易就猜到这个86来源于Intel那款名动天下的处理器&mdash;8086，那么8086的名字又是怎么来的呢？</p>

<!-- more -->


<p>这是一个遥远的传说，各种解释众说纷纭，挑两个有说服力的段子吧:</p>

<h4>说法1</h4>

<p>当intel发明第一颗4位的位处理器的时候，intel把他叫4004。在当时，intel也没有意识到这就是微处理器，（微处理器是后来人的说法），intel当时只是给做手持计算器的厂家来定制处理器。</p>

<p>因为4004的指令集很有限，所以又搞出来了一个升级版本4040。</p>

<p>8008是4004的8位版，8080是4040的8位版。</p>

<p>8085是8080的单5伏电压版。</p>

<p>8085升级到16位后，就叫8086了。</p>

<p>嗯，还是很有逻辑的。</p>

<h4>说法2</h4>

<p>微处理器是在70年代末发明的。 接近80年，所以，前两个数字就是这么来的;</p>

<p>当时微处理器是8位的，因此，第3个数字是8;</p>

<p>在8085和8086 cpu之前，8080处理器是需要+5-5和12v电压来工作。 随着技术的进步，只需要单一的5v供电了，因此，最后一个数字是5;</p>

<p>8085升级到16位后，就叫8086了;</p>

<p>好吧，也说得通。</p>

<h4>不管怎么说，反正Intel推出的8086在历史上的经典地位不容置疑；那我们来简单回顾一下Intel CPU发展的历史吧</h4>

<ul>
<li><p>20世纪70年代末，Intel生产了著名的16位8086处理器，之后又推出了80186与80286；</p></li>
<li><p>1985年，Intel继摩托罗拉之后，第二个研制出32位的微处理器80386；</p></li>
<li><p>8086、80286、80386等等，这一系列CPU就称作x86，正式一点称作IA-32（Intel Architecture 32-bit）。正是这个架构开启了Intel在个人PC CPU领域的无敌之路，后来的操作系统、编译器、应用软件无一不是把<code>适配X86指令</code>作为核心竞争力；</p></li>
<li><p>1989年，Intel推出80486处理器，具有浮点运算功能；</p></li>
<li><p>因为当初与Intel竞争微处理器的摩托罗拉公司是以86开头的，如68000，68010，68020，而且AMD也崭露头角，他们也搞出来AM386，AM486等等，令Intel不胜其烦；于是1993年，Intel推出奔腾(Pentium)处理器，不再以数字命名其产品；Pentium刚刚推出的时候，命名及其混乱，有人叫I586，有人叫P5,不管怎么说，这个时候伴随我们记忆的不只是这个Pentium这个名字，还有那个经典的&#8221;等等等你等&#8221;的广告音乐，Intel又凭借Pentium这个架构继续无敌并寂寞着</p></li>
<li><p>在Pentium时代，其实AMD也不是毫无作为，老一代DIY玩家们一定还对Athlon K7的传说记忆犹新，尤其是当时那些拉风的译名，什么&#8221;速龙&#8221;、&#8221;毒龙&#8221;、&#8221;钻龙&#8221;等等，我得说，这个时期的农企实在是很时髦，远远不像他们后来的市场部那么傻13</p></li>
<li><p>当然，当时最璀璨的舞者，我只献给活在DIYer心里那个最美好的名字&mdash;图拉丁赛扬；正是这款CPU成为了许多人的电脑时代的启蒙者</p></li>
<li><p>2001年开始，Intel将用于服务器以及工作站的Pentium 4 Xeon独立成全新的品牌“Xeon”（至强）)；正如这个名字所蕴含的霸气一样，这个品牌延续到了今天</p></li>
<li><p>2006年，Intel发布“Core”（酷睿）品牌，用作英特尔的旗舰级处理器系列的新品品牌； 然后，这个品牌经历了数代架构更迭，一直伴随我们到了今天</p></li>
<li><p>同样的，围绕指令集从32位跃迁到64位的过程中，AMD和Interl在这段时间还爆发了一场惊天缠斗；Intel作为CPU市场的领跑者，觉得自己理应主导32位到64位时代跃进的浪潮；早在Pentium时代，他们就制定了Intel 64计划；然而，由于一个大公司内部的种种政治斗争，市场斗争，人的本性里面悲剧的傲慢，这个过程种出现了种种败着昏棋，最终AMD64架构在IA-32上新增了64位寄存器，并兼容早期的16位和32位软件，可使现有以x86为对象的编译器容易转为AMD64版本，在2003年9月推出了AMD64；在64位时代由追随者变成领跑者</p></li>
<li><p>Intel此时如梦方醒，慌忙将AMD的指令集拿过来稍作加工推出自己的兼容产品；然后就是两个公司营销和市场人员、法律人员旷日持久的撕逼大战；中间诞生了许许多多匪夷所思的营销名词，比如A64, I64, IA32E,iAMD64，Intel64，X86-64等等等等；如果你是一个Linux爱好者，很容看到各个软件包都会注明Amd64, X86_64等等，这是那场混乱大战的遗留物</p></li>
</ul>


<h4>总结一下现在的主流</h4>

<ul>
<li><p>32/64 位系统编译在32位系统上运行 => x86</p></li>
<li><p>32 系统上编译64位系统上运行 => x86_amd64</p></li>
<li><p>64 系统上编译在64位系统上运行 => amd64</p></li>
</ul>


<h4>看看MSDN的解释:</h4>

<blockquote><p>The following list describes the various versions of cl.exe (the Visual C++ compiler):</p>

<p>x86 on x86
Allows you to create output files for x86 machines. This version of cl.exe runs as a 32-bit process, native on an x86 machine and under WOW64 on a 64-bit Widows operating system.
Itanium on x86 (Itanium cross-compiler)
Allows you to create output files for Itanium. This version of cl.exe runs as a 32-bit process, native on an x86 machine and under WOW64 on a 64-bit Widows operating system.</p>

<p>x64 on x86 (x64 cross-compiler)
Allows you to create output files for x64. This version of cl.exe runs as a 32-bit process, native on an x86 machine and under WOW64 on a 64-bit Widows operating system.</p>

<p>Itanium on Itanium
Allows you to create output files for Itanium. This version of cl.exe runs as a native process on an Itanium machine.</p>

<p>x64 on x64
Allows you to create output files for x64. This version of cl.exe runs as a native process on an x64 machine.</p></blockquote>

<h4>总之CPU的历史生动说明了了计算机界的很多老梗是如何诞生的，比如很多人都疑惑为什么Windows的发布名称是Win95->W98->W98SE->Win2000(NT)&ndash;>WinXP->Vista->Win7->Win10，等等等等；这种现象是商业环境、市场营销、法律风险以及随意拍脑门的高管，放荡不羁的开发团队合力促成的~~~</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Minimum Fee of Bitcoin Transaction]]></title>
    <link href="http://happy123.me/blog/2018/09/11/the-minimum-fee-of-bitcoin-transaction/"/>
    <updated>2018-09-11T15:13:35+08:00</updated>
    <id>http://happy123.me/blog/2018/09/11/the-minimum-fee-of-bitcoin-transaction</id>
    <content type="html"><![CDATA[<p>昨天看到地球人都知道的1号地址转了<a href="https://btc.com/b9a6f0b287646c30bdafa08cc997d7af93ca20eb7b2d09084ddf7a7a075394b2">0.00000555个币进来</a>，也不知道是谁在做测试，恶作剧心起，遂想要转掉这点娱乐币。</p>

<p>默认Bitcoin Core 0.15之后的客户端貌似都不能调节transaction fee大小了，老实说，自从Segwit升级完毕之后，我很少用core钱包了。这次没办法，为了构造一笔最小手续费用的交易，采取如下动作:</p>

<!-- more -->


<p>1.先看一下vout和txid:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bitcoin-cli listunspent 0 9999999 "[\"12AKRNHpFhDSBDD9rSn74VAzZSL3774PxQ\"]"</span></code></pre></td></tr></table></div></figure>


<p>输出里面找到 <code>12AKRNHpFhDSBDD9rSn74VAzZSL3774PxQ</code>的vout为0， txid是<code>b9a6f0b287646c30bdafa08cc997d7af93ca20eb7b2d09084ddf7a7a075394b2</code></p>

<p>2.创建转账交易</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bitcoin-cli createrawtransaction "[{\"txid\":\"b9a6f0b287646c30bdafa08cc997d7af93ca20eb7b2d09084ddf7a7a075394b2\",\"vout\":0}]" "{\"1HB1Efu8RkEpxzTHYd1E7NgdimL1ddDhkR\":0.0000055}"</span></code></pre></td></tr></table></div></figure>


<p>得到十六进制输出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0200000001b29453077a7adf4d08092d7beb20ca93afd797c98ca0afbd306c6487b2f0a6b90000000000ffffffff0126020000000000001976a914b1665e71006dbfbabb69cbcdc5717b11abdb89e888ac00000000</span></code></pre></td></tr></table></div></figure>


<p>3.签名之</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bitcoin-cli signrawtransaction  "0200000001b29453077a7adf4d08092d7beb20ca93afd797c98ca0afbd306c6487b2f0a6b90000000000ffffffff0126020000000000001976a914b1665e71006dbfbabb69cbcdc5717b11abdb89e888ac00000000"</span></code></pre></td></tr></table></div></figure>


<p>得到十六进制输出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "hex": "0200000001b29453077a7adf4d08092d7beb20ca93afd797c98ca0afbd306c6487b2f0a6b9000000008a47304402202a51aa8eb0593a4b48880712c3ee70b7d6ca74ed313ef93e9c92489616587a2c022048c87fde75761e2a9cc9fef7dc8d0d9961ef1df89e22f88e5e3902567ec956f8014104fdf4907810a9f5d9462a1ae09feee5ab205d32798b0ffcc379442021f84c5bbfc891eb16b0faef4bef99ba6d522fb85470a20df730808e583778aa35c7af98f5ffffffff0126020000000000001976a914b1665e71006dbfbabb69cbcdc5717b11abdb89e888ac00000000",
</span><span class='line'>  "complete": true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>4.激动人心的时刻来了，广播之:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bitcoin-cli sendrawtransaction  "0200000001b29453077a7adf4d08092d7beb20ca93afd797c98ca0afbd306c6487b2f0a6b9000000008a47304402202a51aa8eb0593a4b48880712c3ee70b7d6ca74ed313ef93e9c92489616587a2c022048c87fde75761e2a9cc9fef7dc8d0d9961ef1df89e22f88e5e3902567ec956f8014104fdf4907810a9f5d9462a1ae09feee5ab205d32798b0ffcc379442021f84c5bbfc891eb16b0faef4bef99ba6d522fb85470a20df730808e583778aa35c7af98f5ffffffff0126020000000000001976a914b1665e71006dbfbabb69cbcdc5717b11abdb89e888ac00000000"</span></code></pre></td></tr></table></div></figure>


<p>然后得到报错:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>error message:
</span><span class='line'>66: min relay fee not met</span></code></pre></td></tr></table></div></figure>


<p>喵喵喵，怎么回事，我记得2016年的时候还是允许0.00000001的手续费的，比如下面这笔交易:</p>

<p><a href="https://blockchain.info/tx/d36a18d1fa4c6ccc4b90ab8a13dd3e55b396ac07bf7fbbee281c1025da2b86fc">https://blockchain.info/tx/d36a18d1fa4c6ccc4b90ab8a13dd3e55b396ac07bf7fbbee281c1025da2b86fc</a></p>

<p>5.没办法，我只能在createrawtransaction的时候手工指定手续费为0.000001，心痛啊，手续费是转账金额的20%~</p>

<p>然后又得到了这个错:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mempool min fee not met</span></code></pre></td></tr></table></div></figure>


<p>怒了，又去翻了一下代码，还是由mempoolminfee 决定的啊，执行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bitcoin-cli getmempoolinfo</span></code></pre></td></tr></table></div></figure>


<p>现在是够的啊，搞不明白了；不行，再等别人就转走了，得争分夺秒啊2333</p>

<p>6.只能去找几个大矿池在线广播了，我无奈的先后使用了:</p>

<p><a href="https://btc.com/tools/tx/publish">https://btc.com/tools/tx/publish</a></p>

<p><a href="https://www.blockchain.com/btc/pushtx">https://www.blockchain.com/btc/pushtx</a></p>

<p><a href="https://live.blockcypher.com/btc/pushtx/">https://live.blockcypher.com/btc/pushtx/</a></p>

<p>统统失败，悲剧了；还测试出blockcypher有个500，它的后台没处理好，直接就挂掉了；btc.com是个鬼精灵，把所有的异常一把抓，就不告诉你出了啥错；值得表扬的是blockchain.info，完美显示了bitcoin core抛出的错误，嗯嗯嗯，记住，以后可以用极小值的手续费广播来测试这几个网站的后台bitcoind 实现版本，不要干坏事哦~~</p>

<p>7.万般无奈之下我将手续费用继续提高为0.000002，然后得到下面的报错:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dust transaction</span></code></pre></td></tr></table></div></figure>


<p>一顿google之下发现0.15版本以后，bitcoin core的<a href="https://bitcoin.stackexchange.com/questions/10986/what-is-meant-by-bitcoin-dust">dust判定标准是546 satoshins</a>，这笔交易的金额正好处于这么一个微妙的位置。</p>

<p>8.一通操作之后，发现这笔钱是无论如何不能立即拿出来了；于是写个脚本暴力广播之，总有mempool size下来的时候吧，我幻想着，说不定能中奖呢23333</p>

<h4>结局</h4>

<p>昨晚有个土豪加上另外一个vout提走了，额，为了提0.00000555BTC，土豪动用了88BTC的vout作为陪练，并留下了0.00000400(高达90%) 的矿工费，交易记录在此:</p>

<p><a href="https://btc.com/d6d59802eb987fe96b9e827c07a1acff5e80ba5e9dae3f6f56f9ea427d98e585">https://btc.com/d6d59802eb987fe96b9e827c07a1acff5e80ba5e9dae3f6f56f9ea427d98e585</a></p>

<p>土豪，是在下输了。</p>

<p>这件事情挺有意思的，我相信还有很多自动机器人在hunter这几个大众抽奖地址，为了不到1分钱，真是<code>一通操作猛如虎，回头一看啥没有</code>。而且中间还有一笔流入，我放过了；作为傻逼的记录，我老老实实记一下。</p>

<p>现在minimum fee的行情是0.00001/KB，下次我得记好了，方便抽奖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云计算的诞生]]></title>
    <link href="http://happy123.me/blog/2018/09/10/yun-ji-suan-de-dan-sheng/"/>
    <updated>2018-09-10T13:39:29+08:00</updated>
    <id>http://happy123.me/blog/2018/09/10/yun-ji-suan-de-dan-sheng</id>
    <content type="html"><![CDATA[<p>有一个很经典的问题: java和javascript是什么关系？</p>

<p>然后小伙伴们是这样回答的:</p>

<!-- more -->


<ul>
<li><p>人民政府和为人民服务的关系</p></li>
<li><p>对象和对象的关系&hellip;</p></li>
<li><p>老婆和老婆饼的关系</p></li>
<li><p>苹果和苹果手机的关系</p></li>
<li><p>卡巴斯基和巴基斯坦的关系</p></li>
<li><p>印度和印度尼西亚的关系</p></li>
<li><p>黑客和博客的关系</p></li>
<li><p>北大和北大青鸟的关系</p></li>
<li><p>dog和hotdog的关系</p></li>
<li><p>人民和人民大会堂的关系</p></li>
<li><p>天真和天真热的关系</p></li>
<li><p>梁山和梁山伯的关系</p></li>
</ul>


<p>&hellip;&hellip;</p>

<p>怎么样，同志你是不是对他们的关系有了更深入的了解呢？</p>

<p>我只能说，在计算机工程领域，话语权没有掌握在傻写代码的码农手里，他们顶多就是个苦力外包民工；真正主导一门技术发展的，是天才的营销人员，尤其是：擅长起华丽的名字的那波人。</p>

<p>来来来，这只是一个引子，让我们来唠唠一个非常非常火爆的科技名词，只要这个词从你嘴里说出来，立马就能将你加成为<code>拳打比尔盖茨，脚踢苹果谷歌</code>的霸道总裁，引起台下众人的谜之膜拜。&mdash; 云计算(Cloud Computing)</p>

<p>不过，这个词是怎么来的呢？</p>

<h4>懵懂岁月</h4>

<p>云计算和Cloud Computing这个词原本在中文和英文中，都是不存在的。Cloud Computing作为一个单词，在2006年之前在英文中并不存在。2006年前后，CloudComputing这个单词开始偶尔出现。2007年末，Cloud Computing出现的频率迅速增加。2008年初，Cloud Computing在中文中开始被翻译为“云计算”。</p>

<p>有人将云计算的基本思想-共享资源，往前推到1955年。单词“人工智能”的发明者、计算机科学家John McCarthy提出了“time-sharing”理论，即不同的用户复用、分享一台计算机。那是大型主机的年代，不同用户可以通过终端使用同一台主机。到了七十年代，有了被称之为虚拟机（Virtual Machine）的东西，IBM做的。即每个VM在逻辑上拥有独立的内存、处理器，但共用同一台服务器硬件。</p>

<p>而云计算的基本思-公共信息基础设施，可以追溯到上世纪六十年代。当时，在较广泛的范围讨论过computing utility。</p>

<p>John McCarthy，还是上面这个科学家，说计算机应该形成一个公用基础设施-computer utility，就像电话网络那样。原话是这样：</p>

<blockquote><p>&ldquo;If computers of the kind I have advocatedbecome the computers of the future, then computing may someday be organized asa public utility just as the telephone system is a public utility&hellip; Thecomputer utility could become the basis of a new and important industry.&rdquo;</p></blockquote>

<p>1965年4月30日，美国电报公司Western Union发布了一篇战略计划文档，提出建立计算基础设施“computing utility“：一个全国性的信息基础设施，让订阅者便宜、高效、迅速地获取所需的信息流，以便创建商业业务和其他东西。</p>

<h4>初试啼声</h4>

<p>1995年，SUN公司提出了“Network Computer”，将当时的PC简化，以降低硬件成本，客户端的计算机具备很少的固化软件，其他的系统软件和应用软件从网络下载。Network Computer的软件不是机器代码，而是一种通用的中间代码(如Java bytecode)。</p>

<p>Technology Review的Fechar janela认为是George Favaloro和Sean O’Sullivan最早使用cloud computing这个单词。</p>

<p>1996年，那还是Netscape的年代，在康柏（Compaq Computer）的办公室里，一群技术管理者在讨论互联网业务的未来时，称之为“cloud computing”。这群人的战略颇有先见之明。他们认为，不仅所有的商业软件都会转移到网络上，而且“cloud computing”驱动的应用，比如用户文件存储在网上，也会普及。对于当时在房间里的康柏市场主管George Favaloro，和年轻的技术专家Sean O’Sullivan来说，云计算的主意将意味着与以前不同的收入。对康柏来说，这是一个每年20亿美元的生意，卖服务器给互联网服务商。</p>

<p>在1997年5月，美国公司NetCentric试图将“Cloud Computinig”申请为商标，但在1999年4月放弃了，专利号75291765。NetCentric当时准备用这个商标来进行教育服务，比如课程和研讨会。NetCentric当时正在与康柏进行一个商业计划，计划中大量使用cloud computing这个单词，并且对其的描述与后来有很多相似之处。</p>

<p>O’Sullivan的创业公司正在与康柏谈判一笔500万美元的投资，而Favaloro刚被康柏委任负责互联网服务商业务。在他们的计划书里面，有这样的业务构想：用户用18.5美元购买37分钟的视频会议，用4.95美元购买253MB网络存储，3.95美元看一场泰森的拳赛。</p>

<p>NetCentric准备做一套软件，能让ISP（互联网服务商）们实现和对数百甚至数千个这样的服务进行收费。他们称之为“‘cloud computing’-enabled applications”。当然，康柏将在方案里卖硬件。Favaloro 和 O’Sullivan谁最先说出cloud computing已经不可考了，因为两个当事人回忆不起来这个单词被说出来的准确时间。</p>

<p>他们两都同意cloud computing被创造出来，是作为一个市场营销词汇。那时，电信网络已经被用cloud来；在工程图里，一朵云就代表网络。他们需要找一个广告语，将快速发展的互联网机会与康柏的业务联系起来。Favaloro说“计算是康柏的基石，而那朵朵云正快速发展，我们需要把两者联系起来”。</p>

<p>他们的业务并不好，NetCentric也在失望中放弃了这个业务，转而推广互联网传真服务，但是最后关门了。O’Sullivan说“我们窥见了一个机会，但我们最终没有推出大量的云计算应用，这些让我难以忘怀”。</p>

<h4>浮华人世</h4>

<p>2001年，纽约时报的JohnMarkoff，写了一篇Dave Winer对微软新的.net服务平台Hailstorm的负面评价时，使用了“cloud’ of computers”一词。Hailstorm当年，被设计为整合各种设备、数据和服务，为用户提供简洁、实用的计算方案，但受制于当时的技术和应用环境，Hailstorm并没有取得成功。可以看成是Windows Azure的祖先了。</p>

<p>2006年8月9日的战略大会上，谷歌CEO施密特在与Danny Sullivan对话时，谈到广告和互联网时有一段原话：</p>

<blockquote><p>What&rsquo;s interesting [now] is that there is anemergent new model, and you all are here because you are part of that newmodel. I don&rsquo;t think people have really understood how big this opportunityreally is. It starts with the premise that the data services and architectureshould be on servers. We call it cloudcomputing – they should be in a &ldquo;cloud&rdquo; somewhere. And that ifyou have the right kind of browser or the right kind of access, it doesn&#8217;tmatter whether you have a PC or a Mac or a mobile phone or a BlackBerry or whathave you – or new devices still to be developed – you can get access to thecloud. There are a number of companies that have benefited from that.Obviously, Google, Yahoo!, eBay, Amazon come to mind. The computation and thedata and so forth are in the servers.</p></blockquote>

<p>施密特大概是第一个说出cloud computing的公众人物，并被大众媒体报道。但是，很可惜，它用这个词是为了解释互联网，用cloud computing来指代服务器-浏览器架构中的服务器。这是一种当时已经存在的技术和架构。特别的，施密说这个词时，特并不是在指一种新的技术、产品、服务、商业模式。</p>

<p>但真正让云计算落地的商业产品——亚马逊AWS EC2，即ElasticComputing Cloud，在施密特参加搜索引擎战略会议会议两周后，2006年8月24日上线，沿用了以前将Cloud指代服务器集群的含义和说法，在其新闻稿里也没有提到Cloud Computing，而是这样描述EC2和S3：Amazon Elastic Compute Cloud (Amazon EC2) is a web service thatprovides resizable compute capacity in the cloud. Just as Amazon Simple StorageService (Amazon S3) enables storage in the cloud, Amazon EC2 enables “compute”in the cloud.</p>

<p>彼时，亚马逊等还不认为Cloud Computing是一个单词，仍然用Cloud指代服务器集群。亚马逊虽然已经在2006年3月13日推出了简单存储服务S3，并在8月24日推出了被后来看作是云计算产品真正到了的EC2，但亚马逊和当时的业界并不认为Cloud Computing是一个单词。</p>

<p>到此时，亚马逊还没有使用Cloud Computinig这个单词。而且亚马逊用来命名和描述其EC2产品的用词Computing Cloud 或者“compute” in the cloud与当时在一定范围内存在的说法并没有不同。Computing Cloud也好，“compute”in the cloud也好，与施密特的Cloud Computing在技术上并没有本质不同。</p>

<p>EC2最大的不同是，它是第一个让“compute” in the cloud商业化的产品，是第一个把让公司外的用户能够“compute” in the 亚马逊的cloud。施密特的Cloud Computing停留在技术架构层面，而且指的是一个公司内部从浏览器到数据中心的“compute” in the cloud。</p>

<p>谷歌在营销上开启了cloud computing的序幕，亚马逊AWS EC2 在产品和商业模式上开启了cloud computing的序幕。</p>

<h4>一锤定音</h4>

<p>云计算的概念在2008年2009年经过无数先驱的创造、争论、整理，才形成了如今比较统一的概念和认识。</p>

<p>2011年9月，NIST（美国国家标准与技术研究所）发布了最终版的《 The NIST Definition of Cloud Computing》,标志着云计算定义的争论已经平息。这是一个兼容并包的、标准的云计算定义，总结了市面上所有云计算服务的通用特征。</p>

<h4>事后诸葛</h4>

<p>自从云计算诞生起，就不乏反对声音。比如Oracle的埃里森斥责云计算是胡言乱语，当然后来变成云的粉丝。百度CEO李彦宏称云计算为新瓶装旧酒，同时发明了框计算，当然，2015年亚马逊发布财报后，又决定搞一下云计算。</p>

<p>更多人，只是把云计算当成广告语，能贴到产品上去就好。云计算都没有拒绝，知道云计算被泛华为基于互联网的任何企业或个人服务。</p>

<p>这似乎回到了起点：云计算就是互联网，或互联网服务的服务器部分。</p>

<p>有人事后诸葛亮了：转了一圈，这云计算不还是互联网嘛，我当时就这么说的。</p>

<p>云计算在大部分时候，确实只是一个营销术语。但不幸的是，它不仅仅是一个广告词，它背后的本质、创新、技术、战略代表了一个新时代的开始。</p>

<h4>一声叹息</h4>

<p>有人创造了一个新单词新概念，却一无所获，有人无心插柳被人贴上标签，却赚的盆满钵满，怎么就这么不平等呢？</p>

<p>在笔者上学的时候，系里面有个教授数据库知识的专业老师。这位老师的特点非常明显，上课打开PPT文档，从设计原理到历史段子，滔滔不绝，绝对引人入胜。</p>

<p>在一个学期的最后一堂课上，我记得这位老师为了来一把实践，打开Win2000 SQL server，想要敲一个join的嵌套查询语句秀一下，悲剧的是电脑就是不给面子，折腾了半个小时总是报语法错，最后他只能尴尬的回到PPT讲学模式继续。</p>

<p>从此，我对哪些满口浮华词汇的人抱有深深的怀疑。</p>

<h3>广告和产品谁更重要</h3>

<p>在商业的世界里，真相并不重要，重要的是利益在哪里。</p>

<p>现在想来，这位老师早已深得<code>无招胜有招</code>的真谛。当你能通过PPT创造世界的时候，何苦亲自动手呢？有一批傻傻的码农们帮你干活呢！掌握利益才是关键！</p>

<p>这个词给我们启示就是，在某个情形下，创造出一个名词的力量，远远大于产品本身。营销也是产品的一部分&mdash;很多时候是最重要的那一部分。</p>

<h4>传说在蛮荒的魔法时代，创造一样新事物的办法就是为它想一个好名字，掌握这项技艺的人被尊称为巫术大师。</h4>

<p>少年，我想说，下次听到这样的宣传，先不要急着笑，要看看它的利益在哪里，那位大师的目的何在？</p>

<blockquote><p>朋友们，我们有一个划时代的产品，它的底层采用了人工智能技术，整合了整个股票市场100年来的大数据，并存储在区块链上，现在，我们有好几组顶尖专家看好的量化策略，正用强大的量子计算机做回归测试。更妙的是，整套系统采用光伏能源，并由石墨烯材料打造一个稳定的能量转换站，可以无限运行下去；现在，我们就等你们来投资数钱了，还等什么，马上拿起电话，拨打xxxxxx ~~~</p></blockquote>

<h4>引用:</h4>

<p><a href="http://www.infoq.com/cn/articles/romance-of-cloud-computing--part01">http://www.infoq.com/cn/articles/romance-of-cloud-computing&#8211;part01</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么不用MAC地址来定位机器]]></title>
    <link href="http://happy123.me/blog/2018/09/09/wei-shi-yao-bu-yong-macdi-zhi-lai-ding-wei-ji-qi/"/>
    <updated>2018-09-09T15:09:42+08:00</updated>
    <id>http://happy123.me/blog/2018/09/09/wei-shi-yao-bu-yong-macdi-zhi-lai-ding-wei-ji-qi</id>
    <content type="html"><![CDATA[<p>在知乎看到了这个问题，MAC地址48Bit, IP地址32Bit，完全可以用MAC划分出一个段来作为IP的映射，或者干脆不用IP了，有啥不可以呢？</p>

<p>我觉得问题挺有意思的。我推测了一下。</p>

<p>这纯粹是一个历史演变：</p>

<p>10Base 以太网[Ethernet Version 2（EV2）] 是由施乐公司出去的人发明的，后来以太网被市场承认了就纳入IEEE802标准，这是20世纪80年代的事情，那个时候就已经定义MAC地址了。</p>

<p>TCP/IP虽然最初是在1983年提出的，但是发展还是在1990年之后；另外TCP/IP也不是一个协议，而是一组协议簇，像ARP之类的和MAC地址相关的协议，很明显的，是在已有的硬件基础上开发的。</p>

<p>所以结论很明显，在早期只有局域网的时代，诞生了MAC地址这种硬件地址规定；后来联网机器越来越多，TCP/IP 成为主流联网协议，但是它的年龄和MAC地址是差不多的，也不可能再重新搞，为了适配现有的局域网模式，开发了ARP等协议；</p>

<p>计算机很多问题都是工程问题、商业问题，并不是技术完美就通吃天下，很多东西都是历史积淀、为了兼容现有系统而发展出来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[真的存在独立随机事件吗]]></title>
    <link href="http://happy123.me/blog/2018/09/09/zhen-de-cun-zai-du-li-sui-ji-shi-jian-ma/"/>
    <updated>2018-09-09T10:29:21+08:00</updated>
    <id>http://happy123.me/blog/2018/09/09/zhen-de-cun-zai-du-li-sui-ji-shi-jian-ma</id>
    <content type="html"><![CDATA[<p>比特币的block hash value一般被认为是一个真随机值，也被各种dice机制用来做seed.</p>

<p>但是我老是在想：世界上存在真正的随机吗？或者再进一步，存在真正的<code>随机+独立</code>事件吗？</p>

<!-- more -->


<p>比如大刘的小说《镜子》就幻想了一种计算模型，从宇宙大爆炸那一刻开始，设定初始条件的组合再穷举，总能得到一个宇宙状态，这个宇宙就是我们现在所处的宇宙，你就能预测所有古往今来从诞生到毁灭的一切了；照这个道道来看，如果有一天能拥有无尽的算力，模拟预测亿万的宇宙都是可以的。</p>

<p>但是<code>无限</code>这个东西实在是个逻辑上的概念，物理世界里面存在<code>无限</code>吗？又是一个挠头的问题。</p>

<p>简而言之，因为物理世界种尚未发现这样一种东西，它的存在时间无限，计算能力无限，所以才会有<code>独立随机</code>这种概念。</p>

<p>所以我觉得概率这种东西是物理学上的东东，反而不能从数学上来认知。因为它的存在根本是无法证伪的。</p>

<p>正如相对论出世之前，牛顿三定律就能很好解释地球范围内的极大多数现象了；人们由于<code>时间+算力</code>的限制，只能从统计学上承认<code>独立随机事件</code>的存在，而无法在数学上去证明。</p>

<p>瞎扯这么多，主要是我想起来几年前做过的两件消遣事：</p>

<h4>抛硬币真的事一个随机事件吗？</h4>

<p>嗨嗨，我就是这么无聊。我确实拿着一个2005年的1元硬币抛了上万次，研究抛硬币这个东西是不是真的是个随机事件。说到这里我都佩服自己了:真的是傻逼到一定境界的人。</p>

<p>结论其实很无聊，其实抛个几百次就很容易看出来，至少在一个海拔水平面上，在一个刚性物体上面抛2005年铸造的1元硬币，不是随机事件，某一面向上的机率明显更大。而且与你抛硬币的方法有很大关系。</p>

<ul>
<li><p>2005年版的1元硬币如果立起来，重心并不是平均的，一面字、一面花，中心肯定会偏向比较重的那一面；这样的话，如果你把硬币立起来，用水平旋转的方法抛硬币，肯定会有一面的概率压倒性的大</p></li>
<li><p>如果是力量比较平均的人，抛个一万次并不会对身体造成太大负荷，结合硬币的重心不平均，这就造成了抛上去掉下来的抛法肯定也是有一面向上的概率大</p></li>
</ul>


<p>这个是经过实证的，至少我可以保证，在某地、我的某个状态下，抛某个硬币，我去赌博，是很容易下注的，我知道哪面向上的概率大。</p>

<p>所以一定要小心下次跟你赌抛硬币的人，他的硬币有可能做了手脚，或者他练习过手法，或者他知道这一版硬币的重心在何方。</p>

<p>当然，你也可以反对，说我抛硬币概率巴拉巴拉，或者说一万次样本太小巴拉巴拉，或者说你一个人抛样本太小巴拉巴拉~~，总之就是基于统计学的实验无法证伪。</p>

<p>再说说我的实验B</p>

<h4>存在完全随机的数字吗？</h4>

<p>大家普遍承认计算机产生的随机数是个伪随机数。为了解决这个问题，死宅们研究出了:</p>

<p><a href="https://www.random.org/">https://www.random.org/</a></p>

<p>这种接口，利用大气随机噪音来生成随机数；当然有很多人更相信量子态的随机，用量子发生器来产生随机数等等等等；</p>

<p>这些方法共同的问题还是无法证伪，谁能保证你是真随机呢？</p>

<p>幸好有 <a href="https://primedice.com/">https://primedice.com/</a> 这样的赌博网站，好吧，我羞耻的承认，我在它上面玩了上白万盘，当然是模拟盘。</p>

<p>因为这个网站是投入真金白银的BTC，并且基于各个用户的计算机产生随机数的，0.01的误差重复1000次也足以让你归零；从它成立至今还欣欣向荣的发展势头来看，它的随机数之随机，绝对要比一些嘴炮科学家来的靠谱；毕竟，你不随机，早就倒闭了。</p>

<p>让我作为一个赌了上白万盘的资深玩家告诉大家，用最简单的赌徒谬误方法：<code>赌大小，输了加倍赌</code>，这种办法取得的最好成绩是连续54胜(如果我没记错的话)，因为它提供的模拟盘最大资金量有限制，这就是极限了。我毫不怀疑如果投注的次数足够多，可以出现连续百胜千胜的机率也是有的。当然，你赢了也没有一点用，只要不收手，总会归零，赌徒谬误在绝对随机的情况下是百分百归零的，这个在数学上很容易证明。</p>

<p>同理可以推想，难道巴菲特不是特别幸运的，连赢1000次的那个人吗？</p>

<p>这个还是无法证伪。</p>

<p>赌徒谬误在primedice上面完全失败，恰恰说明相对于彩票的胜率，primedice的胜率明显更为公平。所以我毫不怀疑区块链技术将长期服务于投机赌博行业。在<code>是否存在完全的独立随机事件</code>这个问题无法证伪的前提下，区块链博彩纯粹是数学问题。</p>

<p>我对于primedice的感激，在于它真正提供了一个让你随机测试各种谬误策略的地方，当然所有的策略都是永动机，科学上都没啥依据，仅仅有娱乐价值。</p>

<h4>悲剧的是理性的赌徒从来很少</h4>

<p>如果一个人是完全理性的，那他永远都不会去赌。他会调查出门交通安全度，吃东西注重科学养生，然后不抽烟喝酒 ~~~，然而并没有什么卵用；</p>

<ul>
<li><p>我爷爷抽烟喝酒，天天管闲事，活了九十九</p></li>
<li><p>我注重养生、天天锻炼，从来不管闲事，被911飞机砸死了</p></li>
</ul>


<p>一个赌博的场子需要传奇，疯子，人们厌倦一潭死水；这就是随机、投资、婚姻、生活等等一切人生轨迹的现实投射。</p>

<p>统计学角度上来看，活着就是瞎折腾。</p>

<p>把一个人的一生按照时间切成一段一段，每一段的生活选择都是一种独立随机事件，人自以为是能掌控生活的，其实这么看来，命运是一种统计学上的东西。</p>

<p>我又想起来那个“阿基里斯悖论&#8221;。原来我觉得这个悖论有个很明显的解答，就是时间是有粒度的，不能无限分割，当阿基里斯距离乌龟达到时间的基本粒度时，就可以一步超越它了；换算成相对论的解释，就是空间也是有粒度的，当阿基里斯追赶乌龟，实际上是两个人的加速度不一样，尺缩效应强度不一，阿基里斯在空间上越来越接近乌龟，直到达到空间上的最小粒度，之后就超越它了。</p>

<p>其实还有一个统计学意义上的解释，就是阿基里斯追赶的每一小块时间，都充斥着独立随机事件，他不论赶上或赶不上乌龟，其实只是命运的摆弄罢了。</p>

<p>人生苦短，导致投机，真的很悲剧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读<价值平均策略>随想]]></title>
    <link href="http://happy123.me/blog/2018/09/08/du-jie-zhi-ping-jun-ce-lue-sui-xiang/"/>
    <updated>2018-09-08T17:26:51+08:00</updated>
    <id>http://happy123.me/blog/2018/09/08/du-jie-zhi-ping-jun-ce-lue-sui-xiang</id>
    <content type="html"><![CDATA[<p>周末读了<a href="source/_posts/2018-09-08-du-jie-zhi-ping-jun-ce-lue-sui-xiang.markdown">《价值平均策略》</a> 这本书，又生出一些无厘头的想法，记录一下。</p>

<p>这本书短小精悍，通篇探讨比较了三种定投策略，并用1926-1990年的美股市场数据进行了回测。</p>

<!-- more -->


<p>首先大多数人都已经承认了市场是难以战胜的，择时择股是一种超能力，可望不可及。散户唯一的机会就是定投指数基金。定投规避择时，指数规避择股。</p>

<p>然后现在市面上充斥着各种指数增强策略，国外也被称为聪明贝塔基金之类的；在作者看来，这些策略天花乱坠，却远不如他在九十年代就总结的三大套路。</p>

<p>这三大套路相信每一个有投资经验的人都会自己有意无意实践过，但是作者将其实证主义，并升华到理论，就十分难得了。</p>

<h4>等量份额策略</h4>

<p>每月购买一定量的股票份额，无论股票（或基金，或其他任何投资标的）是什么价格，持有品种的平均购买成本就是投资期间的市场平均价格。</p>

<h4>币值平均策略</h4>

<p>每月购买固定数量资金的投资标的，不管市场价格如何变化。</p>

<h4>价值平均策略</h4>

<p>一种更具弹性的公式化投资策略。价值平均策略关注的不是每月固定投入多少金额，而是每月投资标的的市值固定增加多少。</p>

<p>举个例子来看：目标不再是基金定投1000/月，而是基金市值固定增加1000/月。1月买入1000元基金；2月市场下跌，当月基金市值800元，再买入1200元，确保目标市值达到2000元；3月市场上涨，当月基金市值2750元，再买入250元即可；4月市场继续上涨，当月基金市值4363.63元，超过目标市值，赎回363.63元的基金</p>

<p>这种策略就是币值平均策略的加强版，其逻辑就是<code>跌的多就加仓，涨的多就少买</code></p>

<h2>对比</h2>

<p>首先三种策略都是保证了纪律性，这是定投的最大优点。</p>

<p>然后收益回测基于不同的时间点和时间段肯定会得出不同的结论，作者在做了非常精细、大量的比较后，从总体概率上得出结论</p>

<h4>短期(1-5年)</h4>

<p>完全无法预测，三种策略互有胜负。从胜率上来看，价值平均策略>币值平均策略>等量平均策略，因为相差实在不大，我认为这种统计上的结论缺乏可信度，可能只是一个随机游走而已。</p>

<h4>中长期(>50年)</h4>

<p>从胜率上来看，价值平均策略>等量平均策略>币值平均策略。为什么等量平均策略会胜于币值平均策略呢，是因为通胀的影响，越是后期，同样的价格买到的资产份额越来越少，这个时候等量平均策略的优势就显现出来了，它能够跟随通胀调整投入资金，就会跑赢币值平均策略。</p>

<p>通胀是一个非常重要的因素，等量平均策略在一个通胀的社会中显现优势，那么如何增强其它两种策略呢？答案是引入一个通胀因子，每年对投入的资金额或资产标的额做微调，这样其它两种策略就能稳稳胜过等量平均策略了。</p>

<p>通缩社会，道理也是一样的。</p>

<p>这么简单看来，等量平均策略因为每次需要的资金量不能准确的预估，在中长期投资方案中就有劣势了。</p>

<p>下面我们再来看看币值平均策略和价值平均策略。</p>

<p>首先说结论，作者的回测中，价值平均获胜的概率是优于币值平均的。想想道理也很简单，就是市场下跌的时候，价值平均买的更多，市场上涨的时候，价值平均策略买的少一点，这样整体成本会低一点。另外，除了像币值平均策略设定止盈点，价值平均策略还相当于是每次定投的时候也设立了一个弹性的止盈买入策略，所以表现好理所当然。</p>

<p>但是，价值平均策略有两个明显的缺点：</p>

<ol>
<li><p>定投后期，市场大幅下跌的时候，可能一次定投需要的资金是以往的几十倍计算，这样对资金流、人性考验非常大</p></li>
<li><p>如果是一个非常非常大的牛市，每次定投的止盈买入限制反而会拖累总体收益；比如像数字货币这样的标的，市场波动非常大，如果在后期扛不住，那就前功尽弃了。</p></li>
<li><p>总结下来，如果你是一个资金流非常充裕，精于计算，心理承受能力强的人，宜选择价值平均策略。</p></li>
<li><p>如果你是个稳健主义，投入的资金流已经算好了，并且对于市场波动承受能力差，宜选择币值平均策略</p></li>
<li><p>如果你认为自己的定力是万里挑一，投资的品种是茅台或者格力这样的万里无一的标的，可以在上涨的时候执行币值平均，下跌的时候执行价值平均，总之就是尽可能买买买。</p></li>
</ol>


<p>ToolTip: 在我看来，定投的最大优势就是用纪律来战胜人性，大部分人的定力并不像是自己想象的那么好，所以我认为币值平均策略是一个更大众稳妥的策略。</p>

<p>最后加上我们前面提到的通胀因子，可以每年提高一下定投金额，这样基本上就是一个稳健的投资策略了。</p>

<p>当然有更多的因子和手段可以加入，比如投资A股，在选定一个策略基础上，可以参照PE、PB、ROE等等等等去设置每次投资币值，每次投入设置一个上下限等等，这个因人而异，没有绝对真理。</p>

<h2>止盈</h2>

<p>不论哪种策略，止盈都是关键；盈利十倍没有止盈也是浮云；看看A股市场的历史过山车就知道了，现在可选的流派一般是且战且退：</p>

<ol>
<li><p>盈利>50%了，撤退50%资金</p></li>
<li><p>盈利又>80%了，再撤退20%资金</p></li>
<li><p>盈利翻倍了，跑路</p></li>
</ol>


<p>等等等等~~~</p>

<p>当然以上都是比较成熟的市场里面的回测表现，我把这些理论套用在比特币这样的历史数据回测中，发现哪个策略都影响不大，关键就是止盈。</p>

<p>因为这种市场的波动太巨大了，一波突如其来的泡沫会让人手足无措。用币值定投，期望收益50%，从2013-01-01开始，最长的达成实践大概在430天，最短只有1.5天；如果2013年8月份泡沫期起定投了4年，一直到2017年3月份，收益>400%了，问题是根据研究，能一直承受100%的波动，并等到400%收益的人，万中无一。更可怕的是，如果你拿到2017-12，收益超过2000%；</p>

<p>所以不用抱怨，在A股市场上，涨跌十倍的个股比比皆是；不用被哪些号称十倍百倍的收益的人蒙蔽了，大多数人就是在赌博而已，而且是很随意的赌博。</p>

<h2>模拟策略</h2>

<p>假设作为一个稳健的赌博选手，如果要去赌数字币，我们总结了种种策略之后，可以设计如下方案：</p>

<h3>方案1</h3>

<h4>总纲</h4>

<ul>
<li><p>总投资额永远不要多于总现金流的25%</p></li>
<li><p>耐心是美德</p></li>
<li><p>坚持纪律是保障</p></li>
<li><p>只要买的足够便宜，最终一定能回本，但是注意不要买到毒气弹</p></li>
<li><p>分批次操作，不要一把梭</p></li>
</ul>


<h4>入场</h4>

<ul>
<li><p>要早，或者已经走完一个完整的周期，至少可以看清楚现在是在历史的哪个位置。如果现在看不清在周期的哪个地方，要耐心</p></li>
<li><p>分成100次来投，每次1%，坚持币值平均策略</p></li>
<li><p>不要怕波动，只要认清价值，一定会在25次之内有收获</p></li>
<li><p>投资周期至少要覆盖这个市场历史波动的一个完整周期</p></li>
</ul>


<h4>止盈</h4>

<ul>
<li><p>要在风险可控的情况下实现盈利</p></li>
<li><p>分成六次来止盈， 每次盈利 10%, 20%, 40%，80%, 160%, 320%的时候出清</p></li>
<li><p>分成六次来止盈， 抛售的时间要覆盖半个周期，中间有波动的时候，比如以一次抛售盈利10%，但周期内没有到20%，不要恋战，10%已然很高</p></li>
</ul>


<h4>撤退(万不得已的时候)</h4>

<ul>
<li><p>首先不要怕波动，只要认清价值，一定会有收获</p></li>
<li><p>不要一次撤退，要边打边撤</p></li>
<li><p>分成五次来撤， 每次损失 10%, 20%, 30%，40%, 50%的时候撤退</p></li>
</ul>


<p>用上面的策略做一下历史回测，发现结果是这样的:</p>

<p>基于以下历史数据(2013-02-11&mdash;2017&mdash;11-02)回测制定定投策略</p>

<p>每日定投$100，达到4%的点止盈回撤，平均定投周期为29.89天，最长盈利周期为487天，其中76.941%的概率会在30天内止盈。</p>

<p>定投最差的入市点是2014年中国政府打压市场时期，此时有几项注意</p>

<ul>
<li><p>第一次大跌是不要怕，一般会有离场的机会，但要快</p></li>
<li><p>一旦离场，不要恋战，静候下次入场时机</p></li>
<li><p>入场时间和出场时间是关键，这个数据要及时准确分析</p></li>
<li><p>一次币灾2个月后，市场横盘，这个时候入场最安全</p></li>
<li><p>最完美的定投时机永远是在市场下跌的时候</p></li>
</ul>


<p>所以假设你是一个超级稳健派，在方案1的基础上我们再对细节进行修正，得到方案2增补条例</p>

<h3>方案2增补</h3>

<ul>
<li><p>经过统计，每次4%定投止盈是个合适的数字，另外我们的资金池来自于货基，也有一部分收益，IRR来计算，理想情况下，年收益会达到40%</p></li>
<li><p>具体的交易时间需要进一步量化，采取早晚两段时间交易</p></li>
<li><p>周期最长为500天，可动用资金为30w元，每日可定投600元，保守起见，第一轮定投先保证在500元/天，计算收益为<code>5000 * 300 * 0.4 = 60000</code>，验证此策略稳定后，资金可翻倍</p></li>
<li><p>40天内4%止盈，在70天内5%止盈，在100天内8%止盈，250天内10%止盈,超过250天，根据历史经验看，我们中彩了，此时一般需要400天才能取得10%的盈利，所以推荐死扛至40%止盈;</p></li>
<li><p>市场行情变动巨大时(测算定投回本周期越来越短)，此时一般是币价接盘之时，当定投周期缩小至3天之内时是个绝对危险的信号，此时不论持仓如何，绝对不可开始新周期，如果此时无亏损，宜空仓</p></li>
</ul>


<h4>风险</h4>

<ul>
<li><p>投入资金量的占比过大，会使判断力下降，以上计划最大投入资金为总资金流的30%，超过警戒线，但是从定投平均周期来看，并不多</p></li>
<li><p>跑路风险，每5000元资产计提一次来规避</p></li>
<li><p>归零风险，比如毁灭性BUG，币值归零</p></li>
</ul>


<p>这个策略在尽可能规避风险的基础上追求30%~40%的年收益，并且我们认为时间控制在400天内。(当然真正的赌徒会说，你是在逗我？像这种郁金香市场，风险巨大，你才要个40%？！ 我要百倍千倍，我全都要！)</p>

<p>少年，你写了很多量化回测程序，画了很多Excel曲线，得到了完美的回测数据，最后信心满满的上了这个策略，然后开始做梦，以上是不是看起来很美好呢。</p>

<h1>以上全错，所有的策略都是投机，你只是在赌博而已</h1>

<p>让我们再复习一下奥马哈先知的训诫:</p>

<ol>
<li><p>如果能从历史推测未来，那么最富有的人都是图书管理员 (你在看着后视镜开车)</p></li>
<li><p>加密货币最后的结果是会很糟的，因为他们没有产生任何跟这个资产相关的价值。这没什么不对的。如果你想赌一把，明天就会有人来并愿意付更多的钱，这就是赌博的一种。这不是投资。它是老鼠药的平方。(你选了一个郁金香资产标的)</p></li>
</ol>


<p>以上的方案有两个非常明显的特征说明你在赌博：</p>

<ol>
<li><p>不管是哪个国家的股市，长久来看，年回报率总是趋近于ROE，也就是12%;这世上大部分的生意，ROE超过12%的少之又少；所以芒格才一直强调12%是个可以慢慢赚的钱；所以看到诸如400天、40%这样的字眼，毫无疑问就是赌博，连投机都算不上</p></li>
<li><p>所有用历史数据做回测的量化策略都是赌博；如果巴菲特是靠回测赚钱的，你也无法确认他是不是一个特别特别的幸运儿</p></li>
</ol>


<p>只要是赌博，不论你赢了多少次，只要不离场，总会有黑天鹅来给你清零。</p>

<h3>哈，我知道你肯定会反驳，理由嘛，可以写一本书哦。我有无聊的琢磨了一下，赌徒投机，人性使然；</h3>

<p>当然也可以这么想，其实人活着这件事本身就是在不停的赌，科学的讲，我们活着的状态其实是一堆随机独立事件的集合；扩展开来，什么人类社会啊，国家政治啊，民族风俗啊，乃至地球的存在，宇宙的诞生，都是一堆随机独立事件的集合而已哈</p>

<h4>投机和投资如何区分，投机抑或是投资是如何诞生的？</h4>

<p>我一直对投机和投资如何区分抱有非常大的疑问。</p>

<p>比如巴菲特，大家都承认他是古往今来伟大的投资家。也有不少人觉得你就是持有资本，什么生产性的活动也不干，就是买卖公司和资产，然后投机成为巨富，大家对这种人总抱有敌视的态度，当然股民亦如是。</p>

<p>社会财富的积累其实取决于交易，而不是生产；这个看似违反直觉的结论已经被奥派经济学阐述了无数遍了，在此不赘言。</p>

<p>我关心的是，谁能保证巴菲特不是那个一直赢的幸运赌徒呢？他不过是特别特别幸运而已，毕竟，从概率上讲，整个人类社会，出现几个赌运特别好，一直赢到死的人也不是不可能。</p>

<p>关于这个问题，我想又可以写一篇洋洋洒洒的无聊论文，不过先打住，我们看看巴菲特是如何看待自己的交易策略的：</p>

<p>巴菲特本人作为靠资本获利的人，其实非常非常看空黄金等贵金属，还有他对大多数金融衍生品嗤之以鼻，看看他的说法：</p>

<blockquote><p>第二类投资包括的资产是指那些实际不产生任何收益，但买家在认为其他人未来会为此支付更高的价格的期望下所购买的资产，这些买家也清楚这些资产永远不具有生产性。17世纪的郁金香就是此类买家的最爱</p>

<p>这类投资要求有足够容量的买家市场，而这些买家受到诱惑是因为他们相信这一购买市场将持续扩大。持有者并非被这些资产的生产力所激励，这些资产永远不会生产，而是坚信他们在未来会对其更渴望。这一类别最主要的资产就是黄金，后者是对其他所有资产（尤其是货币）恐惧的投资者的最爱。然而黄金有两个显著的缺点，用途不广且不具有生产性。确实，黄金有一些工业和装饰的用途，但此类用途的需求优先，且不足以吸收新的产量。同时，如果你一直持有一盎司黄金，到最后你将仍然只拥有一盎司</p>

<p>今天，全球黄金储量约17万公吨。假如把它们熔铸成一个每面约68英尺的立方体。（设想它可以轻轻松松地放在一个棒球内场。）如果每盎司黄金价格1750美元，也就是我写下这些内容时的金价，这个立方体的价值大约9.6万亿美元。我们称它立方体A。</p>

<p>然后来创造一个和立方体A价格相同的立方体B。为此，我们要买下美国所有的耕地（4亿英亩，年产值2000亿美元），以及16家埃克森美孚公司（全球利润最高的公司，年利润超过400亿美元）。买下这些以后，我们还有1万亿美元可以用来零花。你能想象到，一个9.6万亿美元在手的投资者会选立方体A还是立方体B？</p>

<p>我自己最青睐的——你知道，就要讲到了——是我们的第三类资产：投资于有生产力的资产，无论是企业、农场，还是房地产。在理想的情况下，这些资产应该能在通胀时期让产出保持自身的购买力价值，同时只需要尽可能最少的新增资本投入。农场、房地产和可口可乐、IBM这样的很多企业，以及我们自己的See&rsquo;s  Candy（译注：逾90年历史的美国老牌糖果与巧克力食品公司）都能满足这双重考验。其他特定的公司——比如我们那些受管制的公共事业公司——都不能通过上述考验，因为它们在通胀的环境下需要大量资本。为了增加收益，它们的所有者必须增加投资。即便如此，第三类投资也仍会超越毫无生产力和以货币为基础的资产</p></blockquote>

<p>这段话毫无疑问的说明了，巴菲特将黄金、钻石或者诸如此类的数字货币都看成是郁金香的一种而已</p>

<p>其实挺好玩的，一个靠交易积累财富的人，最看重的是生产。</p>

<h4>思维锻炼一下，考虑一下交易的起源。</h4>

<p>农耕时代，消费和投资肯定是一件简单的事情。</p>

<p>你有一个梨子，我有一个苹果，各取所需，交换即可。</p>

<p>你有一片土地，我想要共同耕种，一筐苹果+牛羊若干，入伙即可。</p>

<p>后来，两两交换已经不能满足需求，于是有了集市，有了分工，有了商业。</p>

<p>参与这一切的人多了，世界就复杂了起来。</p>

<p>慢慢的，欺诈出现了，法律出现了，警察出现了，集镇出现了，交易所出现了，货币出现了，银行出现了，证券市场出现了，然后更大的欺诈，更多的警察，更完善的法律</p>

<h3>更复杂的世界。</h3>

<p>发展到今天，所有的制度、市场终究是解决“你有一个梨子，我有一个苹果”资源合理配置的问题。</p>

<p>税收、法律、中间人、券商等等等等不过是损耗，简单问题复杂化后的损耗。</p>

<p>问题是，参与的人越多，原本简单的问题就会越复杂。</p>

<p>最成功的投资，是自己有苹果，没有任何成本损耗的情况下换取了那个梨子。</p>

<p>有几个办法可以降低损耗：</p>

<ol>
<li><p>你有耐心，耐心的等待那个有梨子的人到你家门口。像火车上找座位一样，只要你有耐心，无限的等下去，总会找到位子。</p></li>
<li><p>你找到一个市场，这个市场还停留在农耕时代，还有人拿着梨子等苹果。这个市场必须足够简单，而且发展的时间很短，所以参与的人少。</p></li>
<li><p>你有很多苹果，满世界瞎换，可能换到樱桃，可能换到香蕉，但是概率总会让你拿到梨子的。</p></li>
</ol>


<p>1是价值投资，2是天使投资，3是风险投资</p>

<p>人最容易做到的是价值投资，但是人的生命太短，很可能你一生等不到那个梨子。所以敢于拿一生去下注的人很少。巴菲特是那个特别有耐心，运气特别好，用一生去下注并拿到了好几个梨子的人。</p>

<p>人最常做的是风险投资，满世界寻找机会，瞎操作，然后手持一堆的樱桃香蕉就是等不到梨子，然后还是怀着乐观的心态继续瞎操作，总体上来看，这不过是把生命切成一段一段，然后分配到了风险更大的赌博当中。</p>

<p>最后就是你找到了一个足够简单的市场，初期看起来是骗人的，怎么可能在工业时代还有这么傻的市场，他们还刀耕火种，集市上大吆喝来两两交换。你疑惑，你学习，你尝试，最后相信了：这确实是个萌芽市场。 数字货币就是这样的例子。</p>

<p>最后，时刻记住，人的生命中99%的时间是不用去投机的，你只需要做一件事情：</p>

<p>找到那个足够简单的市场，交换，然后不动，耐心，即可。</p>

<h4>所谓投资，其实就是和时间的博弈。当你拿出的筹码小于这段时间的价值之时，就是投机。</h4>

<p>在你生命中的99%，你总是会面临很多很多的诱惑，诱惑你去投机。</p>

<p>我很悲哀的告诉你，年轻人，最后你总是会输的很惨。</p>

<p>但是人就是这样的傻瓜，明知道前面是深坑，总是想去跳进去，试错。“我是不一样的”。</p>

<p>嗯，投机越年轻越好，因为那时你还输得起。</p>

<p>如果你要投机，年轻人，记住下面几件事情：</p>

<ol>
<li><p>你最后肯定会输的，不过是输的很惨和输的非常非常惨两个结果。可是，谁又能说得清呢？也许人只要活着，面对命运就是注定的输家。</p></li>
<li><p>市场深度要足够，一定要保证流动性</p></li>
<li><p>永远不要与&lt;100单的对手交易</p></li>
<li><p>单笔交易金额一定要设置上限</p></li>
<li><p>要专注，永远不要同时操作>2笔交易</p></li>
<li><p>每次大额交易之前，要用小笔资金做回归测试</p></li>
<li><p>一个公司股权质押的方式融资，杠杆率就会加大，这支股票的风险就会成倍增长</p></li>
<li><p>总投入资金量的占比过大，会使判断力下降；如果你的投入超过总资产的25%，人就会变傻，傻子就会犯错；永远永远不要让自己犯傻</p></li>
<li><p>记住，你很笨，你的优势就是知道你是个笨蛋，知道自己是个笨蛋会让你小心</p></li>
<li><p>想要投机的时候，看看1</p></li>
</ol>


<h4>最后，读完了整本书，瞻仰了各种策略之后，仔细一看，整本书不过还是那么一句话:&ldquo;不要投机&rdquo;</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从WebAssembly说开去]]></title>
    <link href="http://happy123.me/blog/2018/08/25/cong-webassemblyshuo-kai-qu/"/>
    <updated>2018-08-25T11:14:39+08:00</updated>
    <id>http://happy123.me/blog/2018/08/25/cong-webassemblyshuo-kai-qu</id>
    <content type="html"><![CDATA[<p>科技界历史循环，轨迹无法量化预测。</p>

<p>前几天看到bellard都在浏览器里面用WebAssembly跑虚拟机了，点进去试试，竟然模拟Win2000都有模有样了。</p>

<p><a href="https://bellard.org/jslinux/index.html">https://bellard.org/jslinux/index.html</a></p>

<p>不由得感叹人折腾的能力真是无比强大。</p>

<!-- more -->


<p>有人说WebAssembly又实现了一个Flash，又实现了一个SliverLight，又造了一个JavaApplet，我都想到很久很久之前的ActiveX了，想到COM组件了~~~</p>

<p>肯定又会有人跳出来说，这回不一样了:</p>

<ol>
<li><p>谷歌、苹果、微软等公司一起来干了</p></li>
<li><p>前端拯救世界，前端用Nodejs打入后端，后端用WebAssembly征服前端~~</p></li>
<li><p>就连技术媒体都开始用吸睛标题：&lt;WebAssembly:解决 JavaScript 痼疾的一颗银色子弹？></p></li>
</ol>


<p>我得说，技术路线的发展完全是随机的，无迹可寻。</p>

<ul>
<li><p>比如当初Flash就被乔帮主活活说死了，说你不行行也不行。</p></li>
<li><p>比如Plan9搞了一堆创新之后死翘翘了，根本就没几个人去在意</p></li>
<li><p>比如苦大仇深的GUI方案，MS推出了一系列库，从MFC、WTL到所谓的WPF，从各类公司的私有解决方案，到现在还在服役的大名鼎鼎的Duilib;最后就不提历史风尘中的各类商业皮肤库了；</p>

<p>   还有开源界的各路GNome、wxWidgets、QT、TCL，到现在跨平台GUI方案的战火都烧到浏览器上了，VS Code用啥实现的，竟然是Electron；虽然效果拔群，但是总觉得哪里不对路啊；</p></li>
<li><p>从移动手机刚刚兴起的年代，就有无数种解决方案发誓要做到&#8221;一次编写，到处运行&#8221;，兼容各大主流移动平台；如今看看，口号依旧，分裂依旧，半死不活依旧</p></li>
<li><p>为什么历史选择TCP/IP而把ISO模型扫进教科书</p></li>
<li><p>为什么IE打败Netscape</p></li>
<li><p>为什么KVM逐渐压倒Xen</p></li>
</ul>


<p>历史只是偶然，成败听凭运气，没有什么道理好讲的。</p>

<p>我只能根据有限的经验来预言：任何一种号称&#8221;大一统方案&#8221;的方案最后总是失败。</p>

<p>让我们再大声诵读伟大的Fred Brooks先知的预言：没有银弹，没有银弹，没有银弹~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非烫即屯]]></title>
    <link href="http://happy123.me/blog/2018/08/25/fei-tang-ji-tun/"/>
    <updated>2018-08-25T09:34:43+08:00</updated>
    <id>http://happy123.me/blog/2018/08/25/fei-tang-ji-tun</id>
    <content type="html"><![CDATA[<p>好久没有打开过VC++了，今天为了修改一个远古控件打开了久违的VC++，DEBUG模式下又看到了久违的&#8221;烫烫烫烫烫&#8221;~~~~</p>

<!-- more -->


<p>VC runtime debug version会把stack初始化成0xcc，unicode中0xcccc(双字节)就是中文的烫。如果你开了个char[]，然后最后一个字符忘了设置成0x00，然后去printf这个字符，那么整个stack从这个局部字符数组开始都输出到console，就变成了“烫烫烫烫烫”。</p>

<p>为啥把stack初始化成0xcc而不是0x00呢？是因为0xcc在intel x86芯片指令集中代表int 3，也就是debug中断，该指令会自动把程序停在单步调试状态，然后去寻找系统中注册的调试器，如果找不到调试器，那么就会终止程序。这一开始是为了调试栈缓冲溢出错误的。如果出现溢出，并且代码尝试执行缓冲中的指令，就会进入单步调试状态。</p>

<p>这是debug version, 那么release verion呢？发布版会把栈初始化成0xcd，这个就是imm8，就是立即中断退出的意思。这时候因为运行在用户机器上，没有调试器，也不希望用户来调试你的程序。0xcdcd就是中文的“屯”字。你会看见一些写的超烂的程序经常会出现“屯屯屯屯屯屯”。的确挺屯的，</p>

<p>在今天这个芯片DEP，操作系统NX锁定双保险的时代，这种初始化已经没有啥必要了，这个烫屯还存在纯粹是历史原因。</p>

<p>所以在那个电脑还比较古早的年代，说人品不好，那叫非奸即盗。说程序写的烂，那叫非烫即屯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[史上最可怕的赌局FOMO3D(4)]]></title>
    <link href="http://happy123.me/blog/2018/08/22/shi-shang-zui-ke-pa-de-du-ju-fomo3d-4/"/>
    <updated>2018-08-22T20:07:49+08:00</updated>
    <id>http://happy123.me/blog/2018/08/22/shi-shang-zui-ke-pa-de-du-ju-fomo3d-4</id>
    <content type="html"><![CDATA[<p>呵呵，FOMO3D 第一轮今天结束了，奖金10469ETH。</p>

<p>惊奇的是最后的<a href="https://etherscan.io/tx/0xe08a519c03cb0aed0e04b33104112d65fa1d3a48cd3aeab65f047b2abce9d508">幸运儿</a>并没有买断最近的块或是依赖DDOS获胜，他纯粹是涓滴投注的策略流获胜。</p>

<p>但是打包这笔交易的区块非常可疑，这个区块中貌似只有一笔交易是发送给FOMO 3D long的，也不能排除是矿工玩这个游戏只打包自己的投注的可能性。</p>

<p>这个块是鱼池打包的，鱼池一直是以太坊的算力霸主。</p>

<p>如果真的是鱼池获胜的话，也说明即使是以太坊，大矿池在没有监管，垄断算力的情况下，做任何事情都有巨大的优势。虽然我一直觉得POW优于POS，但是现在我认为V神的顾虑有道理，我也希望能尽快看到以太坊切换到DPOS之后的运行状况。</p>

<p>总之，最后并没有出现全部算力涌出竞争最后几个块的局面，没有黑天鹅的黑天鹅。</p>

<p>这证明了P3D 以及衍生的FOMO3D的玩家其实还不多，即使已经吸纳了近100,000个ETH，还只是一个小众游戏。</p>

<p>很快FOMO3D就会沦为一个平庸的庞氏骗局Game Over。但是P3D最终会怎样呢？</p>

<p>我认为会有一个沉寂期，然后在一个意想不到的时机又吸引一波赌徒入场。</p>

<p>PS:加一个技术流分析:<a href="https://paper.seebug.org/681/">智能合约游戏之殇——类 Fomo3D 攻击分析</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[巴菲特致股东的信 1957-2018 中英文整理]]></title>
    <link href="http://happy123.me/blog/2018/08/14/ba-fei-te-zhi-gu-dong-de-xin-1957-2018-zhong-ying-wen-zheng-li/"/>
    <updated>2018-08-14T14:19:43+08:00</updated>
    <id>http://happy123.me/blog/2018/08/14/ba-fei-te-zhi-gu-dong-de-xin-1957-2018-zhong-ying-wen-zheng-li</id>
    <content type="html"><![CDATA[<p>我非常奇怪网上并没有找到一本比较完整的伯克希尔.哈撒韦每年致股东公开信的整理集。</p>

<p>伯克希尔.哈撒韦的官网上只有1977-2018年的的PDF整理，至于中文没有比较权威的翻译，大多是零零碎碎的整理。</p>

<p>巴菲特先生的信徒如此之多，衍生出来的网红书籍数不胜数，为什么没有一部研究伯克希尔.哈撒韦每年致股东公开信的专著呢？期待有人能整理出来。</p>

<p>我花时间整理了网上公开的翻译合集供大家下载：</p>

<p><a href="https://pan.baidu.com/s/1MLVlbasNe7ADHqSOKKtOlg">https://pan.baidu.com/s/1MLVlbasNe7ADHqSOKKtOlg</a></p>

<!-- more -->


<p>压缩包中共有:</p>

<ol>
<li>巴菲特致股东的信_1957_2018_zh (中文版)</li>
</ol>


<p>收集了1957-2018年伯克希尔哈维撒每年致股东公开信。</p>

<p>1977年之前的文档残缺不全，有部分直接为英文版没有翻译，1977年之后全翻译，但是资料来源不一，质量良莠不齐</p>

<ol>
<li>巴菲特致股东的信_1957_2018_en (英文版)</li>
</ol>


<p>收集了1957-2018年伯克希尔哈维撒每年致股东公开信英文原版。</p>

<p>其中伯克希尔・哈撒韦的官网上只有1977-2018年的的PDF整理，之前的资料我google而得，不能保证权威和准确性；</p>

<ol>
<li>zh 文件夹</li>
</ol>


<p>中文版翻译每年一个pdf文件</p>

<ol>
<li>en 文件夹</li>
</ol>


<p>英文版整理:</p>

<p>1977-2018 每年一个pdf文件，此为伯克希尔・哈撒韦的官网版本；</p>

<p>1970-1976 每年一个pdf文件，此为google资料所得，不保证权威性</p>

<p>1957-1970 一个合集pdf文件，是国外经管资料整理所得，不保证权威性</p>

<h3>参考资料：</h3>

<ul>
<li>伯克希尔.哈撒韦的官网:</li>
</ul>


<p><a href="http://www.berkshirehathaway.com/letters/letters.html">http://www.berkshirehathaway.com/letters/letters.html</a></p>

<ul>
<li>伯克希尔.哈撒韦推荐的整理资料图书</li>
</ul>


<p><a href="https://www.amazon.com/Berkshire-Hathaway-Letters-Shareholders-Buffett/dp/0615975070/ref=sr_1_fkmr0_1?s=books&amp;ie=UTF8&amp;qid=1511796222&amp;sr=1-1-fkmr0&amp;keywords=berkshire+hathaway+letters+to+shareholders%2C+2014">Berkshire Hathaway Letters to Shareholders</a></p>

<h2>巴菲特老先生的名言警句(有些实在是太逗了，读起来真像是听相声一样，即使已经了然于心还能把你逗得乐不可支)，纯享受:</h2>

<ul>
<li><p>一个公开的民意测验无法代替思考。</p>

<ul>
<li>A public-opinion poll is no substitute for thought.</li>
</ul>
</li>
<li><p>你必须独立思考。我常常惊讶于：一些智商极高的人在市场上无意识的跟随大众。我从没通过和别人谈话得到过好的主意。</p>

<ul>
<li>You have to think for yourself. It always amazes me how high-IQ people mindlessly imitate. I never get good ideas talking to other people.</li>
</ul>
</li>
<li><p>我相信，坦诚的公司的管理层会使投资人受益。那些在公开场所误导别人的CEO最终会在私下里误导自己。</p>

<ul>
<li>We also believe candor benefits us as managers. The CEO who misleads others in public may eventually mislead himself in private.</li>
</ul>
</li>
<li><p>在你雇用人之前，你需要确认他的三项素质：正直诚实，聪明能干，精力充沛。但是最重要的是正直诚实，因为如果他不正直诚实而又具备了聪明能干和精力充沛，你的好日子也就到头了。</p>

<ul>
<li>In looking for someone to hire, you look for three qualities: integrity, intelligence, and energy. But the most important is integrity because if they don&rsquo;t have that, the other two qualities, intelligence and energy, are going to kill you.</li>
</ul>
</li>
<li><p>与其杀死毒龙，不如避开毒龙。</p>

<ul>
<li>It&rsquo;s easier to stay out of trouble than it is to get out of trouble.</li>
</ul>
</li>
<li><p>如果你在小事上无原则，那么大事上一样没有原则。</p>

<ul>
<li>If you let yourself be undisciplined on the small things, you will probably be undisciplined on the large things as well.</li>
</ul>
</li>
<li><p>和一个道德品质败坏的人，无法完成一桩好交易。</p>

<ul>
<li>You can&rsquo;t make a good deal with a bad person.</li>
</ul>
</li>
<li><p>对于企业而言，糟糕的运作加上混乱的管理，结果常常是一笔糊涂帐。</p>

<ul>
<li>The reaction of weak management to weak operations is often weak accounting.</li>
</ul>
</li>
<li><p>人性的弱点总是充满贪婪、恐惧或者是愚蠢，这是完全可以预测的，但是我们无法预测这种人性弱点的发生顺序。</p>

<ul>
<li>The fact that people are full of greed, fear, or folly is predictable. The sequence is not predictable.</li>
</ul>
</li>
<li><p>我在历史中学到的唯一东西就是：大众从未从历史中汲取教训。（11月17日名言）</p>

<ul>
<li>What we learn from history is that people don&rsquo;t learn from history.</li>
</ul>
</li>
<li><p>永远不要问理发师你是否需要理发。</p>

<ul>
<li>Never ask a barber if you need a haircut.</li>
</ul>
</li>
<li><p>交易市场就像上帝一样，帮助那些自助者。但是和上帝不同的是，交易市场不会原谅那些不知道自己在做什么的人。</p>

<ul>
<li>The market, like the Lord, helps those who help themselves. But unlike the Lord, the market does not forgive those who know not what they do.</li>
</ul>
</li>
<li><p>当市场下跌时，你轻易的将好东西打折变卖，但是一旦市场向上，再想买回来，难之又难。</p>

<ul>
<li>You can always juice sales by going down-market, but it&rsquo;s hard to go back upmarket.</li>
</ul>
</li>
<li><p>投资人必须谨记，你的投资成绩并非像奥运跳水比赛的方式评分，难度高低并不重要，你正确地投资一家简单易懂而竞争力持续的公司所得到的回报，与你辛苦地分析一家变量不断、复杂难懂的公司可以说是不相上下。</p></li>
<li><p>我和查理还没学会如何解决公司的难题，但是我们学会了如何避开难题，我们的成功在于我们集中力量于我们能跨越的一尺栅栏上，而不是发现了跨越七尺栅栏的方法。　</p></li>
<li><p>近年来，我的投资重点已经转移。我们不想以最便宜的价格买最糟糕的家具，我们要的是按合理的价格买最好的家具。</p></li>
<li><p>几乎在任何领域，专业人员取得的成就明显地高于门外汉。但在金钱的管理上往往并非如此。</p></li>
<li><p>不能承受股价下跌50％的人就不应该投资。</p></li>
<li><p>在经历25年企业管理与经营各种不同事业的岁月之后，查理跟我还是没能学会如何去解决难题，不过我们倒学会如何去避免他们，在这点我们倒做的相当成功，我们专挑那种一呎的低栏，而避免碰到七呎的跳高。</p></li>
<li><p>投资并非一个智商为160的人就一定能击败智商为130的人的游戏。</p></li>
<li><p>从不购买价格并不明显低于公司价值的股票。</p></li>
<li><p>1986年我的最大的成就就是没有做任何蠢事。诀窍是当没有合适的事情可做时，就什么也不做。(这一条可以想象一个老先生正襟危坐，底下一波信徒洗耳恭听先知的预言，然后老先生朱唇轻启，子曰：&#8221;不动。&#8221;)</p></li>
<li><p>我宁要模糊的正确，也不要精确的错误。</p></li>
<li><p>价格是你所付出的，价值是你所得到的。(一天念三遍啊念三遍)</p></li>
<li><p>于每一笔投资，你都应当有勇气和信心将你净资产的10％以上投入。</p></li>
<li><p>在错误的道路上，奔跑也没有用。</p></li>
<li><p>如果你一生中找到三个杰出的企业,你就会变得非常富裕。</p></li>
<li><p>控制风险的最好办法是深入思考，而不是投资组合。</p>

<ul>
<li>巴菲特在2004年伯克夏股东大会上说</li>
</ul>
</li>
<li><p>我们只是对于估计一小部分股票的内在价值还有点自信，但也只限于一个价值区间，而绝非那些貌似精确实为谬误的数字。价值评估既是艺术，又是科学。</p></li>
<li><p>对大多数投资者来说，重要的不是他们知道多少，而是他们能在多大程度上认识到自己不懂什么。</p></li>
</ul>


<p>*（有人质疑巴菲特的投资策略只是运气好而已，他讲了一个有关机率的故事回答它们）一群猪共有128000只，分别来自全世界各农场举行丢铜板比赛，投出正面的晋级，投出反面的淘汰，经过九回合后，只剩下250只猪晋级，有人认为那250只猪只是运气好而已。如果你发现晋级的250只猪有200只全是某农场来的，那你就必须问：那个农场喂猪的饲料有没有特别之处？</p>

<ul>
<li><p>我对总体经济一窍不通，汇率与利率根本无法预测，好在我在作分析与选择投资标的时根本不去理会它。</p></li>
<li><p>利率就像是投资上的地心引力一样。</p></li>
<li><p>若有人跟你谈诸如Beta等市场效率理论的东西时，赶快闪人。</p></li>
<li><p>投资的密诀在于，看到别人贪心时要感到害怕，看到别人害怕时要变得贪心。</p></li>
<li><p>垃圾债券总有一天会变成名符其实的垃圾。</p></li>
<li><p>在投资时，我们把自己看成是企业分析师——而不是市场分析师，也不是宏观经济分析师，甚至不是证券分析师。</p></li>
<li><p>多样化是无知的保护伞。</p></li>
<li><p>如果你对投资略知一二并能了解企业的经营情况，那么选5ー10家价格合理且具长期竞争优势的公司。传统意义上的多元化投资（广义上的活跃证券投资）对你就毫无意义了。</p></li>
<li><p>我从事投资时，主要观察一家公司的全貌，而大多数投资人只盯着它的股价。</p></li>
<li><p>恐惧和贪婪这两种传染性极强的灾难的偶然爆发会永远在投资界出现。这些流行病的发作时间难以预料，由它们引起的市场精神错乱无论是持续时间还是传染程度同样难以预料。因此我们永远无法预测任何一种灾难的降临或离开，我们的目标应该是适当的：我们只是要在别人贪婪时恐惧,而是别人恐惧时贪婪。</p></li>
<li><p>会计报表只是评估企业价值的起点，而非最终的结果。</p></li>
<li><p>所谓“市场效率学说”之类的投资教条，不过是为了增加投资的神秘性，好让投资顾问得以从中牟利罢了。</p></li>
<li><p>“不要把所有鸡蛋放在同一个篮子里”的谬论是错误的，投资应该像马克・吐温建议的“把所有鸡蛋放在同一个篮子里，然后小心地看好它”。</p></li>
<li><p>企业主须了解其利益，乃来自于企业内在价值（Intrinsic Value）的成长，而不是其持有股票之短期波动。</p></li>
<li><p>以GEICO这个case，乃至于我们所有的投资，我们看的是公司本质的表现而非其股价的表现，如果我们对公司的看法正确，市场终将还它一个公道。</p></li>
<li><p>巴菲特说在他四十多年的投资生衙中，只有靠十二个投资决策，造就他今日与众不同的地位。</p></li>
<li><p>许多人盲目投资，从某方面来说等于是通宵玩牌，但却从未曾看清楚自己手中的牌。</p></li>
<li><p>因为我把自己当成是企业的经营者，所以我成为更优秀的投资人；而因为我把自己当成是投资人，所以我成为更优秀的企业经营者。</p></li>
<li><p>没有公式能判定股票的真正价值，唯一方法是彻底了解这家公司。</p></li>
<li><p>风险是来自于你不知道你在做什么。</p></li>
<li><p>只有退潮时，你才知道谁是在光着身子游泳。唯有当潮水退去，才知道谁在裸泳。</p></li>
<li><p>我想我不会投资黄金，因为我看不出将这种金属从南非的地底挖出，再把它放到福克斯堡的金库中有何意义。</p></li>
<li><p>价值投资不能保证我们盈利，但是价值投资给我们提供了走向真正成功的唯一机会。</p></li>
<li><p>我承认，我和别人一样有种渴望。渴望干点什么，特别是在无事可干的时候。（巴菲特批评自己在航空业投资的错误时说）</p></li>
<li><p>如果你是投资者，你所关注的就是资产——在我们这里是指公司——未来的发展变化。如果你是投机者，你主要预测独立于公司的价格变化。</p></li>
<li><p>投资成功与否并非取决于你了解的东西，而在于你能否老老实实地承认你所不知道的东西。投资人并不需要做对很多事情，重要的是不要犯重大的错误。成功的关键是投资者如何把一些平凡的事，做得极不平凡。</p></li>
<li><p>用亏损概率乘以可能亏损的数量，再用收益概率乘以可能收益的数量，最后用后者减去前者。这就是我们一直试图做的方法。这个算法并不完美，但事情就这么简单。</p></li>
<li><p>如果你给我一把枪，弹膛里一千个甚至一百万个位置，然后你告诉我，里面只有一发子弹，你问我，要花多少钱，才能让我（对准自已）拉动扳机。我是不会去做的。你可以下任何注，即使我赢了，那些钱对我来说也不值一提。如果我输了，那后果是显而易见的。我对这样的游戏没有一点兴趣。可是因为头脑不清楚，总有人犯这样的错……用对你重要的东西去冒险赢得对你并不重要的东西，简直无可理喻，即使你成功的概率是100比1，或1000比1。</p></li>
</ul>


<h4>价值投资</h4>

<ul>
<li><p>成功的秘诀有三条：第一，尽量避免风险，保住本金；第二，尽量避免风险，保住本金；第三，坚决牢记第一、第二条。</p></li>
<li><p>当我和查尔斯买下一种股票时，我们头脑中既没有考虑到出手的时间也没有考虑过出手的价位。</p></li>
<li><p>可口可乐在1890年时整个公司大约值2000美元今天它的市值为500亿美元。如某个人在1890年时买该公司股票时，有人可能会对他说：“我们将会有两次世界大战，会有1907年的大崩盘。是不是最好等一等？”我们不能犯这个错误。</p></li>
</ul>


<p>*你要做的事情是按低于企业内在价值的价格购买一家企业的股票，如该企业管理层诚实可靠、有能力，那么你就永远持有这些股票。</p>

<ul>
<li><p>不要做低回报率的生意。时间是好生意的朋友，却是坏生意的敌人。如果你陷在糟糕的生意里太久的话，你的结果也一定会糟糕，即使你的买入价很便宜。如果你在一桩好生意里，即使你开始多付了一点额外的成本，如果你做的足够久的话，你的回报一定是可观的。</p></li>
<li><p>人们买股票，根据第二天早上股票价格的涨跌，决定他们的投资是否正确，这简直是扯淡。</p></li>
<li><p>想要在股市从事波段操作是神做的事，不是人做的事。</p></li>
<li><p>人们习惯把每天短线进出股市的投机客称之为投资人，就好像大家把不断发生一夜情的爱情骗子当成浪漫情人一样。</p></li>
<li><p>如果能从历史推测未来，那么最富有的人都是图书管理员。</p></li>
<li><p>短期股市的预测是毒药，应该把它摆在最安全的地方，远离儿童以及那些在股市中的行为像小孩般幼稚的投资人。</p></li>
<li><p>我们偏爱的持股期限是永远。</p></li>
<li><p>你不会每年都更换房子、孩子和老婆。为什么要卖出公司（股票）呢？</p></li>
<li><p>短线投机等于就即将发生的事情进行赌博。如果你运用大量的资金进行短线投机，有可能血本无归。</p></li>
<li><p>希望你不要认为自己拥有的股票仅仅是一纸价格每天都在变动的凭证，而且一旦某种经济事件或政治事件使你紧张不安就会成为你抛售的候选对象。相反，我希望你将自己想象成为公司的所有者之一，对这家企业你愿意无限期的投资,就像你与家庭中的其他成员合伙拥有的一个农场或一套公寓。</p></li>
<li><p>如果我们有坚定的长期投资期望,那么短期的价格波动对我们来说就毫无意义,除非它们能够让我们有机会以更便宜的价格增加股份。</p></li>
<li><p>必须要忍受偏离你的指导方针的诱惑：如果你不愿意拥有一家公司十年,那就不要考虑拥有它十分钟。</p></li>
</ul>


<h4>行业与公司</h4>

<ul>
<li><p>你应该选择投资一些连笨蛋都会经营的企业，因为总有一天这些企业会落入笨蛋的手中。</p></li>
<li><p>当一个经历辉煌的经营阶层遇到一个逐渐没落的夕阳工业，往往是后者占了上风。</p></li>
<li><p>所谓有“转机”的公司，最后很少有成功的案例，与其把时间和精力花在购买价廉的烂公司上，还不如以公道的价格投资一些物美的企业。</p></li>
<li><p>经验显示，能够创造盈余新高的企业，现在做生意的方式通常与其五年前甚至十年前没有多大的差异。</p></li>
<li><p>我们判断一家公司经营的好坏，取决于其净资产收益率（排除不当的财务杠杆或会计做帐），而非每股收益的成长与否，因为即使把钱固定存在银行不动，也能达到象后者一样的目的。</p></li>
</ul>


<p>*（巴菲特反对股票分割配股，他甚至半开玩笑地在朋友的生日贺卡上写到）祝你活到伯克希尔分割股票之时。</p>

<p>*（在购并国际乳品公司时巴菲特说到）我们把钱摆在吃得到的地方。</p>

<p>*（巴菲特在1985年结束伯克希尔纺织部门营运时，解释道）一只能数到十的马是只了不起的马，却不是了不起的数学家，同样的一家能够合理运用资金的纺织公司是一家了不起的纺织公司，但却不是什么了不起的企业。</p>

<ul>
<li><p>如果我们雇用一堆比我们矮小的人，那么我们会变成一堆侏儒，但相反地若我们雇用一堆比我们高大的人，那么我们终将变成一群巨人。</p></li>
<li><p>寻找超级明星——给我们提供了走向成功的唯一机会。</p></li>
<li><p>一个二流的企业最有可能仍旧是二流的企业，而投资人的结果也可能是二流的。</p></li>
<li><p>我们的投资方式只是与我们的个性及我们想要的生活方式相适应,为了这个原因,我们宁愿与我们非常喜欢与敬重的人联手获得回报X，也不愿意通过那些令人乏味或讨厌的人改变这些关系而实现110％的X。</p></li>
<li><p>我们的目标是使我们持股合伙人的利润来自于公司，而不是其他共有者的愚蠢行为。</p></li>
<li><p>对于购并的对象，我们偏爱那些会“产生现金”而非“消化现金”的公司。</p></li>
<li><p>与这群“乐在其中”并以像老板一样心态经营公司的专业经理人在一起工作真是一种享受。</p></li>
<li><p>依我们过去的经验显示，要“找到”一家好的保险公司并不容易，但要“创立”一家更难。</p></li>
<li><p>如何去维护股东最大的权益，不仅是监督一家企业最重要的项目，也是一个理想的管理团队首要之考量。</p></li>
<li><p>喜斯糖果会让吉列公司旗下的欧乐B牙刷销路更好。</p></li>
<li><p>创造营业收益所需的时间，通常不大可能与行星绕太阳一周的时间相吻合。</p></li>
<li><p>一份强势报纸的经济实力是无与伦比的，也是世上最强势的经济力量之一。</p></li>
<li><p>一家典型的报社可将旗下发行报纸售价调高一倍，而仍保有百分之九十的读者。</p></li>
<li><p>所谓的消费者特许权是指大家偏爱而愿意付额外的代价购买某个牌子的产品。</p></li>
<li><p>如果你给我一千亿美金要我把可口可乐打倒，即使我的心可能会很痛，我还是会将钱原封不动的退还。</p></li>
<li><p>可口可乐与吉列刮胡刀是世界上最好的两家公司。</p></li>
<li><p>评估一个人时，你必须看准其三项特质:正直、智力与活力，若缺乏第一项，后面两项可能会把你害惨。</p></li>
</ul>


<p>*（对于联邦住宅抵押贷款公司Freddie Mac的看法）双独占仅次于垄断。</p>

<ul>
<li><p>你能对一条鱼解释在陆上行走的滋味吗?在陆地上生活一天的真实感觉，胜过以言语解释它一千年，而实地亲身去经营企业也是如此。</p></li>
<li><p>所谓拥有特许权的事业，是指那些可以轻易提高价格，且只需额外多投入一些资金，便可增加销售量与市场占有率的企业。</p></li>
<li><p>香烟是一个相当理想的行业，制造成本只要一分钱，但售价却高达一块钱，消费者会上瘾，而且忠诚度非常的高。</p></li>
<li><p>有的企业有高耸的护城河，里头还有凶猛的鳄鱼、海盗与鲨鱼守护着，这才是你应该投资的公司。</p></li>
</ul>


<p>*（对于员工认股选择权的滥用，巴菲特相当不能认同，他说：）如果选择权不是对员工的一种报酬，那它算是什么? 如果报酬不算是一种费用，那它又是什么? 如果费用不列入损益表中，那它又应该摆在那里?
不投资科技股绝对不是迷信不迷信的问题。</p>

<ul>
<li><p>我们充分了解科技为整个社会所带来的便利与改变，只是没有人能预测往后十年这些科技公司会变怎样，我常跟比尔盖兹及安迪葛洛夫在一起，他们也不敢保证。</p></li>
<li><p>经验表明，经营盈利能力最好的企业，经常是那些现在的经营方式与5年前甚至10年前几乎完全相同的企业。而一家公司如果经常发生重大变化，就是可能会因此经常遭受重大失误。推而广之，在一块总是动荡不安的经济土地之上，是不太可能建造一座固若金汤的城堡似的经济特许权，而这样的经济特许权正是企业持续取得超额利润的关键所在。</p></li>
<li><p>良好的管理记录与其说是你很有效率，倒不如说是因为你上了哪条船。当有着辉煌名声的管理人员要去对付前程黯淡、管理混乱、声名狼藉的公司时，不变的只会是公司的名声。如果你发现自己在一艘长期漏水的船上，那么造一艘新船要比补漏洞有效得多。优秀的骑士会在好马，而不是衰弱的老马上充分发挥。我对此事的观点从未改变。</p></li>
</ul>


<h4>安全边际</h4>

<ul>
<li><p>架设桥梁时，你坚持载重量为3万磅，但你只准许1万磅的卡车穿梭其间。相同的原则也适用于投资领域。——格雷厄姆-多德都市的超级投资者们－巴菲特1984哥伦比亚大学的演讲</p></li>
<li><p>投资成功的关键是在一家好公司的市场价格相对于它的内在商业价值大打折扣时买入其股份。内在价值是一个非常重要的概念,它为评估投资和企业的相对吸引力提供了唯一的逻辑手段。内在价值的定义很简单：它是一家企业在其余下的寿命史中可以产生的现金的折现值。</p></li>
<li><p>我认为投资专业的学生只需要两门教授得当的课堂：如何评估一家公司,以及如何考虑市场价格。</p></li>
</ul>


<h4>市场</h4>

<ul>
<li><p>在市场贪婪时恐惧，在市场恐惧时贪婪</p></li>
<li><p>每一个泡沫都有一根针在等着。当两者最终相遇，新一波的投资者会学到华尔街一条古老的教训：当投机看起来轻而易举的时候最危险。</p></li>
<li><p>（对于完全市场效率学说巴菲特完全不能认同，他反而感谢那些相信这种鬼话的机构投资人，让他能够占尽便宜，他说）我们实在欠提出这种理论的学者太多了，就好比当我们在参加桥牌、西洋棋或是选股等斗智的竞赛中，对手却被教练告知思考是白费力气的一件事。</p></li>
<li><p>市场先生是你的仆人，而不是你的向导。</p></li>
<li><p>如果任何一个人准备去做任何一件蠢事的时候，股市在那里，仅仅是作一个参考值而存在。当我们投资于股票的时候，我们也是投资于商业。</p></li>
<li><p>对我来说，股市是根本不存在的。要说其存在，那也只是一个让某些人出丑的地方。</p></li>
<li><p>如果你不能确定你远比“市场先生”更加了解你的公司并能够正确估价，那么你就不能参加游戏。就像他们在纸牌游戏中说的那样，“如果你不能玩上30分钟，而且不知道谁是替死鬼，那么你就是替死鬼。”</p></li>
<li><p>我从未指望在股市中赚钱。我会设想股市在隔天关闭而在5年后开市。</p></li>
<li><p>相信有效市场投资就好比在打桥牌时认为不需看牌一样……如果市场总是有效率的，我将会流落街头，沿街乞讨。</p></li>
<li><p>我们一直觉得股市预测的惟一价值在于让算命先生过得体面一点。</p></li>
<li><p>我们欢迎市场下跌，因为它使我们能以新的、令人感到恐慌的便宜价格拣到更多的股票。</p></li>
<li><p>投资者应考虑企业的长期发展,而不是股票市场的短期前景。价格最终将取决于未来的收益.在投资过程中如同棒球运动中那样,要想让记分牌不断翻滚,你就必须盯着球场而不是记分牌。</p></li>
<li><p>我不认为包含我自己本身在内能够“成功”地预测股市短期间的波动。</p></li>
<li><p>被网络公司引诱的投资人就好像参加舞会的灰姑娘一样，没有在午夜的期限之前赶紧离开，结果漂亮的马车又变回南瓜。不过最大的问题在于，这场舞会上的时钟并没有指针。</p></li>
<li><p>依我们过去的经验显示，从公开市场所买进部份股权的价格远比整笔购并所谈的价格要低的许多。</p></li>
<li><p>我们从未想到要预估股市未来的走势。</p></li>
</ul>


<p>*（当1988年波克夏股票在纽约证券交易所挂牌上市时，巴菲特半开玩笑地对经纪商说）假如你从今天起在两年内能成交一笔伯克希尔的股票，你就算是成功了。</p>

<ul>
<li><p>买股票时，应该假设明天开始股市要休市3ー5年。</p></li>
<li><p>当一些大企业暂时出现危机或股市下跌，出现有利可图的交易价格时，应该毫不犹豫买进它们的股票。</p></li>
</ul>


<h4>伯克希尔</h4>

<ul>
<li><p>我非常热爱我的工作，每天早上去上班时，都会觉得自己好像是要到西斯汀教堂作壁画一样。（注：米开朗基罗名画“最后的审判”完成处）</p></li>
<li><p>我们的集团总部占地仅1,500平方呎，（约合42坪左右）总共只有十二人，刚好可以组一只篮球队。（波克夏目前有16.8个人，一个兼职会计每周工作四天）</p></li>
<li><p>伯克希尔有两种低成本且无风险的资金来源：应付所得税与保险浮存金。</p></li>
<li><p>尽管我们的组织登记为公司，但我们是以合伙的心态来经营。</p></li>
<li><p>一般共同基金的管理费用是百分之一点二五，我们则只有万分之五。</p></li>
<li><p>四十五年前我看到机会却没什么钱，四十五年后我有钱却找不到机会。</p></li>
<li><p>我们自给自足。</p></li>
<li><p>（巴菲特在1985年结束波克夏纺织部门营运时，曾解释道）我们不会因为想要将企业的获利数字增加一个百分点，便结束比较不赚钱的事业，但同时我们也觉得只因公司非常赚钱便无条件去支持一项完全不具前景的投资的作法不太妥当，亚当史密斯一定不赞同我第一项的看法，而卡尔马克斯却又会反对我第二项见解，而采行中庸之道是惟一能让我感到安心的作法。</p></li>
<li><p>在伯克希尔我们不用去告诉一个打击率四成的选手如何挥棒。</p></li>
<li><p>（对于购并所需资金，伯克希尔随时作好万全准备，巴菲特说）如果你想要打中罕见且移动迅速的大象，那么你应该随时把枪带在身上。</p></li>
<li><p>伯克希尔就像是商业界的大都会美术馆，我们偏爱收集当代最伟大的企业。</p></li>
</ul>


<h4>其他</h4>

<ul>
<li><p>信誉可能需要花一辈子的时间才能建立，但只要五分钟便足以摧毁之。</p></li>
<li><p>桥牌是最好的脑力运动，你每十分钟就会看到新局面，在股市同样是运用理性来作决定，桥牌就是一种权衡盈亏比率的游戏。</p></li>
<li><p>裹着神秘面纱的投资技巧显然对投资建议提供者有利。毕竟，庸医仅凭建议你“吃两片阿斯匹林”就攫取了多少名声和财富。</p></li>
<li><p>从预言中你可以得知许多预言家的信息，但对未来却一无所获。（11月21日名言）</p></li>
<li><p>华尔街是惟一的坐劳斯·莱斯的人向那些乘坐地铁的人征询意见的地方。</p></li>
<li><p>（虽然许多人包括华尔街人士，都密切注意巴菲特的一举一动，但他自己却谦逊地说）我曾刻意地注意自己的”一举一动”，不过实在是不怎么样。</p></li>
<li><p>（有人问巴菲特预计什么时后要退休，他回答）大约在我死后五到十年左右。</p></li>
<li><p>（有人问巴菲特死后，其所投资的公司会有什么影响，他回答）可口可乐短期间的销售量可能会爆增，因为我打算在陪葬的飞机里塞满可口可乐。</p></li>
<li><p>（对于伯克希尔惟一的奢侈品ー个人专机无议号，巴菲特说）只要我一死，伯克希尔的账面盈余立刻可增加一百万，因为查理无视于我希望与之同葬的心愿，隔天一定马上把飞机处理掉。</p></li>
<li><p>有生之年我都会继续经营伯克希尔，之后我可能会透过降神会工作。</p></li>
<li><p>（在购并General RE公司后，卖掉其所持有获利不菲价值四十六亿美金的美国零息公债后，债券仍持续大涨时，巴菲特淡淡地表示）我们投入的早，不过卖得更早了一点。</p></li>
<li><p>（有一回巴菲特在地上看到一毛钱，他弯下腰拾起这枚硬币，当时所有在场的人都惊讶不已，只见他说）这是另一个十亿美元的开始。</p></li>
<li><p>（一位哥伦比亚大学的学生问到巴菲特关于投资美国航空的原因，他说）对啊!我的心理医生也问我相同的问题。</p></li>
<li><p>（在成功撮合首都公司与ABC合并后，巴菲特说）我担心恩师葛拉汉会从棺材里爬出来为我这一投资计划喝采。</p></li>
<li><p>（1950年代巴菲特花了一百五十元去上卡内基课程，他说这么做）不是为了让我在演讲时膝盖不会发抖，而是要学会如何在膝盖发抖时，还能继续演讲。</p></li>
<li><p>人，聪明才智其实差不多，重要的是，你能不能把你要做的目标，化身成你每天做它的习惯。</p></li>
<li><p>不要用信用卡。要对自己投资。</p></li>
<li><p>不是钱造人，而是人造钱。</p></li>
<li><p>过自己的生活，越简单越好。</p></li>
<li><p>别追求名牌，只穿让自己感觉舒服的衣服。</p></li>
<li><p>别把钱浪费在不必要的事物上，要花在真正需要的地方。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[史上最可怕的赌局FOMO3D(3)]]></title>
    <link href="http://happy123.me/blog/2018/08/06/shi-shang-zui-ke-pa-de-du-ju-fomo3d-3/"/>
    <updated>2018-08-06T09:29:46+08:00</updated>
    <id>http://happy123.me/blog/2018/08/06/shi-shang-zui-ke-pa-de-du-ju-fomo3d-3</id>
    <content type="html"><![CDATA[<p>目前FOMO 3D的赌局剩余时间已经有多次下降到3小时以下了。</p>

<p>官方非常贴心的为我们指出了最后关头可能会发生的事情:</p>

<!-- more -->


<ol>
<li><p>出块时间可能会增加到90s以上。</p></li>
<li><p>可能会包括并不限于拒绝出块，跳过，或者提交空单。</p></li>
<li><p>交易被拒绝。</p></li>
<li><p>整个ETH网络的gas费用将会飙升</p></li>
<li><p>大户可能可以购买完整的20-100个块以及其中全部的GAS</p></li>
<li><p>网站可能被DDOS攻击</p></li>
<li><p>infura节点可能会被ddos攻击。</p></li>
<li><p>ETH网络可能会崩溃（再次）</p></li>
<li><p>有人使用机器人尝试狙击最后的key。</p></li>
<li><p>玩家可以简单的通过购买大量的key，来摧毁这一切攻击意图（以及浪费掉他们的eth）</p></li>
</ol>


<p>我认为1,2,3,4,6,7,8,9必然会发生，至于大户是否会购买最后100个块，要看全球所有矿池的看法，如果有人出5倍于矿池挖矿正常收益的价格的话，为什么不做这笔交易呢？</p>

<p>至于小散，也想要搏一把的话：</p>

<p>只需要确保的自己名字在顶部1:30点的附近。因为我觉得任何人，要是没有狂跳如飞的计时器，都不可能协调好。但原则是，大家彼此竞赛，目的是让计时器定格在1:30，因为玩家中的每一个人,想要获胜，都会按照这种方法。</p>

<p>你不需要在30秒的时候花费大量的GAS狙击，你也不需要支付1000美元赶在竞赛结束前获得最后一个区块。那全是大户和机器人的领地。你可以轻松地将一个ETH长久放置于1:30标志处，并在rogue long block timer中获得100+次尝试的机会。这可能会耗费一段时间，但最后的辉煌成果就是对你的奖励。</p>

<p>出块时间可以长达120秒，有些罕见情况下时间会更长。你想操纵那个计时器的时间越长（2:00, 2:30），你就会消耗更多的eth来让计时器保持在那里，但你胜算的几率也更大。一旦有120-150秒出块时间的堵塞来袭，你就赢了。</p>

<p>这是利用可能的出块时间来发掘你自己的价值。赢得那个人也可能就是你，对吗？</p>

<p>哈哈，我想小散的力量这个时候会让大户恐惧，因为大户下了血本，也未必能赢过小矿工的运气。</p>

<p>最后，我认为这将是一场耐心的较量。因为各方博弈之下，最后5分钟，游戏时间瞬间回血到24小时也很有可能，到时候下大注的人们可能就会一脸懵逼了。</p>

<p>这真的是史上第一个公开透明博大奖而且取得如此影响力的博彩游戏，比什么现场抽奖，摇彩球要公正好玩的多。</p>

<p>目前20000+ ETH的彩池，奖金超过$1000w，拭目以待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[史上最可怕的赌局FOMO3D(2)]]></title>
    <link href="http://happy123.me/blog/2018/07/31/shi-shang-zui-ke-pa-de-du-ju-fomo3d-2/"/>
    <updated>2018-07-31T12:53:58+08:00</updated>
    <id>http://happy123.me/blog/2018/07/31/shi-shang-zui-ke-pa-de-du-ju-fomo3d-2</id>
    <content type="html"><![CDATA[<p>这几天又仔细读了一遍FOMO 3D和P3D的代码，又生出一些想法；发现这个团队围绕P3D构造的这个生态系统实在不简单，非常非常有意思，继续推演一下</p>

<h4>再提醒一遍，这就是个骗局，创始团队也不讳言这是个骗局，他们明晃晃在官网wiki上，Twitter上提醒人们，我就是来骗你们的，不要上当。</h4>

<!-- more -->


<p>================================================================</p>

<h2>FOMO 3D真的永远不会结束吗？</h2>

<p>现在看来：未必。2018-07-29 09:05 UTC+8 官方开启了FOMO 3D Quick游戏，规则大体相同，但是key的价格增长非常快，游戏时长5分钟，每购买一个key，游戏增长90s，但是按照推演，这个游戏的Round 1也应该持续非常非常长的时间，出乎意料的是，第一轮大概半天就结束了，之后更是一泻千里，入场的人统统沦为韭菜，到现在为止，已经进行了十几轮了，沉淀的资金越来越少，很快就会死亡，从结果来看，这是一个失败的游戏。</p>

<p>然后我们再来看FOMO 3D，目前池子里面已经积累了21700+ ETH，市值10,000,000$，最终奖金肯定超过5,000,000$；现在总共售出了3000w+的key，假设池子还能增长一倍，那么游戏结束的最后一分钟，总共奖金5,000,000$的基础上，肯定会有人尝试51%攻击，那么51%的攻击的成本有多少呢？</p>

<p>目前以太坊全网算力为125T左右，每G/天的成本大概50$，在GPU云已经普及的情况下，租用nicehash、aws、google cloud的全部 GPU主机1小时似乎也不是太大的成本；如果我是理性人的话，策略就是:</p>

<ol>
<li>首先花一部分钱不断的购买key到合约地址，交易每秒钟构造10笔，设置高手续GAS费用，通过全球矿池广播，确保先发优势</li>
<li>购买大量算力，比如1小时内1PB的算力，只打包我的交易，确保机率足够大</li>
<li>相对于5,000,000$的奖池，这个投入还是值得的</li>
</ol>


<p>然后理性人不只是一个人，我想，最后一分钟，可能会出现全球显卡算力统统涌入以太坊竞争最后赢家的局面，这个瞬时算力可能会惊人的高，我瞎猜猜可能会占据全球所有GPU云平台算力，占出货显卡的50%以上；所以最后的赢家会在几个舍得投入的大佬当中产生，资本通吃一切啊。</p>

<h2>FOMO 3D的Round 2&hellip;Round 3会如何发展</h2>

<p>如果没有出现黑天鹅，FOMO 3D的结局大概率会是以上推演。但是5,000,000$级别的奖金相对于整个以太坊的池子来说其实影响不大；这个游戏最终会沦为一个平庸的庞氏游戏，游戏初期是散户争相涌入，到达一个临界点后，游戏末期大佬博弈；最终上当的人越来越少，游戏OVER.</p>

<h2>F3D、F3D Quick其实只是个小游戏而已，它的作用仅仅是宣传P3D；</h2>

<p>P3D的设计规则虽然简单，但其实非常像美联储，如果把P3D的持有者看成是一个人，那就是央行了；</p>

<p>把P3D比作央行，ETH比作货币市场，其它所有币种（包括法币或者比特币一类）看作是资产；那么可以做如下推演：</p>

<ol>
<li><p>ETH的通胀率是越来越小的</p></li>
<li><p>当ETH 相对其它币种升值，可以看作是价值高估，ETH货币市场通缩，此时央行需要放水，卖出ETH，销毁P3D Token，保持流动性</p></li>
<li><p>当ETH相对其它币种贬值，可以看作价值低估，ETH货币市场通胀，此时央行需要买入ETH，收紧流动性</p></li>
<li><p>P3D 的所有持有人可以看作是央行股东，和传统央行的区别就是，他们之间也存在着利益博弈，他们会按照2、3点来操作吗？</p></li>
<li><p>从整个ETH 市场来看，理性人足够多的话，就应该进行“市值管理”，确实应该按照2、3点来行事</p></li>
<li><p>但是如果我有了央行的权利，岂不是最大的那个庄家，可以操纵市场，要风得风，要雨得雨？不存在的，和美联储一样，所有持有P3D Token的股东利益制衡，不会那么完美的按照理性人行事</p></li>
<li><p>作为小散，最好的办法就是央行放水时借贷，紧缩时持有现金；其实和央行的操作是相反的，但是我本身又可以成为央行的股东，这样我既是央行，又是小散的时候非常矛盾；另外所有的P3D持有人和所有小散也是矛盾的，这种利益博弈之下会使整个系统不断波动然后收敛</p></li>
<li><p>现在看来，持有100 P3D Token的master node其实是美联储的成员了，因为通过master node的邀请入坑的人可以少收10%的入会费，所以这个组织发展壮大的话，master node的资格很金贵；如果对这个模式有信心，并且是ETH的绝对信仰者，现在来看，花点小钱，成为央行股东，很好玩，挺值得的。将来可能master node资格乃至入会缴纳会费都会有一个二级市场</p></li>
</ol>


<p>这个团队目前做的所有事情就是为P3D不断注入信用，引更多的人入场；将来应该会有更多的游戏出来</p>

<h2>P3D的发展会是如何?</h2>

<p>我写了一个小程序模拟了一下P3D的投资收益，非常非常有意思。P3D的规则非常非常简单:</p>

<ol>
<li>当买入一个P3D Token的时候:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>token价格 = 0.0000001 + 0.00000001 * 总token数目
</span><span class='line'>
</span><span class='line'>预先扣除手续费用 = token价格 * 19% (买入10%，卖出10%预收)</span></code></pre></td></tr></table></div></figure>


<ol>
<li>买入卖出的手续费用按照所有Token持有人的持有比重，发放分红</li>
<li>其它类似于Fomo3D的游戏收入，会发放一部分分红给所有P3D Token持有人</li>
</ol>


<h4>这样的规则让他看起来初期像是一个庞氏骗局，但是卖出token会分红给其它持有者，这个规则的设立让其无限接近于零和博弈；</h4>

<p>另外:</p>

<pre><code>    token价格 = 0.0000001 + 0.00000001 * 总token数目
</code></pre>

<p>0.0000001 和 0.00000001这两个因子的设置也非常有意思，考虑到现存的以太坊总数大概是10<sup>8</sup>个，这样的设计最终会得到1 P3D Token的单价和数目；然后结合现在以太坊的通胀速率和游戏10%的分红，模拟下来，会得到非常完美的货币调节曲线：</p>

<h4>这根本就是一个央行的雏形！</h4>

<p>从一开始自称是<code>骗局</code>的骗局，深入模拟后发现其并不简单。</p>

<p>从仅仅是几条简洁至极的规则，却推演出其中生生不息的金融运转奥妙，我得说，太有意思了，我被迷住了。我从P3D的合约发掘目前的数据，疑惑一个接一个，这个团队的目标绝不仅仅是从几个小游戏里面取得一点获利那么简单；</p>

<p>FOMO 3D Quick看起来是失败了，但这只是一连串尝试的一小步而已，我相信将来会发生更不可思议的事情。</p>

<p>另外，P3D的发展究竟会走向何方呢？他会成为智能合约历史上第一个自治的美联储股权系统吗？关于区块链，关于智能合约，这项技术越来越不像是人类的创造，反而像是自然界早已存在的物理法则，人们探寻、发现、深入了解，其产生物越来越神奇而不可揣摩。</p>

<p>不多说了，Talk is cheap，还是多看看这个合约有没有BUG吧，毕竟YY了一大堆，也许某个黑客已经躲藏在角落里面隐匿多时，等着射出致命一箭。</p>

<p>但是，我还是得感叹，这个技术实在是太神奇了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[史上最可怕的赌局FOMO3D]]></title>
    <link href="http://happy123.me/blog/2018/07/27/shi-shang-zui-ke-pa-de-du-ju-fomo3d/"/>
    <updated>2018-07-27T03:32:39+08:00</updated>
    <id>http://happy123.me/blog/2018/07/27/shi-shang-zui-ke-pa-de-du-ju-fomo3d</id>
    <content type="html"><![CDATA[<p>人类骨子里面存在赌博的基因。从形形色色的资本市场，到我今天几点起床，好听一点，是一种概率的博弈，难听一点，就是赌博。</p>

<p>互联网伊始，在其他人纷纷吹嘘空中楼阁的时候，最先盈利的，是赌场。</p>

<p>区块链技术发展至今，落地的应用，无它，投机赌博尔。</p>

<p>从最初的SatoshiDice到primedice，到各种DApp的赌博应用，我想不久之后，澳门和拉斯维加斯会面临重大挑战。</p>

<p>第一次搞明白primedice和SatoshiDice的原理时，深深为之震撼，如此透明的博彩程序，在我看来已经到达赌博行业的顶尖水准了，后来者要超越，无非是内容上添砖加瓦，搞个美女营销之类的，技术上没啥改进余地了。</p>

<p>事实证明，Too Yong。人类在赌博业上的创新永无止境。</p>

<p>事实上，最近出来一个我认为史无前例的精巧，可怕，糅合了庞氏骗局，概率论，庄家，小白，顶级黑客，古典赌博术设计的区块链应用。而且，他非常坦诚，告诉你，我就是传销，就是骗局，你来了就是送我钱的，但还是让人欲罢不能。事实上，我不怕丢人，我也投了一点小钱在里面，我也是庞氏骗局的被洗脑者。所有读到这里的人，要高能预警提醒你，下面文章所有的内容，都是洗脑文，写这篇文章的人已经中毒了，您应该带着批判的思维去审视这些知识。</p>

<h4>再提醒一遍，这就是个骗局，创始团队也不讳言这是个骗局，他们明晃晃在官网wiki上，Twitter上提醒人们，我就是来骗你们的，不要上当。</h4>

<!-- more -->


<p>================================================================</p>

<p>这个游戏叫做Fomo3D，是建立在以太坊的智能合约基础上的一款DApp，是一个实盘的庞氏骗局，玩法综合了<code>传销+一元夺宝+博彩+资金盘+炒币</code> 的各样姿势，堪称区块链投机诈骗时代的集大成者。相比它，什么发行空气币，搞ICO的做法实在是弱爆了。</p>

<p>先讲讲它的开发团队，非常的有Geek范，他们首先很坦诚，称自己的游戏为“退出骗局（exit-scam）”，这个游戏的官方域名就是:</p>

<p><a href="https://exitscam.me/">https://exitscam.me/</a></p>

<p>而且他们自称是反区块链主义者，发明这个游戏出来就是让人认识到比特币、以太坊这些东西就是骗人的，是个巨大的博傻游戏，他们要劝人退出这个骗局。</p>

<p>劝你退出的方法很简单，就是他们发明了Fomo3D这个游戏骗光你的币，而且是正大光明的声明我就是来骗你的。</p>

<h4>Fomo3D啥意思?</h4>

<p>FOMO=fear of missing out，翻译成中文就是“怕错过”。这名字取得太应景了。实际上他们前面还做过一款叫做P3D（Proof of Weak Hands 3D）的庞氏类游戏，也曾一度引起轰动。当然，崩盘以前最后的一波投资者就比较难看。因此，这个游戏里面处处设法弄一些资金去给P3D填锅。</p>

<p>3D也是团队的一个调侃，代表除了单纯的庞氏，他们还搞出了另外两种骗你钱的姿势~~；另外在我看来，F3D和P3D好像两个倒金字塔，形成一个漏斗结构，这个游戏理论上没有终结的一天，他会把所有持有以太坊的有赌性的人吸引进来，不管是赢家还是输家，大家最后都会颠来倒去，起起落落沉迷不已，金字塔的形状就是三角形哈~~~</p>

<p><strong>明知是骗人我还要投入其中，你太小看我的智商了吧，你以为我是P2P的大妈还是A股的韭菜啊，我傻啊~~~</strong></p>

<p>且让我们细细看来。</p>

<h2>规则：</h2>

<p>完整的说明请参见官方wiki：</p>

<p><a href="https://fomo3d.hostedwiki.co/pages/Fomo3D%20Explained">https://fomo3d.hostedwiki.co/pages/Fomo3D%20Explained</a></p>

<p>这个游戏其实是一个复合型的游戏。它的主合约有一千多行代码，还有几个辅助合约，已经算是相当复杂的了。从游戏来说，他包含几个机制：</p>

<h4>彩票：</h4>

<p>可以随时购买一注彩票；存在4种不太一样的一样的彩票（分成了四种模式，每种模式用一种动物指代：Whale、Snek、bull、bear），每一种的返还方式略有区别，但是共用奖池；分大奖和小奖（随机空投），小奖实时开奖，实时结算；大奖奖池累计，目前累计到2w eth（1000w美金）</p>

<h4>一元拍卖：</h4>

<p>每个出价的人都得交一笔钱（这是一元拍卖和传统拍卖的最大区别）；每次有人出价，拍卖时间顺延30秒；如果拍卖时间结束，最后一个出价的人，获得商品&mdash;&mdash;这里没有真实商品，就是获得整个奖池；</p>

<h4>分红币：</h4>

<p>每个持有币的人可以从后面的入场资金获得固定分红；分红完全平均，每一个token（在下面我会交替使用token，币，key，F3D这几种说法，意思都一样）获得分红都是相等的，不含随机性；整盘游戏结束的时候还有一个最终分红；</p>

<h4>推荐/传销机制：</h4>

<p>每个人可以生成推广链接；其他人通过推荐链接入场，他的消费中10%直接奖励给推荐人；用户可以更换推荐人链接，如果不怎么做，他的后续消费将持续给别人提供奖励；</p>

<hr />

<p>相信这么说你可能要晕了，我们综合起来描述一下:</p>

<h4>首先合约提供了一种股份，他们称之为Key，你需要用Eth去买Key，拥有Key的人，就在游戏规定的时间内享有分红权，能源源不断的获取分红；</h4>

<ul>
<li><p>KEY的价格 = 0.000075 + 0.00000000015625*已有KEY的总量</p></li>
<li><p>获利 = （ 提现时KEY总量 -买入时KEY总量 ）* 分润率</p></li>
<li><p>Key不能卖，就是说你买了Key后只能握在手里</p></li>
</ul>


<p>这不就是尽早入场，尽早得利的老掉牙的骗局吗，最后一拨人接盘；有啥新鲜的？</p>

<h4>且慢，我们看到，除了分红之外，其实整个池子还是剩下近一半币的；所以除了庞氏，他还引入了另外一个模式，一元夺宝:</h4>

<ul>
<li>一轮游戏的时间限定为24小时，当游戏时间结束时，最后一个买key的人，可以独享奖池48%份额。</li>
</ul>


<p>也就是说，越到游戏快结束的最后1分钟，碰运气去博的人会越来越多，而且到时候奖池里面的数字会惊人的大，比如现在(2018-07-27 03:00:00 UTC+8)，池子里面已经积累20000+ 的eth了，超过一千万美元。</p>

<ul>
<li>当游戏时间&lt;24小时，每有一个人买一个key，游戏的时间会延长30秒。</li>
</ul>


<p>当游戏快结束时，大家都去博大奖，反而会让游戏的时间延长，理论上来说，这个延长会无穷无尽，所以这个游戏的第一局会持续到永远&hellip;&hellip;.，直到以太坊破灭</p>

<h4>为了让持有Key的人玩的更有乐子，他们还设计了一种空投机制，奖池会随机发币给key持有人，持有Key越多的人，越容易中奖</h4>

<h4>另外团队还有另外一款Token，就是空气币叫P3D，凡是持有P3D的人也能从奖池里面分一杯羹，这个P3D的设计是另外一个庞氏骗局，可以说是骗上加骗，强强联合了</h4>

<h4>最后的最后，为了找韭菜，他们还设计了常见的推荐机制</h4>

<p>我投0.1Eth，就可以得到一个推荐链接，凡是点击这个链接进来的人，我都能拿奖励；所以大家很快就会看到各类自媒体的科普文章中，夹带类似以下格式的链接，你点进去买就立即是一个合格的韭菜了:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://exitscam.me/122334
</span><span class='line'>
</span><span class='line'>https://exitscam.me/ethxxxxx
</span><span class='line'>
</span><span class='line'>https://exitscam.me/gogogogogog
</span><span class='line'>
</span><span class='line'>~~~</span></code></pre></td></tr></table></div></figure>


<h4>庄家会跑路吗？</h4>

<p>整套代码开源，构筑在以太坊的合约Solid平台基础之上，大可以接受各路人马检验；</p>

<p>看到这里，你是不是已经叹服它堪称史上集大成的诈骗机制了，这个产品经理洞悉了人性，发明了这个集传销，庞氏骗局，游戏，彩票，资金盘于一体的行为艺术，实在是应该去拉斯维加斯大展身手的；</p>

<p>当然，也许人家已经看明白区块链迟早会革掉传统赌博行业的命，早早投身这个大潮来了~~~</p>

<p>少年，你是不是急切的问，这个游戏咋玩啊，快给个教程链接我体验一下 233333~</p>

<h4>且慢，我都说了这是个骗人的局，而且，搞明白它的设计细节，进行概率测算之后，唯有四字形容：叹为观止。</h4>

<h2>规则细节</h2>

<p>传销的万古不变的铁则就是，越早入场，越早赚钱。索罗斯大爷用很艺术哲学的语言总结过:世界经济史是一部基于假象和谎言的连续剧。要想获得财富，做法就是认清其假象，投入其中，然后在假象被公众认识之前退出游戏。</p>

<p>那么我作为韭菜，入局这个游戏，期望获利，有哪些姿势呢？</p>

<h3>分红获利</h3>

<p>Fomo3D的key的价格是不断增加的，越早买越便宜。</p>

<p>第一个key的价格是7.5e-5，此后线性增长，大概到第50w个key的时候，价格翻一倍。50w，是不是看起来增长得已经非常慢了? 一定意义上，是的。不过请注意，现在已经卖出了3400w把key，所以价格目前已经翻了72x倍达到了5.54e-3。</p>

<p>用户买Key的时候可以选择自己的角色，可以看成是同股不同权，你可以选择自己喜欢的权力角色。简单按照官网的说明分为Whales, Bears, Bulls, Sneks，目前选Sneks的用户占有绝对优势，接近90%，下面我们来分析一下为什么:</p>

<p>首先我们看看每种角色的利益如何分配:</p>

<pre><code>角色   |收入分配(划归奖池)| 实时分红 | 分给P3D Token持有人 | 分给推荐人 | 空投小奖 | 捐赠开发团队
-------|--------------|----------|------------------------|------------|----------|-------------
whales | 50%          | 30%      | 6%                     | 10%        | 1%       | 3% 
bears  | 43%          | 43%      | 0%                     | 10%        | 1%       | 3% 
bulls  | 35%          | 43%      | 8%                     | 10%        | 1%       | 3% 
sneks  | 20%          | 56%      | 10%                    | 10%        | 1%       | 3% 
</code></pre>

<p>当游戏结束（倒计时结束时），并不是由赢家获得整个大奖奖池。这时候还会做一个最终分配。</p>

<pre><code>角色   | 大奖(只有一个赢家) | 下一轮 | 最后一次分红 | 分给P3D Token持有人
-------|----------------|--------|--------------|----------------
whales | 50%            | 25%    | 15%          | 10% 
bears  | 50%            | 25%    | 25%          | 0% 
bulls  | 50%            | 10%    | 30%          | 10% 
sneks  | 50%            | 10%    | 20%          | 20%
</code></pre>

<ul>
<li><p>whales: 此角色实时分红最少，更多的钱是分配给奖池，并且最终游戏结束时，会拿出最大的一部分分给下一轮，并且会拿出不小的比例分给PoWH3D的玩家，它是庄家，它希望池子越来越大，吸纳的ETH越来越多</p></li>
<li><p>bears: 它是高玩，博的是最后的大奖，并且希望能一轮一轮玩下去，他没有动力去捧PoWH3D这个空气币的场子</p></li>
<li><p>bulls: 它是尽可能博取高收益的那个人，他希望一把梭财务自由了就去会所，永不回头</p></li>
<li><p>sneks: 这是自以为最明智的那波人，他们认为这个游戏无穷无尽，没有终结的一天；他们纯粹把游戏当成庞氏骗局，并企图成为那个入场早的人，稳稳的分红来得利；大多数赌徒都以为自己比别人聪明，所以Sneks最多</p></li>
</ul>


<p><strong>需要注意的是，真实情况下，每个人的产品选择是不同的。即使大部分销量都是Sneks提供的，只要最后的赢家是Whales，最终轮的奖金分配也会按照Whales的比例来进行。所以情况并不像上面的分析那么简单。</strong></p>

<h4>模拟计算</h4>

<p>早期的token发行量低，分红拿到你手上的比例更大：只有1个token时，你独享所有的分红（其实是你自己贡献的，也就是立刻拿回50%+的投入）。到了100个token时，即使分红一样，你只能拿到1%，这个区别显然是非常大的。</p>

<p>第一把key本身的价格是7.5e-5，立刻拿出4e-5来分红，因为此时只有一个人，所以全都归自己，这样瞬间就回收了54%的投资，太棒了！</p>

<p>第二把key的价格只略微上升，总的分红还是一样（这里没有列出来），但是因为已经有两个人在了，所以属于自己的分红瞬间减半。两次累计，累计回收率81%。</p>

<p>第三把key，价格几乎不变，分红降低到初始的1/3，累计回收99%，已经几乎拿回所有的投入。</p>

<p>来个Excel很容易算明白，第一把key只用了3个key就达到100%的回收率。但是从100%到200%用了19把key（22左右），从200-300%用了130把key（150左右）。增速放慢非常明显。</p>

<p>这个曲线不是渐近线，这是调和级数的求和，所以是不收敛的。用地球人的语言，就是说如果后面有无穷多人参加，第一个投资者的收益率理论上可以无限高。</p>

<p>当然，我们直到这条曲线的曲率是无限接近于0度的，分析前几轮已经没有意义了，应为现在发行的Key已经超过了3400w个；对于近期入场的用户来说，10次回收率已经低得可怜了 (有人测算小于0.000018%）。</p>

<p>为此，我们可以看2x回收率： 对于n时刻入场的投资者，分红n次（也就是持有到2xn时刻）的总回收率。这样虽然每次分红的金额随着1/n 不断的减小，但是分红次数n不断增加，可以让2x回收率基本保持在一个范围之内。</p>

<p>具体测算一下，对于3kw个key时候入场的人，就算翻倍增加到6kw个key，也才刚刚回本一半&hellip;&hellip;.这还是假设未来绝大部分投资者投会继续选择实时分红率最高的Snek。所以，我认为现在还想通过实时分红回本已经非常难了。</p>

<p>如果用投入总资金量来计算，现在总投入资金大概在95000个ETH，如果只依靠分红回本，就是总投入资金到达760000ETH的时候，你才能回本，大概需要资金增长7X，并且这个数字会越来越大。</p>

<p>没有错，这样我们就遇到了&lt;博弈论>里面的那个经典问题，一屋子里面的人从1-100猜一个数，最后平均每个人的猜测，最接近平均数66%的人获胜。理智的人就会无限压缩这个数，直到某个足够小的数。</p>

<p>然后放到这个游戏里来，我应该在总投入多少ETH的时候入场，才能称之为早期入场者呢？</p>

<p>已知场外总资金N，求入场总资金临界点n, n>N/7 就赔本；</p>

<p>已知N最大是1个亿，那么一定要在 总盘子 接近 1亿/7的之前进场，大家都是理性人， 一定要在 1亿/7/7之前进场，~~~，最终这个数字是多少呢？</p>

<p>如果参与者都是理性人，那么你应该永远不入场!!</p>

<p>如果参与者都是耶鲁级别的精英，按照他们的百分比观点来推算，假设最后所有ETH持有人都被这个游戏的玩法覆盖到了，盘子148W的时候就是临界点。</p>

<p>如果参与者都是下海一把梭，唔，只有上帝才能知道答案了，也许上帝也算不出来~~~</p>

<p>当然有很多锁币的，厌恶风险的，并不是100%的ETH持有人都会参与，那么N是多少呢，最终n又会是多少呢？</p>

<p>少年，自己揣测吧。</p>

<h3>推荐获利</h3>

<p>事实上这个游戏11号上线，20号就开始井喷，一度达到以太坊所有交易的40%，真的有人号称一小时回本，一天回本；但是22号之后增长乏力，后来者看来已经是妥妥的韭菜了；来也匆匆，去也匆匆；好一个科技加持下的区块链骗局！</p>

<p>就这样吗？如果仅仅是这样，就是个平庸的庞氏骗局而已，我也不会称这个游戏可怕了。</p>

<p>相比动不动几千万的回本周期，10%的推荐/传销机制就非常有意思了。</p>

<p>而且这个游戏的这种“半锁定“的推荐人机制也显得非常可疑：</p>

<p>普通电商的推荐人奖励一般只针对一次特定的购买行为，不会与后续购买行为挂钩（不锁定）；</p>

<p>而传销的推荐人奖励是完全固定的（全锁定）；</p>

<p>这个游戏中采用了半锁定的方式：持续奖励，但是可以随时更换推荐人。</p>

<p>考虑到推荐机制的半锁定性，我认为待新鲜韭菜开发完毕以后，大家会进入“偷菜”的阶段：通过返利的方式把其他人的下线给抢过来。</p>

<p>合约代码虽然允许变更推荐人，但是不允许自己做自己的推荐人，是不是用心良苦。</p>

<p>现在各路神仙肯定纷纷开始科普文章，然后不经意间附上自己的链接小尾巴开始拉人头(注意哈，这篇文章出现的所有链接都是我瞎编的，不存在返利给我的情况，另外如果有巧合你点进去了，那个推荐也是我瞎写的，如有重复，纯属巧合)；将来肯定会出现类似淘宝客/阿里妈妈/返利网一样的F3D返利网站：</p>

<p>通过我的链接买入，我直接给你eth返利。这样你也不用折腾两个id这类的事情，直接来我这边统一返利。一旦形成一定的流量，不管是后面切平台，还是做二级市场，都有可能。</p>

<p>当分红不足以撑起这个庞氏的时候，推荐返利，作为人类已经重复了几千年的模式，会又为这个游戏注入很长时间的生命值</p>

<h3>炒作标的</h3>

<p>上面的一切分析，是建立在大伙作为Sneks其乐融融参与的基础上的；但是其实整个游戏中还有另外一股势力，就是被遗忘的PoWH3D Token持有人，他们享有池子的一部分分红权；P3D也是一个庞氏设计的空气币，在FOMO 3D的加持下，相信PoWH3D Token的价格又是一轮水涨船高，那些自以为<code>更聪明</code>的韭菜们，肯定会对这个炒币游戏更为热衷；</p>

<p>另外，FOMO 3D的池子里，入局越早的参与者，是可以无限拿分红的，但是他们有些人性子比较急，说我想便宜点把这个分红权卖掉，有人接盘吗？ 好嘛，这不是可转债市场就蹦出来了嘛，人类的创造力就是这么开发的~~~</p>

<p>另外，ETH的流动性不断枯竭，会推高整个数字货币场子的市值吗？还是因为信心跌落相反之？</p>

<h3>最终大奖</h3>

<p>无论骗局怎样精巧，怎样美好，最终都会破灭的；FOMO 3D的可怕之处在结束时体现的淋漓尽致；</p>

<p>当最终所有能被忽悠的人都被忽悠进去了，游戏再也没有人接盘了，24小时倒计时一步步接近尾声，这时候吸引来了最后一拨人。</p>

<p>就是最后还持有ETH流动性，不动如山的那波人。</p>

<p>但是人性贪婪，没人例外。为了整个池子最后的50%大奖，他们最终会飞蛾扑火，注入最后一点ETH流动性，讽刺的是游戏的时间又会因此延长：</p>

<ul>
<li><p>在游戏的最初一分钟，是漫长的，无数赌客趋之若鹜，将这一分钟拉长</p></li>
<li><p>在游戏的最后一分钟，也是漫长的，无数聪明人飞蛾扑火，将这一分钟拉至永恒</p></li>
<li><p>我们说FOMO 3D是个可怕的游戏，因为历史上所有的骗局，或者因为信息不对称，或者因为信任度永远不能100%加成，即使国家背书，全民狂热，影响总是有限</p></li>
<li><p>FOMO 3D是目前诈骗行业的集大成者，他在坚不可摧的区块链之上，用坚不可摧的代码构筑坚不可摧的骗局；人类在其面前毫无还手之力，悲哉壮哉</p></li>
<li><p>我们老是说区块链技术重新定义了人们的信任方式，我更爱称这门技术只是放大了人性，不论是信任还是贪婪；整个社会的人性是守恒的，当你得到了更多的信任，也会释放相同的贪婪；区块链是人性的放大器</p></li>
</ul>


<h2>结局</h2>

<p>这个故事有以下几种结局:</p>

<ul>
<li>虽然FOMO 3D只有短短千行代码，但是我相信有很大的机率存在BUG，或者和以往一样，这场赌局会以一个意想不到的黑客事件结局</li>
</ul>


<p>目前已经有人指出了空投部分的漏洞，也有人说这是团队故意所为，自己判断吧:</p>

<p><a href="https://www.reddit.com/r/ethereum/comments/916xni/how_to_pwn_fomo3d_a_beginners_guide/">https://www.reddit.com/r/ethereum/comments/916xni/how_to_pwn_fomo3d_a_beginners_guide/</a></p>

<ul>
<li><p>我相信，最后一分钟，以太坊会有很大的机率不出块，也许是因为网络阻塞，也许是因为矿池联合，或者~~天怒人怨而已</p></li>
<li><p>这个游戏及其变种山寨不断抽取ETH流动性,交易量巨大阻塞网络，以太坊从此消亡</p></li>
<li><p>V神奋起反击，硬分叉以太坊；但是此种智能合约模式打开的潘多拉魔盒将会重创合约币，长久来看是对所谓打着区块链2.0，3.0旗号的币的利空</p></li>
<li><p>这个游戏Round1持续到地老天荒，后面有一批接盘侠在以太坊存在之年没有回本的希望，但是最后博大奖的欲望又诱使人们不断的投入小钱来维持这个游戏，庄家成为最大赢家； FOMO 3D作为人类历史上持续时间最长的经典诈骗笑傲江湖；作为人性贪婪的绝妙的活教科书，活体实验室供社会学家们研究·测算；论文题目我都想好了:</p></li>
</ul>


<h4>人类生而善还是恶，善恶各占几何？</h4>

<h3>参考资料:</h3>

<p>合约地址:<a href="https://etherscan.io/address/0xA62142888ABa8370742bE823c1782D17A0389Da1">https://etherscan.io/address/0xA62142888ABa8370742bE823c1782D17A0389Da1</a></p>

<p>合约代码:<a href="https://etherscan.io/address/0xA62142888ABa8370742bE823c1782D17A0389Da1#code">https://etherscan.io/address/0xA62142888ABa8370742bE823c1782D17A0389Da1#code</a></p>

<p>数据分析:<a href="https://zhuanlan.zhihu.com/p/40571085">https://zhuanlan.zhihu.com/p/40571085</a></p>

<p>入门教程:<a href="https://zhuanlan.zhihu.com/p/40233591">https://zhuanlan.zhihu.com/p/40233591</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate Vm Instances and Snapshots From Different Vps Supporters or Accounts]]></title>
    <link href="http://happy123.me/blog/2018/07/21/migrate-vm-instances-and-snapshots-from-different-vps-supporters-or-accounts/"/>
    <updated>2018-07-21T09:11:55+08:00</updated>
    <id>http://happy123.me/blog/2018/07/21/migrate-vm-instances-and-snapshots-from-different-vps-supporters-or-accounts</id>
    <content type="html"><![CDATA[<p>虽然已经进入X时代了，但电脑城装机习惯性还是用Ghost，无他，习惯方便。</p>

<p>Linux上面系统迁移，网上搜一搜，大批文章还是原始的dd, rsync之类；当然，不是说他不行，而是面向小白实在是有点坑啊。</p>

<p>云时代，不同厂商间基本都提供了<code>快照</code>+<code>在线热迁移</code>的方案了，用起来也很舒服。</p>

<p>那么，作为一个VPS小白用户，怎么在不同的账号，或者说不同的厂商之间，迁移我的Linux系统呢？</p>

<p>比如我在vultr上面有两个账号，vultr的快照功能是很赞的，免费、速度快、生成虚机靠谱；</p>

<p>那么问题来了，怎么把账号A的Linux A迁移到账号B的Linux B虚机上呢？</p>

<p>官方回复是还没有考虑这个功能，然后Linux怎么可能做不到这种简单的事情呢？当然立刻就有人回复了详细的搞法，还贴心的附录了视频:</p>

<p><a href="https://discuss.vultr.com/discussion/104/snapshot-image-downloads/p2">https://discuss.vultr.com/discussion/104/snapshot-image-downloads/p2</a></p>

<!-- more -->


<h4>我们也嘴炮一下整个过程:</h4>

<ol>
<li><p>对Linux A建立SnapShot A</p></li>
<li><p>从SnapShot A创立一台虚机 (注意这台虚机的磁盘要比Linux A的磁盘大，比如Linux A是5$的套餐15GB，那么最好建立一个20$的套餐45GB)</p></li>
<li><p>vultr 有挂载光盘的功能，可以挂载一个linux live CD,用这张Live CD启动新虚机</p></li>
<li><p>dd 命令完全拷贝原有磁盘</p>

<p> dd if=/dev/vtbd0 bs=1m | gzip -c | ssh -e none myolduser@myoldserverip &lsquo;cat > backupsnapshot.iso.gz&rsquo;</p></li>
<li><p>账号B开一台虚机，把backupsnapshot.iso.gz拷贝过去</p></li>
<li><p>同样挂载Live CD，反向dd，恢复文件系统</p></li>
<li><p>重启，改配置，赋权限，搞定</p></li>
</ol>


<p>说是嘴炮，是因为我之前硬盘dd对拷过，对于速度和之后的配置兼容深为烦恼，更不用说KVM上面用这个招数去做迁移了，我一个坑都不想踩的。</p>

<p>光是看看上面一波操作，我就没兴趣折腾了。当然也有很多人的乐趣就是折腾，但是年纪大了就老是想偷懒。</p>

<p>之前在不同物理机之间做Linux迁移，用clonezilla居多，虽然有一些Raid方面的支持会有问题，总体来说我对它的稳定性和便利性有巨大信任，但从来没有在KVM上搞过，这次我完整实验了一把，效果MAX。</p>

<h4>下面我们说说怎么用clonezilla把上面繁琐的手工操作搞得不那么痛苦一点:</h4>

<ol>
<li><p>先去clonezilla.org 官网，找到下载地址，好吧，我已经帮你找好了:</p>

<p> <a href="http://onet.dl.osdn.jp/clonezilla/69273/clonezilla-live-2.5.5-38-amd64.iso">http://onet.dl.osdn.jp/clonezilla/69273/clonezilla-live-2.5.5-38-amd64.iso</a></p></li>
<li><p>vultr很贴心的提供了从url上传镜像的功能，我们到下面这个功能项中把iso镜像的url填进去，添加clonezilla镜像文件到vultr:</p>

<p> <a href="https://my.vultr.com/iso/add/">https://my.vultr.com/iso/add/</a></p></li>
<li><p>点开虚机Linux A，点击<code>Settings</code> &ndash;> <code>Custom ISO</code> &ndash;> 选择clonezilla &ndash;> 点击 <code>Attach ISO and Reboot</code></p></li>
<li><p>用VNC连接虚机，进入clonezilla的界面</p></li>
<li><p>进入菜单项，<code>第一菜单800X600分辨率</code> &ndash;> <code>简体中文</code> &ndash;> <code>使用再生龙</code></p></li>
<li><p>选择 <code>remote-source 进入远程设备克隆的源端</code></p></li>
<li><p>选择 <code>初学模式：接受默认的选择</code></p></li>
<li><p>选择 <code>复制本机硬盘到它机硬盘</code></p></li>
<li><p>选择 <code>设定固定IP地址</code></p></li>
<li><p>设定IP,子网掩码，网关,域名服务器，如果机器有多块网卡的话，一般会列出网卡名字和MAC地址供你选择，vultr一般是双网卡(如果你启用了内网地址的话),网络信息在vultr的主机settings中能查到。</p></li>
<li><p>选择要克隆的硬盘，设定没有问题的话，下面一路YES下去，机器就会进入等待目标端连接的状态</p></li>
<li><p>在账号B的Linux B中重复1-11步操作，不同的是第6步选择目标端，第8步选择 <code>从镜像文件恢复至本机硬盘</code>, 之后填入Linux A的IP地址，就可以开始克隆对拷了</p></li>
<li><p>我在不同vultr的账号中测试了Ubuntu16.04, Centos7.1, FreeBSD 10的迁移，效果MAX</p></li>
</ol>


<p>看起来步骤不少，熟练了还是能迅速操作的，clonezilla赞一个</p>

<h4>一点小ToolTIps:</h4>

<ul>
<li><p>这个方法其实可以适用所有KVM虚机迁移，所以只要服务商开了自定义镜像挂载的功能，都可以跨公网对拷</p></li>
<li><p>如果A和B不能直接通信的话，可以开一台中转机器C，在Linux A的一端把硬盘 clone为镜像文件，通过SSH文件服务器的方式转存到C上，然后在B上连接SSH文件服务器C，从而还原系统; 提示一下，其实生成的镜像文件挺小的，比dd之后压缩还小的多</p></li>
<li><p>如果clone的时候报错，一般是A 端的文件系统有损坏，这个时候可以简单的执行 <code>shutdown -rF now</code> ,重启后自动修复一把，之后再挂载clonezilla ISO进行克隆</p></li>
</ul>


<h4>最后，让我们期望所有的服务商都能提供 qcow2 的导入导出功能</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crawler ABC]]></title>
    <link href="http://happy123.me/blog/2018/07/04/crawler-abc/"/>
    <updated>2018-07-04T19:04:58+08:00</updated>
    <id>http://happy123.me/blog/2018/07/04/crawler-abc</id>
    <content type="html"><![CDATA[<p>一个小爬虫的主要的套路就是requests, beautifulsoup, phantomjs.</p>

<!-- more -->


<h2>requests</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def get_html(url):
</span><span class='line'>    headers = {
</span><span class='line'>        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0',
</span><span class='line'>        'Accept': 'application/json, text/plain, */*',
</span><span class='line'>        'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
</span><span class='line'>        'Accept-Encoding': 'gzip, deflate, br',
</span><span class='line'>        'Content-Type': 'application/x-www-form-urlencoded',
</span><span class='line'>    }
</span><span class='line'>    resp = requests.get(url, headers=headers)
</span><span class='line'>    if resp.status_code == 200:
</span><span class='line'>        return resp.content
</span><span class='line'>    else:
</span><span class='line'>        raise ValueError("Not valid response:{}".format(resp.content))
</span></code></pre></td></tr></table></div></figure>


<h2>beautifulsoup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from bs4 import BeautifulSoup
</span><span class='line'>def get_username(html):
</span><span class='line'>    soup = BeautifulSoup(html, 'lxml')
</span><span class='line'>    user_div = soup.find(id='uhd')
</span><span class='line'>    username = user_div.find('h2', class_='mt').get_text().strip()
</span><span class='line'>    return username</span></code></pre></td></tr></table></div></figure>


<h2>phantomjs</h2>

<p>用法非常简单，但是每次都得去查文档，封装成一个傻瓜类比较实在</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class WebClient(object):
</span><span class='line'>
</span><span class='line'>    USER_AGENTS = [
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1",
</span><span class='line'>        "Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1",
</span><span class='line'>        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
</span><span class='line'>        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
</span><span class='line'>        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1",
</span><span class='line'>        "Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1",
</span><span class='line'>        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3",
</span><span class='line'>        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24",
</span><span class='line'>        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"
</span><span class='line'>    ]
</span><span class='line'>
</span><span class='line'>    def __init__(self, phantomjs_driver_path='/usr/local/bin/phantomjs'):
</span><span class='line'>        # 引入配置对象DesiredCapabilities
</span><span class='line'>        dcap = dict(DesiredCapabilities.PHANTOMJS)
</span><span class='line'>
</span><span class='line'>        # 从USER_AGENTS列表中随机选一个浏览器头，伪装浏览器
</span><span class='line'>        dcap["phantomjs.page.settings.userAgent"] = (random.choice(self.USER_AGENTS))
</span><span class='line'>
</span><span class='line'>        # 不载入图片，爬页面速度会快很多
</span><span class='line'>        dcap["phantomjs.page.settings.loadImages"] = False
</span><span class='line'>
</span><span class='line'>        # 设置代理
</span><span class='line'>        # service_args = ['--proxy=127.0.0.1:1080', '--proxy-type=http']
</span><span class='line'>
</span><span class='line'>        # 打开带配置信息的phantomJS浏览器
</span><span class='line'>        self._driver = webdriver.PhantomJS(phantomjs_driver_path, desired_capabilities=dcap)
</span><span class='line'>
</span><span class='line'>        # 隐式等待5秒，可以自己调节
</span><span class='line'>        self._driver.implicitly_wait(5)
</span><span class='line'>
</span><span class='line'>        # 设置10秒页面超时返回，类似于requests.get()的timeout选项，driver.get()没有timeout选项
</span><span class='line'>        # 以前遇到过driver.get(url)一直不返回，但也不报错的问题，这时程序会卡住，设置超时选项能解决这个问题。
</span><span class='line'>        self._driver.set_page_load_timeout(10)
</span><span class='line'>        # 设置10秒脚本超时时间
</span><span class='line'>        self._driver.set_script_timeout(10)
</span><span class='line'>
</span><span class='line'>    @property
</span><span class='line'>    def driver(self):
</span><span class='line'>        return self._driver
</span></code></pre></td></tr></table></div></figure>


<p>用起来也很简单，拿登陆163邮箱做例子:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def login_163(email, password):
</span><span class='line'>    login_url = 'http://m65.mm.mail.163.com/'
</span><span class='line'>    driver = WebClient().driver
</span><span class='line'>    driver.get(login_url)
</span><span class='line'>    driver.implicitly_wait(10)
</span><span class='line'>
</span><span class='line'>    try:
</span><span class='line'>        driver.execute_script('document.querySelector(".m-footer").querySelector("a").click();')
</span><span class='line'>        driver.execute_script('document.getElementById("entryMail").click();')
</span><span class='line'>    except Exception as _:
</span><span class='line'>        pass
</span><span class='line'>
</span><span class='line'>    time.sleep(3)
</span><span class='line'>    driver.find_element_by_xpath('//input[@name="username"]').send_keys(email.split('@')[0])
</span><span class='line'>    driver.find_element_by_xpath('//input[@name="password"]').send_keys(password)
</span><span class='line'>    mail_select = Select(driver.find_element_by_xpath('//select[@name="domain"]'))
</span><span class='line'>    mail_select.select_by_value(email.split('@')[-1])
</span><span class='line'>    # driver.save_screenshot(email + '.png')
</span><span class='line'>
</span><span class='line'>    # submit
</span><span class='line'>    driver.find_element_by_id('submit').submit()
</span><span class='line'>    driver.implicitly_wait(10)
</span><span class='line'>    time.sleep(5)
</span><span class='line'>    # driver.save_screenshot(email + '.login.png')
</span><span class='line'>
</span><span class='line'>    login_info = driver.find_element_by_xpath('//div[@class="fgreet"]/strong').text
</span><span class='line'>    driver.quit()
</span><span class='line'>
</span><span class='line'>    return login_info.strip() == email</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Grep Obtain Patterns From File]]></title>
    <link href="http://happy123.me/blog/2018/07/04/how-to-grep-obtain-patterns-from-file/"/>
    <updated>2018-07-04T18:06:55+08:00</updated>
    <id>http://happy123.me/blog/2018/07/04/how-to-grep-obtain-patterns-from-file</id>
    <content type="html"><![CDATA[<p>有一个100G的大文本文件 emailinfo.dict，包含邮箱及用户昵称; 格式为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello@163.com,你是我的海
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>有一个用户名文件user.txt，格式为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa
</span><span class='line'>xxxx
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>我们希望找出emailinfo.dict中，以user.txt中用户名开头的所有内容。</p>

<p>首先将user.txt内容改为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^aaa
</span><span class='line'>^xxxx
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>然后执行:</p>

<pre><code>grep -G -f user.txt emailinfo.dict
</code></pre>

<p>这个<code>-G</code>参数又花了我半个小时去读文档，我都不知道第几次做这种事情了。人年纪大了果然只能靠笔记。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peewee ABC]]></title>
    <link href="http://happy123.me/blog/2018/07/03/peewee-abc/"/>
    <updated>2018-07-03T11:10:09+08:00</updated>
    <id>http://happy123.me/blog/2018/07/03/peewee-abc</id>
    <content type="html"><![CDATA[<p>在我用了又一个小时的时间去温习sqlchemy丰富的文档后，我放弃治疗了。</p>

<p>我的智商还是适合比较简单的幼儿化的Python库，于是我转向Peewee了。</p>

<h2>定义Model</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from peewee import SqliteDatabase, Model, CharField
</span><span class='line'>
</span><span class='line'>db = SqliteDatabase('testdb.sqlite3')
</span><span class='line'>
</span><span class='line'>class User(Model):
</span><span class='line'>    username = CharField(index=True)
</span><span class='line'>    password = CharField()
</span><span class='line'>    email = CharField(index=True)
</span><span class='line'>    birthday = DateField()
</span><span class='line'>    is_relative = BooleanField()
</span><span class='line'>
</span><span class='line'>    class Meta:
</span><span class='line'>        database = db
</span></code></pre></td></tr></table></div></figure>


<h2>创建</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; db.connect()
</span><span class='line'>&gt;&gt;&gt; db.create_tables([User])</span></code></pre></td></tr></table></div></figure>


<h2>保存</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; user_record = User(name='Bob', password="", email="hello@world.com", birthday=date(1960, 1, 15), is_relative=True)
</span><span class='line'>&gt;&gt;&gt; user_record.save()
</span></code></pre></td></tr></table></div></figure>


<h2>批量插入</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fields = [User.username, User.password, User.email, User.birthday, User.is_relative]
</span><span class='line'>user_records.append(
</span><span class='line'>    (username, password, email, birthday, True),
</span><span class='line'>    (username, password, email, birthday, True),
</span><span class='line'>    (username, password, email, birthday, True),
</span><span class='line'>)
</span><span class='line'>User.insert_many(user_records, fields=fields).execute()
</span></code></pre></td></tr></table></div></figure>


<h2>查询</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for user in User.select().where(User.username.contains(username)):
</span><span class='line'>    print(user.username ....)</span></code></pre></td></tr></table></div></figure>


<h2>关闭</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; db.close()</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Proxy for Git]]></title>
    <link href="http://happy123.me/blog/2018/06/11/how-to-set-proxy-for-git/"/>
    <updated>2018-06-11T11:12:20+08:00</updated>
    <id>http://happy123.me/blog/2018/06/11/how-to-set-proxy-for-git</id>
    <content type="html"><![CDATA[<h3>全局设置和取消:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global https.proxy http://127.0.0.1:1080
</span><span class='line'>
</span><span class='line'>git config --global https.proxy https://127.0.0.1:1080
</span><span class='line'>
</span><span class='line'>git config --global --unset http.proxy
</span><span class='line'>
</span><span class='line'>git config --global --unset https.proxy</span></code></pre></td></tr></table></div></figure>


<h3>local设置和取消:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config  https.proxy http://127.0.0.1:1080
</span><span class='line'>
</span><span class='line'>git config  https.proxy https://127.0.0.1:1080
</span><span class='line'>
</span><span class='line'>git config  --unset http.proxy
</span><span class='line'>
</span><span class='line'>git config  --unset https.proxy</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Becoming Warren Buffett]]></title>
    <link href="http://happy123.me/blog/2018/06/10/becoming-warren-buffett/"/>
    <updated>2018-06-10T23:04:31+08:00</updated>
    <id>http://happy123.me/blog/2018/06/10/becoming-warren-buffett</id>
    <content type="html"><![CDATA[<p>看了一遍 《Becoming Warren Buffett》 这部纪录片。</p>

<p>印象里巴菲特总是与成功学书籍联系在一起，作为股神，他的公司Berkshire Hathaway的股票价格达到了近$300,000一股，实在是让人叹为观止。</p>

<p>后来有时间仔仔细细读了他每年致股东的信，距离一下子拉近了，他确实是个不凡的人。</p>

<p>巴菲特不同于一般的投机者，他是一个受人尊敬的人。人们尊敬他，并不仅仅是因为他的富有：</p>

<h3>1. 巴菲特很早就确定了自己喜欢做什么，自己的人生信条是什么，并用一生去实践。</h3>

<p>大部分人一辈子也不明白自己到底喜欢做什么，就这样浑浑噩噩一生过去了。</p>

<p>早早找到自己喜欢做的事情，才能拥有充实的人生。</p>

<p>当你发现自己内心深处的期望后，要有勇气去克服困难，并尽一切努力去追寻它，守护它；</p>

<p>全世界只有你最了解自己想要什么，在这一方面，其他任何人的意见都不值得参考；</p>

<p>也许你说这是一种固执，但是如果你有了信念，不要轻易动摇，用你的一生或者半生去实践这个信念。</p>

<p>所谓信念，就是值得你赌上一生去判断对错的东西。</p>

<h3>2. 巴菲特洞悉了时间之谜。他遵循内心的信念，数十年如一日的耐心等待，他是少数能与时间友好相处的那个人。</h3>

<p>人在生物学上就是一种短视的动物，早在人类初期，生存环境恶劣，那时候的人类不得不把大部分精力放在眼前。筹划未来是一种负担，因为你不知道明天会发生什么，自己能不能活下去。</p>

<p>随着科技水平的提高，人们的寿命也不断提高，但是&#8221;只顾眼前&#8221;是刻在人类进化的基因里面的，不会轻易改变。所以人们今晚做出的决定，明天又会被自己轻易否决。</p>

<p>人们焦虑的追逐时间却往往没有所得，基因诱使我们焦虑。让我们短视，急于求成。</p>

<p>只有那些真正把握信念的人才能不为所动，巴菲特就是其中的佼佼者。</p>

<p>让我们记住  &ldquo;不为所动&#8221;，<code>耐心</code>是需要人类不断锻炼自己才能拿到的美德。</p>

<h3>3. 巴菲特的故事里面包含了信念、坚韧、固执、耐心、快乐这些字眼。</h3>

<p>他从一而终的守护自己的观点，并实践终身。就像是运动员不断超越极限，我们看到一个自律的人究竟能达到什么样的高度，这份了不起的坚守打动了我们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Split Large ‘tar’ Archive Into Multiple Files of Certain Size]]></title>
    <link href="http://happy123.me/blog/2018/06/10/how-to-split-large-tar-archive-into-multiple-files-of-certain-size/"/>
    <updated>2018-06-10T21:50:43+08:00</updated>
    <id>http://happy123.me/blog/2018/06/10/how-to-split-large-tar-archive-into-multiple-files-of-certain-size</id>
    <content type="html"><![CDATA[<p>有时候需要压缩文件的时候同时分割一下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar czvf - -C /mnt/g/dict/ weakpass_merge.dict |split -b 10000M - "weakpass.part.tar.gz."</span></code></pre></td></tr></table></div></figure>


<p>还原:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat weakpass.part.tar.gz.*|tar zxvf</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
