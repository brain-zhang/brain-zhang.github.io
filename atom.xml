<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[brainzhang blog]]></title>
  <link href="http://brain-zhang.github.io/atom.xml" rel="self"/>
  <link href="http://brain-zhang.github.io/"/>
  <updated>2015-07-14T09:11:11+00:00</updated>
  <id>http://brain-zhang.github.io/</id>
  <author>
    <name><![CDATA[brainzhang]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[Linux Profile and Debug Tools of Performance]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/06/28/linux-profile-and-debug-tools-of-performance/"/>
    <updated>2015-06-28T08:52:15+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/06/28/linux-profile-and-debug-tools-of-performance</id>
    <content type="html"><![CDATA[<h4>用perf工具统计系统调用</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>perf top</span></code></pre></td></tr></table></div></figure>


<p>或者统计一段时间内的调用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>perf record -a -g -F 1000 sleep 30
</span><span class='line'>perf report -g</span></code></pre></td></tr></table></div></figure>


<h4>用strace 追踪某个进程的调用</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strace -c ls</span></code></pre></td></tr></table></div></figure>


<p>或者attach一个进程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strace -c -p pid</span></code></pre></td></tr></table></div></figure>


<h4>查看磁盘调用</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lsof -p pid</span></code></pre></td></tr></table></div></figure>


<h4>磁盘负载</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iostat -x 5 -m</span></code></pre></td></tr></table></div></figure>


<p>整体负载</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vmstat 5 </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Linux Cheat Sheet]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/06/19/linux-cheat-sheet/"/>
    <updated>2015-06-19T01:43:07+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/06/19/linux-cheat-sheet</id>
    <content type="html"><![CDATA[<p>收集linux下需要多次google的命令</p>

<h2>编码问题</h2>

<ul>
<li>utf16 > utf8</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iconv -f UTF-16 -t UTF-8 file_name</span></code></pre></td></tr></table></div></figure>


<h2>web开发命令</h2>

<ul>
<li>curl post 一个json文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Content-Type: application/json"--data @body.json http://localhost:8080/ui/webapp/conf</span></code></pre></td></tr></table></div></figure>


<ul>
<li>curl post 一个json字符串</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -H "Content-Type: application/json"-d '{"username":"xyz","password":"xyz"}' http://localhost:3000/api/login</span></code></pre></td></tr></table></div></figure>


<h2>系统时间</h2>

<ul>
<li>centos6系列修改时区</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</span><span class='line'>vim /etc/sysconfig/clock
</span><span class='line'>ZONE="Asia/Shanghai"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>centos7系列修改时区</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>timedatectl list-timezones | grep Asia
</span><span class='line'>timedatectl set-timezone Asia/Shanghai</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置系统时间</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date +"%Y%m%d%H%M%S"</span></code></pre></td></tr></table></div></figure>


<h2>系统状态</h2>

<ul>
<li>查看系统占用句柄数</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lsof -n|awk '{print $2}'|sort|uniq -c|sort -nr|more</span></code></pre></td></tr></table></div></figure>


<h2>程序</h2>

<ul>
<li>mongo导出</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongoexport  -u crossflow -p '0701!1523#SH' -authenticationDatabase admin -d bpc -c main_app_datapath -o main_app_datapath.json</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Debug Kernel Panic in Centos]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/06/07/debug-kernel-panic-in-centos/"/>
    <updated>2015-06-07T01:22:34+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/06/07/debug-kernel-panic-in-centos</id>
    <content type="html"><![CDATA[<p>当你面对一台新机器，出于某些原因(不是闲的慌)不得不自己编译一个内核时，会碰上kernel panic。</p>

<p>kernel panic很让人心烦，启动时的panic更让人烦，没有挂上硬盘，没有任何log的panic尤其让人烦。</p>

<p>提供几个解决问题的瞎搞方法: （以下内容针对于redhat系，但大部分方法是通用的）</p>

<h4>判断引起panic的环节</h4>

<p>简单描述下启动流程:</p>

<pre><code>1 Power On                                 Maybe Err:Worlds Collides
2 BIOS                                     Maybe Err:Worlds Collides
3 Load Grub From MBR                       Maybe Err:See nothing
4 load Grub and show it                    Maybe Err:Grub loads failed
5 Grub reads menu.list                     Maybe Err:Grub loads failed
6 Grub loads kernel image                  Maybe Err:Grub loads failed
7 kernel mounts root filesystem            Maybe Err:PANIC
8 kernel runs init                         Maybe Err:PANIC
9 init runs scripts to start               Maybe Err:PANIC
</code></pre>

<p>首先你要确认下是哪个环节引起的panic，如果你的log打得比较全，一般能根据蛛丝马迹判断是上面那个环节引起的问题。一般panic发生在step7，step8, step9环节当中。</p>

<ul>
<li><p>step9: 走到这里已经无大碍，无非是/etc/rc.sysinit 之流挂载了不该有的设备，启动了不知道神马的服务，可以直接在启动脚本中打各种log调试</p></li>
<li><p>step8: 这个就比较棘手，一般是initramfs 解压后执行某些脚本报错，所幸是大部分都是init级别的，一般可以在grub的kernel后面加参数，挂载shell调，也可以直接用工具修改initramfs镜像中的文件，重新打包二分法定位</p></li>
<li><p>step7: 也比较棘手，一般panic总要怀疑磁盘驱动，我感觉这个是导致panic的大户，另外如果屏幕没有东东输出，估计视频驱动也要鼓捣一番。</p></li>
</ul>


<p>下面针对 step7，step8级别的panic提供一些瞎搞手段</p>

<h4>在kernel 参数中加入调试开关，关闭ACPI，selinux</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  title CentOS (2.6.32-358.el6.x86_64)
</span><span class='line'>          root (hd0,0)
</span><span class='line'>          kernel /vmlinuz-2.6.32-358.el6.x86_64 ro root=/dev/mapper/vg_localhost-lv_root rd_NO_LUKS rd_NO_MD rd_LVM_LV=vg_localhost/lv_swap crashkernel=128M LANG=zh_CN.UTF-8 rd_LVM_LV=vg_localhost/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM debug selinux=0 acpi=0
</span><span class='line'>          initrd /initramfs-2.6.32-358.el6.x86_64.img</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这是考验人品的时候，不管三七二十一，先把最有可能的问题点排除掉。另外redhat系的会在kernel后面加上 <code>rhgb quiet</code> 之类的参数，统统去掉，开机的时候好好盯着屏幕看看，有没有可疑的东东输出。 因为系统可能会在短时间内输出大量log而没有记录，你需要设置一下输出log的速率和暂停时机，更详细的参数可以在这里找到:</p>

<p><a href="https://wiki.archlinux.org/index.php/Boot_debugging">https://wiki.archlinux.org/index.php/Boot_debugging</a></p>

<h4>在kernel 参数中加入dracut的调试开关</h4>

<p>redhat系后期采用了dracut构建 initrd镜像，关于dracut的手册在这里:</p>

<p><a href="http://people.redhat.com/harald/dracut-rhel6.html#lsinitrd">http://people.redhat.com/harald/dracut-rhel6.html#lsinitrd</a></p>

<p>调试开关在这里:</p>

<p><a href="https://fedoraproject.org/wiki/How_to_debug_Dracut_problems">https://fedoraproject.org/wiki/How_to_debug_Dracut_problems</a></p>

<p>你可以设定rdshell，在panic之后跳入dracut提供的shell，打dmesg看看log信息。</p>

<h3>最后的最后，实在不知道为啥了，而且你很闲，可以考虑启动时加串口设备调试</h3>

<h4>一些tooltip</h4>

<ul>
<li><p>编译kernel的时候，make menuconfig，3.10以后的内核支持搜索某个开关后按数字键直接跳到那个开关的设置项中，这个很有用</p></li>
<li><p>redhat系用dracut构建initrd，配置文件默认在 /usr/share/dracut/ ，如果你懒得改 initramfs，可以直接修改里面的配置文件，然后重新make install即可</p></li>
<li><p>有时候你不好确认根文件系统挂载到哪里了，可以参考这里:</p></li>
</ul>


<p><a href="http://free-electrons.com/blog/find-root-device/">http://free-electrons.com/blog/find-root-device/</a></p>

<p>其它参考资料:</p>

<p><a href="http://www.tuxradar.com/content/how-fix-linux-boot-problems">http://www.tuxradar.com/content/how-fix-linux-boot-problems</a></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Tcpdump Commands]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/05/08/tcpdump-commands/"/>
    <updated>2015-05-08T12:06:22+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/05/08/tcpdump-commands</id>
    <content type="html"><![CDATA[<p>tcpdump 的抓包保存到文件的命令参数是-w xxx.cap</p>

<ul>
<li>抓eth1的包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 -w /tmp/xxx.pcap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>抓 192.168.1.123的包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 host 192.168.1.123 -w /tmp/xxx.cap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>抓192.168.1.123的80端口的包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 host 192.168.1.123 and port 80 -w /tmp/xxx.cap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>抓192.168.1.123的icmp的包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 host 192.168.1.123 and icmp -w /tmp/xxx.cap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>抓192.168.1.123的80端口和110和25以外的其他端口的包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 host 192.168.1.123 and ! port 80 and ! port 25 and ! port 110 -w /tmp/xxx.cap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>抓vlan 1的包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 port 80 and vlan 1 -w /tmp/xxx.cap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>抓pppoe的密码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 pppoes -w /tmp/xxx.cap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>以100m大小分割保存文件， 超过100m另开一个文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcpdump -i eth1 -w /tmp/xxx.cap  -C 100m</span></code></pre></td></tr></table></div></figure>


<ul>
<li>把后两个数据包并到一个数据包merge.pcap</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mergecap -w merge.pcap 1.pcap 2.pcap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>按照radius条件过滤数据包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tshark -r 1.pcap radius -w radius.pcap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>按照数据包数分割一个大的数据</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>editcap -c 1000000 merge.pcap split01.pcap</span></code></pre></td></tr></table></div></figure>


<ul>
<li>split pcap</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>editcap -c 100000 in.pcap out.pcap</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[How to Xargs Separate Parameters]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/05/06/how-to-xargs-separate-parameters/"/>
    <updated>2015-05-06T00:06:52+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/05/06/how-to-xargs-separate-parameters</id>
    <content type="html"><![CDATA[<p>做过很多遍了，每次还是得现查，记一下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "'param 1' 'param 2'" | xargs -n1 | xargs -I@ echo \[@\] \[@\]</span></code></pre></td></tr></table></div></figure>


<p>output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[param 1] [param 1]
</span><span class='line'>[param 2] [param 2]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Python编程实战 - 笔记1]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/04/27/pythonbian-cheng-shi-jian-bi-ji-1/"/>
    <updated>2015-04-27T00:17:45+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/04/27/pythonbian-cheng-shi-jian-bi-ji-1</id>
    <content type="html"><![CDATA[<p>这本书讲的挺实在的，设计模式的部分又复习了一遍。另外又学了几个Python3的新decorator。</p>

<h2>创建型设计模式</h2>

<h4>抽象工厂 (Abstract Factory)</h4>

<ul>
<li>名字就用AbstractFactory好了，不要起什么BaseFactory之类的</li>
<li>相关类都放到对应的Factory Class里面，不要暴露给外面了</li>
</ul>


<h4>建造者模式 (Build)</h4>

<ul>
<li>和工厂的区别就是保存了创建对象时各个部分的细节</li>
</ul>


<h4>工厂模式</h4>

<ul>
<li>根据情况实例化对象</li>
<li>还是注意和抽象工厂的区别，抽象工厂是将创建对象的行为抽象出来，而工厂模式则是根据要创建的对象类型实例化</li>
</ul>


<h4>原型模式 (Prototype)</h4>

<ul>
<li>这个模式其实在javascript的根本，不过Python的实现方法还真是五花八门，我说直接用copy就好了嘛</li>
</ul>


<h4>单例模式 (Singleton)</h4>

<ul>
<li>我最中意的一种实现:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Borg:
</span><span class='line'>    _shared_state = {}
</span><span class='line'>    def __init__(self):
</span><span class='line'>        self.__dict__ = self._shared_state
</span><span class='line'>
</span><span class='line'>class Singleton(Borg):
</span><span class='line'>    def __init__(self, arg):
</span><span class='line'>        Borg.__init__(self)
</span><span class='line'>        self.val = arg
</span><span class='line'>    def __str__(self):
</span><span class='line'>        return self.val</span></code></pre></td></tr></table></div></figure>


<h2>结构型设计</h2>

<ul>
<li>作用就是改装对象，或者把小对象合并为大对象</li>
</ul>


<h4>Adapter</h4>

<ul>
<li>其实就是转接方法</li>
</ul>


<h4>Bridge</h4>

<ul>
<li>把方法抽象出来</li>
</ul>


<h4>Composite</h4>

<ul>
<li>Python里面有一种省一点内存的写法，可以直接用CompositeItem和Item两个类来实现，不过我觉得不直观</li>
</ul>


<h4>decorator</h4>

<ul>
<li><p>几个新的decorator:</p>

<ul>
<li><p><code>@functools_wraps</code> : 装饰器工厂</p></li>
<li><p><code>@statically_typed</code> : 类型检查</p></li>
</ul>
</li>
<li><p>另外<code>@ensure</code>类修饰符可以用来简化设置property的代码</p></li>
</ul>


<h4>Facade</h4>

<ul>
<li>这个模式其实是天天在做的，就是把接口聚合的好看一点</li>
<li>其实思想可以推广到很多方面，比如Docker，就是LXC的一个Facader，而且做的比较好看，于是大家就都来用了</li>
</ul>


<h4>Flyweight</h4>

<ul>
<li>管理许多小对象的时候用引用</li>
<li>Python用<code>__slot__</code> Attribute来做最方便</li>
<li>里面关于用shelve对象存储class attribute的思路挺实用的</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Multiline Comments in Docker File]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/04/10/multiline-comments-in-docker-file/"/>
    <updated>2015-04-10T01:07:36+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/04/10/multiline-comments-in-docker-file</id>
    <content type="html"><![CDATA[<p>为了减少Image的fs layout数目，Dockerfile中经常会把多个命令集中到一个 <code>RUN</code> 指令下。</p>

<p>多行之后可读性就很差了。</p>

<p>有个比较偏门的写注释的方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUN mkdir -p /home/build/npm3 && \
</span><span class='line'>    mkdir -p /home/build/smartprobe && \
</span><span class='line'>    mkdir -p /home/build/bpc3 && \
</span><span class='line'>    `#====================================================` \
</span><span class='line'>    `#=============checkout and install rpms==============` \
</span><span class='line'>    svn export xxx && \
</span><span class='line'>    rpm -ivh --force --nodeps *.rpm && \
</span><span class='line'>    `#====================================================` \
</span><span class='line'>    `#=============checkout and install python==============` \
</span><span class='line'>    ... && \
</span></code></pre></td></tr></table></div></figure>


<p>比较实用，推荐之。</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Different Users in Same Unix Group Can Not Run Mongod]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/04/10/different-users-in-same-unix-group-can-not-run-mongod/"/>
    <updated>2015-04-10T00:44:42+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/04/10/different-users-in-same-unix-group-can-not-run-mongod</id>
    <content type="html"><![CDATA[<p>事情的缘起是这样的&hellip;&hellip;.</p>

<p>想要在Dockerfile中启动一个MongoDB，之后编译为Docker image。(不要问我问什么要在docker image中存一个mongodb数据库，真实世界的需求你永远想不到)</p>

<p>Docker build不支持 &mdash;privileged，所以默认的/etc/init.d/mongod  这个脚本中的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>runuser -s /bin/bash mongod -c 'ulimit -S -c 0 &gt;/dev/null 2&gt;&1 ; numactl --interleave=all /usr/bin/mongod -f /etc/mongod.conf'</span></code></pre></td></tr></table></div></figure>


<p>这种写法就死翘翘了。</p>

<p>github上有这个Issue:</p>

<p><a href="https://github.com/docker/docker/issues/1916">https://github.com/docker/docker/issues/1916</a></p>

<p>大家讨论了1年多，对于怎么解决，还是没有个所以然。(话说要再吐槽一下github的issue了，一般大一点的项目，一个issue跨度以年来论，长篇大论读完也不容易呀)</p>

<p>最后只好在Dockerfile中这么搞:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongod --fork -f /etc/mongod.conf && \
</span><span class='line'>mongod --shutdown -f /etc/mongod.conf && \
</span><span class='line'>chown mongod:mongod /opt/lib/mongodbpath -R
</span></code></pre></td></tr></table></div></figure>


<p>这样build就顺利完成了。</p>

<p>可是启动这个image为container后，执行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/mongod start</span></code></pre></td></tr></table></div></figure>


<p>报错:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [initandlisten] warning couldn't write to / rename file /datadir/journal/prealloc.0: couldn't open file /datadir/journal/prealloc.0 for writing errno:1 Operation not permitted</span></code></pre></td></tr></table></div></figure>


<p>虾米，明明已经加了mongod的group了。而且errorno是1，不是 <code>"errno:13 Permission denied"</code>，有点奇怪。</p>

<p>问题在这里:</p>

<p><a href="https://jira.mongodb.org/browse/SERVER-7583">https://jira.mongodb.org/browse/SERVER-7583</a></p>

<p>要再加一个指令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setcap cap_fowner+ep /usr/bin/mongod</span></code></pre></td></tr></table></div></figure>


<p>就是这么折腾。</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[第一个AndroidApp-华容道]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/03/03/huarongdao/"/>
    <updated>2015-03-03T00:19:39+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/03/03/huarongdao</id>
    <content type="html"><![CDATA[<h2>第一个Android APP上线，很简单的一个小游戏：智取华容道</h2>

<p>GooglePlay:
<a href="https://play.google.com/store/apps/details?id=me.happy123.aklotski">https://play.google.com/store/apps/details?id=me.happy123.aklotski</a></p>

<p>百度应用下载地址:
<a href="http://shouji.baidu.com/game/item?docid=7547918">http://shouji.baidu.com/game/item?docid=7547918</a></p>

<p>小米商店下载地址:
<a href="http://app.mi.com/detail/87656">http://app.mi.com/detail/87656</a></p>

<p>老是对自己说，要不断学习，跟上时代浪潮。但是悲哀的发现，自己是跟的越来越吃力了。</p>

<p>早在大连搞电视机的时候，那时候Android刚出来，就对自己说，要好好看看。无奈之后各处辗转，这事就搁下了。</p>

<p>非不能也，实不为也！</p>

<p>过年空出来一个周，Python党也要写Android App了。</p>

<p>找了本 <code>HeadFirst Java</code> ，一天的时间扫了一遍Java的语法，写了几个小例子练练手。之后直接对着Android官方文档开干了。</p>

<p>流程就是 google &ndash;> 坑 &ndash;> 继续google &hellip;.，如此循环不已&hellip;&hellip;</p>

<p>用父亲打扑克的机器，开个Eclipse基本上卡半天，本着一颗折腾的心，硬是PS出来几张背景图，小游戏&lt;华容道>出炉啦。</p>

<p>图片和关卡都来自于代码发芽网，作者非常大度的授权我使用，非常感谢:</p>

<p><a href="http://fayaa.com/">http://fayaa.com/</a></p>

<h2>开发日志:</h2>

<p>很巧的，我在知乎看到了类似&#8221;如何20天零基础开发Android游戏&#8221; 的问题。大家都是对这种问题不屑一顾的，但我从开始到完成恰好十来天，可以作为参考记录一下。</p>

<h4>Day1</h4>

<p>确立市场方向，要做个益智类游戏，啥好呢？啥好呢？我把所有的Android的华容道下载下来玩了一遍，嗯，都很粗糙，看来有的玩，就是它了。</p>

<p>这个时候，其实你已经完成一半工作了。没错，就是那句什么 <code>决定出发的时候，旅行就完成了一半</code>。 这个时候就不要纠结于做什么了，关键是如何做。</p>

<h4>Day2</h4>

<p>开始搭建开发环境，先后折腾了Android Studio和Eclipse，家里翻墙实在慢呀，另外我用父亲打扑克的机器跑Android Studio是在跑不动啊，最后装了Eclipse。推荐个链接，有兄弟收集了开发环境套装国内下载，你值得拥有。</p>

<p><a href="http://www.cnblogs.com/bjzhanghao/archive/2012/11/14/android-platform-sdk-download-mirror.html">http://www.cnblogs.com/bjzhanghao/archive/2012/11/14/android-platform-sdk-download-mirror.html</a></p>

<h4>Day3</h4>

<p>开始学习Java，神马?你都不会Java还来搞Android。嗯，我也没想到，有一天我要搞Java！要搞Java啊，我对它的印象还是航空母舰啊~~~。没办法，找了本 <code>Head First Java</code> 电子书，照着书里面的例子一个个敲，没错，不论懂不懂，就一个个敲。，幸亏 <code>Head First</code> 系列专门照顾低智商读者的，像我这样的一天敲到了300多页的例子。</p>

<h4>Day4</h4>

<p>不知不觉就把600页的书敲完了。嗯，看来那种xx天精通xxx，也不是骗人的，现在我的状态，估计能出去忽悠一些HR了。</p>

<h4>Day5</h4>

<p>先不管Android，搞一个穷人版的华容道。就开始封装三个类，什么接口啊，多态啊，统统不用，就是简单继承。搞了个核心库，棋盘就用 0011 先画出来了。嗯，最后可以玩了。不过只有我一个人懂得怎么玩。 不过很有成就感啊，看来一天写个俄罗斯方块之类的不是难事啊。</p>

<h4>Day6</h4>

<p>这个核心库很关键啊，挂了直接影响后面的开发啊。但是我用 0011 看的很累啊。赶紧google之，看看Java怎么搞测试~~~，好，最后集成了JUnit，顺便学了学怎么在Eclipse里面跑测试，最后写了一堆测试用例，果然发现了BUG，某些棋子竟然能对角线走动，罪过罪过。</p>

<h4>Day7</h4>

<p>Android程序怎么搞，现在八字还没一撇呢。热情啊，就要消耗光了。</p>

<p>赶紧找了本网上号称最简单的Android开发教程 <code>第一行代码</code> ，再开始对着敲。没错，我就是只会这一招。</p>

<h4>Day8</h4>

<p>还在敲~~~，敲不完了。不是打字慢，而是电脑一开Android 手机模拟器就陷入昏睡模式，一气之下不敲了，直接接上手机开干。</p>

<h4>Day9-Day13</h4>

<p>游戏逻辑早写完了，我对Android App的开发印象就是:画View。没错，就是处理各种图像拉伸，各种尺寸适配，各种布局位置，各种奇葩的手机尺寸，各种API新老接口整合。</p>

<p>简单列举下中间遇到的坑:</p>

<ul>
<li><p>怎么在各种尺寸下画出一个比较漂亮的棋盘布局</p></li>
<li><p>怎么用相对布局把几个菜单搞得整齐一点</p></li>
<li><p>怎么PS出一个不那么生硬的背景，没错，我还同时开了Photoshop做美工，这个时候电脑已经处在超脱状态</p></li>
<li><p>怎么在两个View直接传数据，怎么处理活动的生存周期</p></li>
<li><p>怎么加背景音乐，怎么搞成服务，怎么能让程序退出的时候结束服务，怎么搞得好听一点，没错，这个时候我又客串DJ，研究了MP3各码率下音质和文件大小的关系，最后以专业乐评人的视角选择了一首古筝曲</p></li>
<li><p>晕，现在为止还是只有一关呢，怎么办？我到 <code>代码发芽</code> 网上，写个Python脚本爬下来了所有关卡，同时邮件问作者申请授权</p></li>
<li><p>到底是拖动棋子效果好呢，还是点击移动棋子效果好呢？我又化身PM，反反复复走最简单的一关， <code>十八步</code> ，最后确定还是点击效果好。没错，到目前为止，这个游戏我只玩通了三关，我的智商就是这样。最后我爸还解决了 <code>横刀立马</code> ，我怎么也不行。</p></li>
<li><p>发现一个重大问题，原来我一直以为只有五虎上将的，一共五横五竖十个长条棋子，突然发现有一关里面出现了魏延，我晕，再调吧</p></li>
<li><p>又发现个问题，Android的默认sqlite模块好像没说怎么把已有的数据库集成进去，怎么办，Google吧</p></li>
</ul>


<h4>Day14</h4>

<p>到各个Android市场注册账号，提交APP，等审核，之间经历若干PS工作，这也是辛苦活啊。</p>

<p>~~~~~</p>

<p>就是这样，我在各种大坑小坑瞎搞之后，瞎搞出来了。。。</p>

<h2>结论</h2>

<ul>
<li><p>所谓零基础xx天搞APP是可以的，但是有条件，你只是Android零基础或者Java零基础，其它编程基础还是要有的，不然期间大坑小坑肯定要浪费很多时间</p></li>
<li><p>熟练工和初级工效率差距巨大，一天写个游戏APP不是开玩笑</p></li>
<li><p>这样写出的APP完成度低，要加入完整的体验流程，工作量还是很大的</p></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Javascript设计模式 - 笔记3]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/01/24/javascriptshe-ji-mo-shi-bi-ji-3/"/>
    <updated>2015-01-24T03:30:02+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/01/24/javascriptshe-ji-mo-shi-bi-ji-3</id>
    <content type="html"><![CDATA[<p>javascript 里面的继承是个非常复杂的话题，一言蔽之，就是你要替解释器干点活。另外，javascript属于使用原型式继承的语言，这个比较少见，所以直觉上不好拐弯。</p>

<p>先回顾比较简单的办法</p>

<h2>类式继承</h2>

<h3>一个简单的类</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* class Person */
</span><span class='line'>function Person(name) {
</span><span class='line'>    this.name = name;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Person.prototype.getName = functino() {
</span><span class='line'>    return this.name;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var reader = new Person('brainzhang');
</span><span class='line'>reader.getName();</span></code></pre></td></tr></table></div></figure>


<p>好，下面定义一个它的子类</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* Class Author */
</span><span class='line'>function Author(name, books) {
</span><span class='line'>    Person.call(this, name);
</span><span class='line'>    this.books = books;
</span><span class='line'>}
</span><span class='line'>Author.prototype = new Persion();  //set up the prototype chain
</span><span class='line'>Author.prototype.contructor = Author; //set the constructor attribute to author
</span><span class='line'>Author.getBooks = function() {return this.books;}</span></code></pre></td></tr></table></div></figure>


<p>容易费解的是这两行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Author.prototype = new Persion();  //set up the prototype chain
</span><span class='line'>Author.prototype.contructor = Author; //set the constructor attribute to author</span></code></pre></td></tr></table></div></figure>


<p>javascript中，每个对象都有一个原型对象，在创建一个对象时，javascript会自动将其原型对象设置为其构造函数的prototype属性所指的对象。
在访问对象的某个成员时，如果这个成员未见于当前对象，那么javascript会沿着原型链向上逐一访问每个原型对象(最顶端为Object.prototype对象)，直到找到这个成员为止。
这意味着，为了让一个类继承另一个类，只需将子类的prototype设置为基类的一个实例即可。</p>

<p>第二行将prototype的constructor属性重新设置为Author。是因为:
定义一个构造函数时，其默认的prototype对象是一个Object类型的实例，其contructor属性会被设置为构造函数本身。如果手工将prototype设置为另一个对象，就要重新设置其constructor属性。</p>

<p>最后，为了简化类的声明，可以将这些工作封装在extend函数中:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function extend(subClass, superClass) {
</span><span class='line'>    var F = function(){};
</span><span class='line'>    F.prototype = superClass.prototype;
</span><span class='line'>    subClass.prototype = new F();
</span><span class='line'>    subClass.prototype.contructor = subClass;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>作为改进，定义了一个新对象F，避免基类对象过大，创建实例浪费资源。</p>

<p>但是这样还有个小缺点，声明 Author的时候，还要显式的调用一下<code>Person.call()</code>，下面这个版本进一步做了改进：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function extend(subClass, superClass) {
</span><span class='line'>    var F = function(){};
</span><span class='line'>    F.prototype = superClass.prototype;
</span><span class='line'>    subClass.prototype = new F();
</span><span class='line'>    subClass.prototype.contructor = subClass;
</span><span class='line'>
</span><span class='line'>    subClass.superclass = superClass.prototype;
</span><span class='line'>    if(superClass.prototype.contructor == Object.prototype.constructor) {
</span><span class='line'>        superClass.prototype.contructor = superClass;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>增加了一个superclass属性来直接访问基类，这样声明Author的时候可以这么写:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* Class Author */
</span><span class='line'>function Author(name, books) {
</span><span class='line'>    Author.superclass.contructor.call(this, name);
</span><span class='line'>    this.books = books;
</span><span class='line'>}
</span><span class='line'>extend(Author, Person);
</span><span class='line'>Author.getBooks = function() {return this.books;}</span></code></pre></td></tr></table></div></figure>


<h2>原型式继承</h2>

<p>TODO</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Git Cheat]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/01/17/git-cheat/"/>
    <updated>2015-01-17T03:45:03+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/01/17/git-cheat</id>
    <content type="html"><![CDATA[<p>整理一下经常忘记的Git命令</p>

<h1>remote 同步</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote -v                                                     // 查看当前远程版本库
</span><span class='line'>$ git remote add cocos2d-x git://github.com/cocos2d/cocos2d-x.git   // 添加原始版本库
</span><span class='line'>$ git fetch cocos2d-x                                               // 获取原始版本库的更新
</span><span class='line'>$ git merge cocos2d-x/master                                        // 合并原始版本库的代码到当前版本库中，合并前确保当前分支是master</span></code></pre></td></tr></table></div></figure>


<h1>remote branch</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch -a                                                     //查看所有分支
</span><span class='line'>$ git checkout -b branches/xxx origin/branches/xxx                  //chekcout远程分支
</span><span class='line'>$ git push origin --delete &lt;branchname&gt;                             //删除远程分支
</span><span class='line'>$ git push origin --delete tag &lt;tagname&gt;                            //删除远程tag
</span><span class='line'>$ git push origin :&lt;branchName&gt;                                     //推送一个空分支到远程分支，相当于删除分支
</span><span class='line'>$ git push origin :refs/tags/&lt;tagName&gt;                              //推送一个空tag到远程，相当于删除tag</span></code></pre></td></tr></table></div></figure>


<h2>删除不存在对应远程分支的本地分支</h2>

<p>假设这样一种情况：</p>

<ol>
<li>我创建了本地分支b1并pull到远程分支 origin/b1；</li>
<li>其他人在本地使用fetch或pull创建了本地的b1分支；</li>
<li>我删除了 origin/b1 远程分支；</li>
<li>其他人再次执行fetch或者pull并不会删除这个他们本地的 b1 分支，运行 git branch -a 也不能看出这个branch被删除了，如何处理？</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch -p                                                        //在fetch之后删除掉没有与远程分支对应的本地分支</span></code></pre></td></tr></table></div></figure>


<h2>重命名远程分支</h2>

<p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push --delete origin devel                                    //删除远程分支
</span><span class='line'>$ git branch -m devel develop                                       //重命名本地分支
</span><span class='line'>$ git push origin develop                                           //推送本地分支</span></code></pre></td></tr></table></div></figure>


<h2>把本地tag推送到远程</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push --tags</span></code></pre></td></tr></table></div></figure>


<h2>获取远程tag</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch origin tag &lt;tagname&gt;</span></code></pre></td></tr></table></div></figure>


<h2>分支的衍合</h2>

<p>参考:<a href="http://git-scm.com/docs/git-rebase">http://git-scm.com/docs/git-rebase</a></p>

<h1>diff</h1>

<p>只显示两个分支间的差异，如果你想找出‘master’,‘test’的共有 父分支和&#8217;test&#8217;分支之间的差异，你用3个‘.&lsquo;来取代前面的两个&rsquo;.&lsquo; 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff master..test</span></code></pre></td></tr></table></div></figure>


<p>显示你当前的索引和上次提交间的差异；这些内容在不带&#8221;-a&#8221;参数运行 &ldquo;git commit&#8221;命令时就会被提交。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --cached</span></code></pre></td></tr></table></div></figure>


<p>显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行&#8221;git commit -a&#8221;命令时被提交。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff HEAD</span></code></pre></td></tr></table></div></figure>


<p>如果你要查看当前的工作目录与另外一个分支的差别，你可以用下面的命令执行:
这会显示你当前工作目录与另外一个叫&#8217;test&#8217;分支的差别。你也以加上路径限定符，来只 比较某一个文件或目录。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff test</span></code></pre></td></tr></table></div></figure>


<p>显示你当前工作目录下的lib目录与上次提交之间的差别(或者更准确的 说是在当前分支)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff HEAD -- ./lib</span></code></pre></td></tr></table></div></figure>


<p>如果不是查看每个文件的详细差别，而是统计一下有哪些文件被改动，有多少行被改 动，就可以使用‘&mdash;stat&#8217; 参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --stat</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Javascript设计模式 - 笔记2]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/01/05/javascriptshe-ji-mo-shi-2/"/>
    <updated>2015-01-05T01:05:16+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/01/05/javascriptshe-ji-mo-shi-2</id>
    <content type="html"><![CDATA[<h1>如何封装一个对象</h1>

<h2>门户大开型</h2>

<p>最简单的办法就是按传统方法创建一个类，用一个函数来做其构造器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = function(isbn, title, author) {
</span><span class='line'>    if (isbn === undefined) {
</span><span class='line'>        throw new Error('Book constructor requires an isbn.');
</span><span class='line'>    }
</span><span class='line'>    this.isbn = isbn;
</span><span class='line'>    this.title = title || 'No title specified';
</span><span class='line'>    this.author = author || 'No title specified';
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define by attr
</span><span class='line'>Book.prototype.display = function() {...};
</span><span class='line'>
</span><span class='line'>//define by object literals
</span><span class='line'>Book.prototype = {
</span><span class='line'>    display: function(){...},
</span><span class='line'>    checkIsdn: function(){...}
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：简单</li>
<li>缺点：没有保护，需要加各种校验。但内部的成员还是有很大可能被修改的。</li>
</ul>


<h2>语法修饰增强型</h2>

<p>用setattr,getattr等赋值取值方法及命名规范区别私有成员</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = function(isbn, title, author) {
</span><span class='line'>    if (isbn === undefined) {
</span><span class='line'>        throw new Error('Book constructor requires an isbn.');
</span><span class='line'>    }
</span><span class='line'>    this.setIsbn(isbn);
</span><span class='line'>    this.setTitle(title);
</span><span class='line'>    this.setAuthor(author);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define by attr
</span><span class='line'>Book.prototype.display = function() {...};
</span><span class='line'>
</span><span class='line'>//define by object literals
</span><span class='line'>Book.prototype = {
</span><span class='line'>    _checkIsdn: function() {...}
</span><span class='line'>
</span><span class='line'>    setIsbn: function(isbn) {
</span><span class='line'>        if!(this._checkIsbn(isbn)) {
</span><span class='line'>            throw new Error("Invalid isbn");
</span><span class='line'>        }
</span><span class='line'>        this._isbn = isbn;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    getIsbn: function() {
</span><span class='line'>        return this._isbn;
</span><span class='line'>    }
</span><span class='line'>    .......
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：简单，安全性也有所增强</li>
<li>缺点：不是真正的私有成员，内部的成员还是有很大可能被修改的。</li>
</ul>


<h2>闭包实现私有成员</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = function(iisbn, ititle, iauthor) {
</span><span class='line'>
</span><span class='line'>    //private attributes
</span><span class='line'>    var isbn, title, author;
</span><span class='line'>
</span><span class='line'>    //private method
</span><span class='line'>    function _checkIsbn(iisbn) {
</span><span class='line'>        ...
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //privileged methods
</span><span class='line'>    this.getIsbn = function() {
</span><span class='line'>        return isbn;
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    this.setIsbn = function(iisbn) {
</span><span class='line'>        this._checkIsbn(iisbn) ...
</span><span class='line'>        isbn = iisbn;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    .......
</span><span class='line'>
</span><span class='line'>    //contructor code
</span><span class='line'>    this.setIsbn(iisbn);
</span><span class='line'>    this.setTitle(ititle);
</span><span class='line'>    this.setAuthor(iauthor);
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>//public, non-privileged methods
</span><span class='line'>
</span><span class='line'>Book.prototype = {
</span><span class='line'>    display: fucntion(){},
</span><span class='line'>    ....
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里应用了js的闭包特性，isbn等属性不再通过<code>this</code>来引用，而是放到函数的构造器里面。既要访问到私有成员，又要对外的方法放到函数的构造中，对私有成员没有依赖的函数用prototype。</p>

<ul>
<li>优点：比较完整的模拟了private特性</li>
<li>缺点：private方法不再存在prototype里面，这样没生成一个新的对象实例都会为每个每个私有方法和特权方法生成一个新副本，耗费内存。</li>
</ul>


<h2>实现静态方法和属性</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = (function() {
</span><span class='line'>
</span><span class='line'>    //private static attributes
</span><span class='line'>    var numberOfBooks = 0;
</span><span class='line'>
</span><span class='line'>    //private static method
</span><span class='line'>    function checkIsbn(iisbn) {
</span><span class='line'>        ...
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //return the contructor
</span><span class='line'>    return function(iisbn, ititle, iauthor) {
</span><span class='line'>        //private attributes
</span><span class='line'>        var isbn, title, author;
</span><span class='line'>
</span><span class='line'>        //privileged methods
</span><span class='line'>        this.getIsbn = function() {
</span><span class='line'>            return isbn;
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        this.setIsbn = function(iisbn) {
</span><span class='line'>            this._checkIsbn(iisbn) ...
</span><span class='line'>            isbn = iisbn;
</span><span class='line'>        }
</span><span class='line'>        .......
</span><span class='line'>
</span><span class='line'>        //contructor code
</span><span class='line'>        numOfBooks++;
</span><span class='line'>        this.setIsbn(iisbn);
</span><span class='line'>    }
</span><span class='line'>})();
</span><span class='line'>
</span><span class='line'>//public, static methods
</span><span class='line'>Book.converTotitleCase = function(){...};
</span><span class='line'>
</span><span class='line'>//public, non-privileged methods
</span><span class='line'>
</span><span class='line'>Book.prototype = {
</span><span class='line'>    display: fucntion(){},
</span><span class='line'>    ....
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里和<code>闭包实现私有成员</code>的区别就在于构造函数变成了一个内嵌函数，这样就创建了一个闭包，可以把静态的私有成员声明在最顶层。</p>

<h2>实现常量</h2>

<p>常量就设置为一个私有静态属性，用大写区分即可。我认为没有必要实现一个取值器去限制，用CONST前缀从代码风格上约束即可。</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Javascript设计模式 - 笔记1]]></title>
    <link href="http://brain-zhang.github.io/blog/2015/01/04/javascriptshe-ji-mo-shi-bi-ji-1/"/>
    <updated>2015-01-04T00:25:15+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2015/01/04/javascriptshe-ji-mo-shi-bi-ji-1</id>
    <content type="html"><![CDATA[<h1>富有表现力的javascript</h1>

<h2>弱类型语言</h2>

<p>javascript中有三种原始类型:布尔型、数值型(不区分浮点数和整数)和字符串型。</p>

<p>此外，还有对象类型和包含可执行代码的函数类型。前者是一种复合类型(数组是一种特殊的对象)。</p>

<p>最后，还有空类型(null)和未定义类型(undefined)。</p>

<p>原始数据类型按值传送，其他数据类型则按引用传送。</p>

<h2>函数是一等对象</h2>

<ul>
<li>匿名函数</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(function(){
</span><span class='line'>    var foo = 10;
</span><span class='line'>    var bar = 2;
</span><span class='line'>    alert(foo * bar);
</span><span class='line'>})();</span></code></pre></td></tr></table></div></figure>


<ul>
<li>闭包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var baz;
</span><span class='line'>(function(){
</span><span class='line'>    var foo = 10;
</span><span class='line'>    var bar = 2;
</span><span class='line'>    baz = function(){
</span><span class='line'>        return foo * bar;
</span><span class='line'>    }
</span><span class='line'>})();
</span><span class='line'>baz(); //baz可以访问foo和bar，即使是在匿名函数外面执行</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>作用域、嵌套函数和闭包</p>

<ul>
<li><p>js中，只有函数具有作用域：</p>

<p>  在一个函数内部声明的变量，外部无法访问；
  定义在一个函数中的变量在该函数的内嵌函数中是可以访问的</p></li>
<li><p>js中的作用域是词法性的：</p>

<p>  函数运行在定义他们的作用域中，而不是调用他们的作用域中；
  可以利用这个特性定义静态方法和属性；</p></li>
</ul>
</li>
</ul>


<h2>对象的易变性(mutable)和内省(introspection)</h2>

<ul>
<li>易变性：js中可以对象前定义的类和实例化的对象进行修改</li>
<li>内省：js中可以在运行时检查对象所具有的属性和方法</li>
</ul>


<h1>接口</h1>

<ul>
<li><p>接口也是一种对象，判断一个类是否是实现了某类接口，就是传入这个接口，而后比较。</p>

<p>  java有专门的接口类，C++有虚基类，而C在linux kernel中的对象设计方法实际上也是一种接口实现，这都是接口在语言层面支持的体现</p></li>
<li><p>封装(encapsulation)和信息隐藏：信息隐藏是目的，而封装则是藉以达到这个目的的技术</p>

<p>  java和C++有 private关键字作为支持，Python有&#8217;__&lsquo;的命名约定，js中一般用闭包来模拟</p></li>
</ul>


<h2>接口实现</h2>

<h3>用注释来模拟</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>interface Composite {
</span><span class='line'>    function add(child);
</span><span class='line'>    function remove(child);
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>interface FormItem{
</span><span class='line'>    function save();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var CompositeForm = function(id, method, action) {
</span><span class='line'>    //implements Composite, FromItem
</span><span class='line'>    ...
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>CompositeForm.prototype.add = function(child) {
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>CompositeForm.prototype.remove= function(child) {
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>CompositeForm.prototype.save= function() {
</span><span class='line'>    ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：简单明了，代码体积小</li>
<li>缺点：无法错误检查</li>
</ul>


<h3>用属性检查模仿接口</h3>

<p>约定所有类明确声明实现了那些接口，和这些类打交道的对象可以针对这些声明做检查。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>interface Composite {
</span><span class='line'>    function add(child);
</span><span class='line'>    function remove(child);
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>interface FormItem{
</span><span class='line'>    function save();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var CompositeForm = function(id, method, action) {
</span><span class='line'>    //implements Composite, FromItem
</span><span class='line'>    this.implementsInterfaces = ['Composite', 'FromItem'];
</span><span class='line'>    ...
</span><span class='line'>};
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>function addForm(formInstance) {
</span><span class='line'>    if (!implements(formInstance, 'Composite', 'FormItem')) {
</span><span class='line'>        throw new Error("object does not implement a required interface");
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function implements(objects) {
</span><span class='line'>    for (var i = 1; i &lt; arguments.length; i++) {
</span><span class='line'>        var interfaceName = arguments[i];
</span><span class='line'>        var interfaceFound = false;
</span><span class='line'>        for (var j = 0; j &lt; object.implementsInterfaces[j] == interfaceName) {
</span><span class='line'>            interfaceFound = true;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        if (!interfaceFound) {
</span><span class='line'>            return false;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return true;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点:有错误检查</li>
<li>缺点:每次调用都要检查，啰嗦，另外防不住有说了实现但没有干活的</li>
</ul>


<h1>鸭式辨型模仿接口</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Composite = new Intreface('Composite', ['add', 'remove']);
</span><span class='line'>var FormItem = new Interface('FormItem', ['save']);
</span><span class='line'>var CompositeForm = function(id, method, action) {
</span><span class='line'>    ...
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>function addForm(formInstance) {
</span><span class='line'>    ensureImplements(formInstance, Composite, FormItem);
</span><span class='line'>    ......
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var Interface = function(name, methods) {
</span><span class='line'>    if (arguments.length != 2) {
</span><span class='line'>        throw new Error("Interface constructor called with " + arguments.length + "arguments, but expected exactly 2.");
</span><span class='line'>    }
</span><span class='line'>    this.name = name;
</span><span class='line'>    this.methods = [];
</span><span class='line'>    for (var i = 0; len = methods.length; i &lt; len; i++) {
</span><span class='line'>        if (typeof methods[i] !== 'string')  {
</span><span class='line'>            throw new Error("Interface contructor expects method names to be " +
</span><span class='line'>                            "passed in as string");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    this.methods.push(methods[i]);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Interface.ensureImplements = function(object) {
</span><span class='line'>    if (arguments.length &lt; 2) {
</span><span class='line'>        throw Error("Functino Interface.ensureImplements called with " + arguments.length +
</span><span class='line'>                    "arguments, but expected at leaset 2.");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    for (var i = 1, len = arguments.length; i &lt; len; i++) {
</span><span class='line'>        if (interface.constructor !== Interface) {
</span><span class='line'>            throw new Error("Function Interface.ensureImplements expects arguments" +
</span><span class='line'>                            "two and above to be instances of Interface.");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    for (var j = 1, methodsLen = interface.methods.length; j &lt; methodsLen; j++) {
</span><span class='line'>        var method = interface.methods[j];
</span><span class='line'>        if(!object[method] || typeof object[method] !== 'function') {
</span><span class='line'>            throw new Error("Function Interface.ensureImplements: object " +
</span><span class='line'>                            "does not implement the " + interface.name)  +
</span><span class='line'>                            "interface.Method " + method + " was not found.");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：进一步加强了错误检查</li>
<li>缺点：增大了调试难度</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Macvtap Ethernet Support Tcpdump]]></title>
    <link href="http://brain-zhang.github.io/blog/2014/12/31/macvtap-ethernet-support-tcpdump/"/>
    <updated>2014-12-31T09:05:01+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2014/12/31/macvtap-ethernet-support-tcpdump</id>
    <content type="html"><![CDATA[<p>用macvtap模拟网卡时，用tcpdump抓包是抓不到的，后来发现3.14版本以上的内核修正了这一点。</p>

<p>参考这个提交:</p>

<p><a href="https://github.com/torvalds/linux/commit/6acf54f1cf0a6747bac9fea26f34cfc5a9029523">https://github.com/torvalds/linux/commit/6acf54f1cf0a6747bac9fea26f34cfc5a9029523</a></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Linux多网卡多路由设置]]></title>
    <link href="http://brain-zhang.github.io/blog/2014/12/30/linuxshuang-wang-qia-shuang-lu-you-she-zhi/"/>
    <updated>2014-12-30T01:40:53+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2014/12/30/linuxshuang-wang-qia-shuang-lu-you-she-zhi</id>
    <content type="html"><![CDATA[<p>折腾了半天，原始出处不知道了，转记一下。</p>

<p>比如如果一个linux服务器有三个口接三个不同的网络，假设对应的网络信息是如此</p>

<ul>
<li><p>eth0是电信，ip地址为1.1.1.1/24，电信网关为1.1.1.254</p></li>
<li><p>eth1是网通，ip地址为2.2.2.2/24，网通网关为2.2.2.254</p></li>
<li><p>eth2是教育网，ip地址为3.3.3.3/24，教育网网关为3.3.3.254</p></li>
</ul>


<p>传统情况下，如果是为了从内向外访问获得更好的速度，让访问电信走电信，访问网通走网通，那么配置是网关只能够配置一个。</p>

<p>比如以电信为主的，那么网关就只设置电信的1.1.1.254，而针对网通和教育网设置不同的路由，路由下一跳指向网通和教育网对应的 网关。</p>

<p>如果这样做的目的只是实现内部访问外面，那么是没问题了，但是如果是为了让外面的用户能够正常访问到服务器上的服务就会出问题。比如电信用户会无法访问网通和教育网的ip，网通用户会无法访问电信和教育网的ip。</p>

<p>要解决这个问题，思路就是由哪个网口进来的流量希望全部就由哪个回去。用lartc里面提到的方法就是来源的口不同，走不同的路由表。在默认的路由表基础上再建立三个路由表。</p>

<p>用 ip route show 可以看到默认有local,main,default三个路由表，这三个路由表的名称命名来自 /etc/iproute2/rt_tables ，这里先在这个配置文件里面添加三个不同的路由表表名，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo “101 ChinaNet” &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”102 ChinaCnc“ &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”103 ChinaEdu“ &gt;&gt; /etc/iproute2/rt_tables</span></code></pre></td></tr></table></div></figure>


<p>之后建立这三个路由表的内容，因为这三个路由表的只是用来响应来自不同接口的，而不是用来相应从哪个接口出去的，所以只需要每个路由表里面建立默认网关即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip route add default via 1.1.1.254 dev eth0 table ChinaNet
</span><span class='line'>ip route add default via 2.2.2.254 dev eth1 table ChinaCnc
</span><span class='line'>ip route add default via 3.3.3.254 dev eth2 table ChinaEdu</span></code></pre></td></tr></table></div></figure>


<p>之后再加上三条规则，使来自不同的口的走不同的路由表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip rule add from 1.1.1.1 table ChinaNet
</span><span class='line'>ip rule add from 2.2.2.2 table ChinaCnc
</span><span class='line'>ip rule add from 3.3.3.3 table ChinaEdu</span></code></pre></td></tr></table></div></figure>


<p>至此无论是电信还是网通还是教育网用户，访问三个ip的任意一个地址都能够连通了。即便是服务器上本身的默认路由都没有设置，也能够让外面的用户正常访问。</p>

<p>命令汇总：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip route show
</span><span class='line'>
</span><span class='line'>echo “101 ChinaNet” &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”102 ChinaCnc“ &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”103 ChinaEdu“ &gt;&gt; /etc/iproute2/rt_tables // 这里也可以直接通过Vi编辑
</span><span class='line'>
</span><span class='line'>ip route add default via 1.1.1.254 dev eth0 table ChinaNet
</span><span class='line'>ip route add default via 2.2.2.254 dev eth1 table ChinaCnc
</span><span class='line'>ip route add default via 3.3.3.254 dev eth2 table ChinaEdu
</span><span class='line'>
</span><span class='line'>ip rule add from 1.1.1.1 table ChinaNet
</span><span class='line'>ip rule add from 2.2.2.2 table ChinaCnc
</span><span class='line'>ip rule add from 3.3.3.3 table ChinaEdu //如果用数字，可以不要上面的“echo”过程</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Libpcap PACKET_MMAP内存分配]]></title>
    <link href="http://brain-zhang.github.io/blog/2014/12/25/libpcappacket-mmapnei-cun-fen-pei/"/>
    <updated>2014-12-25T02:03:49+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2014/12/25/libpcappacket-mmapnei-cun-fen-pei</id>
    <content type="html"><![CDATA[<p>libpcap为了提高效率，调用<code>setsockopt(handle-&gt;fd, SOL_PACKET, PACKET_RX_RING,(void *) &amp;req, sizeof(req))</code>时采用kmalloc分配内存。</p>

<p>可以参考:</p>

<p><a href="https://www.kernel.org/doc/Documentation/networking/packet_mmap.txt">https://www.kernel.org/doc/Documentation/networking/packet_mmap.txt</a></p>

<p>kmalloc底层依赖linux的slab内存分配机制，在2.6.22内核之后，slub取代slab成为默认的内存分配器。空间和时间上都有所提升。值得升级。</p>

<p>另外，centos5.9默认采用的2.6.18内核，编译的时候默认的KMALLOC_MAX_SIZE 设置为size-131072，这对于有很大内存的机器，分配效率是不高的。</p>

<p>最简单的办法就是用rpm包升级到2.6.33.9-rt31.86.el5rt，这个内核编译的时候已经将KMALLOC_MAX_SIZE设置为size-4194304。</p>

<p>这个问题是追踪libpcap的抓包程序，内存分配频繁失败发现的。</p>

<p>只能说，内核升级频繁，很多编译开关影响很大，要想全面发挥linux的性能，只能紧跟潮流啊。</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Docker中的网络]]></title>
    <link href="http://brain-zhang.github.io/blog/2014/12/08/dockerzhong-de-wang-luo/"/>
    <updated>2014-12-08T00:25:53+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2014/12/08/dockerzhong-de-wang-luo</id>
    <content type="html"><![CDATA[<p>Docker的默认网络是非常弱的，他使用的是一个虚拟网桥和container中的veth pair通信，在container中，默认是没有对外的IP的，外部主机或容器只能通过NAT，或者自定义iptable来实现主机或容器间的互联互通。
这种局限性非常明显:</p>

<ul>
<li><p>如果我要配置一个sshd service，需要手工配置转发规则，非常不便</p></li>
<li><p>无法使用DHCP</p></li>
<li><p>NAT无法在宿主机上用一个端口提供不同服务，所以有多个container绑定到一个物理网卡时，因为无法分配多个对外IP，所以诸如Http 这样的服务只能跑在同一IP的不同端口上。</p></li>
<li><p>在Container中无法正常tcpdump</p></li>
</ul>


<p>理想的容器内网卡应该像VMware的NSX那样，让你&#8217;基本上&#8217;感觉不到这是个虚拟的网卡，当然，这个和Docker的初衷有点不符了。但我们解决问题为先，工具是那一个，但不同人用法不同。</p>

<p>将Docker Container连接到本地网络，有四种搞法 (具体请参考:<a href="http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/">http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/</a>)，下面简单描述下:</p>

<ul>
<li>采用官方默认的搞法，用NAT:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip addr add 10.12.0.117/21 dev em1
</span><span class='line'>
</span><span class='line'>docker run -d --name web -p 10.12.0.117:80:80 centos/simpleweb</span></code></pre></td></tr></table></div></figure>


<p>   这种方法简单，但也有上面所说的各种缺点</p>

<ul>
<li><p>建立自己的网桥和veth pair，为每个网桥分配一个IP，每个veth对绑定一个网桥，映射进docker容器，这样在容器内就得到了一个接近于真实的网卡。并且有能与本地网络的通信</p>

<p>  这种办法其实是对默认docker网络实现的一种升级，但是解决了原来的诸多局限，缺点是操作比较麻烦，另外容器内用tcpdump也会有问题</p></li>
<li><p>使用Open vSwitch Bridge，模拟第二种办法。</p>

<p>  这种方法就是用Open vSwitch简化了操作，但是又引入了一套东西。</p></li>
<li><p>建立macvlan虚拟网卡，容器启动后用nsenter工具映射到容器的network namespace中</p>

<p>  这种办法我觉得是最干净简洁的，而且采用macvlan，还意外获得了一种能力，就是你能在宿主机上创建子macvlan设备，从而能向容器内的macvlan设备打入精确的流量。
  采用这种方法得到的container，可以在里面启动sshd，远程ssh上去各种操作，这样使用同一般的虚拟机没有多大差别。
  另外，在容器内tcpdump包也很完美，如果想捕获二层协议包，可以用macvtap替换macvlan。</p></li>
</ul>


<p>需要注意的是，如果想要tcpdump macvtap，需要linux kernel 3.14以上的支持，参见<a href="https://github.com/torvalds/linux/commit/6acf54f1cf0a6747bac9fea26f34cfc5a9029523">这里</a>。</p>

<p>最后推荐为了简化macvlan的操作，我写的一个小工具:<a href="https://github.com/brain-zhang/dockerfly">dockerfly</a></p>

<p>参考:</p>

<ul>
<li>Linux 上的基础网络设备详解</li>
</ul>


<p><a href="http://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html">http://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html</a></p>

<ul>
<li>Linux 上虚拟网络与真实网络的映射</li>
</ul>


<p><a href="http://www.ibm.com/developerworks/cn/linux/1312_xiawc_linuxvirtnet/index.html">http://www.ibm.com/developerworks/cn/linux/1312_xiawc_linuxvirtnet/index.html</a></p>

<ul>
<li>网络虚拟化技术: TUN/TAP MACVLAN MACVTAP</li>
</ul>


<p><a href="https://blog.kghost.info/2013/03/27/linux-network-tun/">https://blog.kghost.info/2013/03/27/linux-network-tun/</a></p>

<ul>
<li>Coupling Docker and Open vSwitch</li>
</ul>


<p><a href="http://fbevmware.blogspot.com/2013/12/coupling-docker-and-open-vswitch.html">http://fbevmware.blogspot.com/2013/12/coupling-docker-and-open-vswitch.html</a></p>

<ul>
<li>four ways to connect a docker</li>
</ul>


<p><a href="http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/">http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/</a></p>

<ul>
<li>Docker containers should not run an SSH server</li>
</ul>


<p><a href="https://news.ycombinator.com/item?id=7950326">https://news.ycombinator.com/item?id=7950326</a></p>

<ul>
<li>Proposal: Native Docker Multi-Host Networking</li>
</ul>


<p><a href="https://github.com/docker/docker/issues/8951">https://github.com/docker/docker/issues/8951</a></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[多个git账号之间的切换]]></title>
    <link href="http://brain-zhang.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan/"/>
    <updated>2014-12-07T07:00:34+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan</id>
    <content type="html"><![CDATA[<p>做过很多遍了，却总是记不住，这回从头来描述一下。</p>

<h1>介绍</h1>

<p>所谓多个git账号，可能有两种情况:</p>

<ul>
<li><p>我有多个github的账号，不同的账号对应不同的repo，需要push的时候自动区分账号</p></li>
<li><p>我有多个git的账号，有的是github的，有的是bitbucket的，有的是单位的gitlab的，不同账号对应不同的repo，需要push的时候自动区分账号</p></li>
</ul>


<p>这两种情况的处理方法是一样的，分下面几步走:</p>

<h1>处理</h1>

<ul>
<li><p>先假设我有两个账号，一个是github上的，一个是公司gitlab上面的。先为不同的账号生成不同的ssh-key</p>

<p>  <code>
      ssh-keygen -t rsa -f ~/.ssh/id_rsa_work -c xxx@gmail.com
 </code></p>

<p>  然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_work和id_rsa_work.pub两个文件，id_rsa_work.pub文件里存放的就是我们要使用的key</p>

<p>  <code>
      ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -c xxx@gmail.com
 </code></p>

<p>  然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_github和id_rsa_github.pub两个文件，id_rsa_gthub.pub文件里存放的就是我们要使用的key</p></li>
<li><p>把id_rsa_xxx.pub中的key添加到github或gitlab上，这一步在github或gitlab上都有帮助，不再赘述</p></li>
<li><p>编辑 <code>~/.ssh/config</code>，设定不同的git 服务器对应不同的key</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Default github user(first@mail.com),注意User项直接填git，不用填在github的用户名
</span><span class='line'>Host github.com
</span><span class='line'> HostName github.com
</span><span class='line'> User git
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_github
</span><span class='line'>
</span><span class='line'># second user(second@mail.com)
</span><span class='line'># 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
</span><span class='line'>Host 172.16.11.11
</span><span class='line'> HostName 172.16.11.11
</span><span class='line'> User work
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_work</span></code></pre></td></tr></table></div></figure>


<p>编辑完成后可以使用命令 <code>ssh -vT git@github.com</code> 看看是不是采用了正确的id_rsa_github.pub文件</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<ul>
<li>从上面一步可以看到，ssh区分账号，其实靠的是HostName这个字段，因此如果在github上有多个账号，很容易的可以把不同的账号映射到不同的HostName上就可以了。比如我有A和B两个账号， 先按照步骤一生成不同的key文件，再修改<code>~/.ssh/config</code> 内容应该是这样的。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Default github user(A@mail.com),注意User项直接填git，不用填在github的用户名
</span><span class='line'>Host A.github.com
</span><span class='line'> HostName github.com
</span><span class='line'> User git
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_github_A
</span><span class='line'>
</span><span class='line'># second user(B@mail.com)
</span><span class='line'># 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
</span><span class='line'>Host A.github.com
</span><span class='line'> HostName github.com
</span><span class='line'> User git
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_github_B</span></code></pre></td></tr></table></div></figure>


<p>同时你的github的repo ssh url就要做相应的修改了，比如根据上面的配置,原连接地址是:</p>

<pre><code>git@github.com:testA/gopkg.git
</code></pre>

<p>那么根据上面的配置，就要把<code>github.com</code>换成<code>A.github.com</code>, 那么ssh解析的时候就会自动把<code>testA.github.com</code> 转换为 <code>github.com</code>,修改后就是</p>

<pre><code>git@A.github.com:testA/gopkg.git
</code></pre>

<p>直接更改 <code>repo/.git/config</code> 里面的url即可</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<h1>一些题外话</h1>

<h2>我有一个repo，想要同时push到不同的仓库该如何设置?</h2>

<p>很简单， 直接更改 <code>repo/.git/config</code> 里面的url即可，把里面对应tag下的url增加一个就可以了。例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[remote "GitHub"]
</span><span class='line'>    url = git@github.com:elliottcable/Paws.o.git
</span><span class='line'>    fetch = +refs/heads/*:refs/remotes/GitHub/*
</span><span class='line'>[branch "Master"]
</span><span class='line'>    remote = GitHub
</span><span class='line'>    merge = refs/heads/Master
</span><span class='line'>[remote "Codaset"]
</span><span class='line'>    url = git@codaset.com:elliottcable/paws-o.git
</span><span class='line'>    fetch = +refs/heads/*:refs/remotes/Codaset/*
</span><span class='line'>[remote "Paws"]
</span><span class='line'>    url = git@github.com:Paws/Paws.o.git
</span><span class='line'>    fetch = +refs/heads/*:refs/remotes/Paws/*
</span><span class='line'>[remote "Origin"]
</span><span class='line'>    url = git@github.com:Paws/Paws.o.git
</span><span class='line'>    url = git@codaset.com:elliottcable/paws-o.git</span></code></pre></td></tr></table></div></figure>


<p>上面这个立即就是有4个远端仓库，不同的tag表示不同的远端仓库，最后的Origin标签写法表示默认push到github和codaset这两个远端仓库去。当然，你可以自己随意定制tag和url</p>

<h2>我有一个github的repo，clone没有问题，push的时候总是报错:error: The requested URL returned error: 403 while accessing xxx</h2>

<p>这个问题也困扰了我一段时间，后来发现修改 <code>repo/.git/config</code> 里面的url，把https地址替换为ssh就好了。</p>

<p>例如</p>

<pre><code>url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git
</code></pre>

<p>替换为</p>

<pre><code>url=ssh://git@github.com/derekerdmann/lunch_call.git
</code></pre>

<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed">http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed</a>
<a href="http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations/3195446#3195446">http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations/3195446#3195446</a></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[科技进步是安全行业的最根本保障]]></title>
    <link href="http://brain-zhang.github.io/blog/2014/11/29/ke-ji-jin-bu-shi-an-quan-xing-ye-de-zui-gen-ben-bao-zhang/"/>
    <updated>2014-11-29T04:43:57+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2014/11/29/ke-ji-jin-bu-shi-an-quan-xing-ye-de-zui-gen-ben-bao-zhang</id>
    <content type="html"><![CDATA[<p>今天上网的时候突然发现有人邮件问什么是矿震。原来是知乎的注册号职业还是煤矿行业，知乎还是挺智能的~~~</p>

<p>查了一下，辽宁那又有矿难了,矿震引起煤尘爆炸。唉&hellip;&hellip;</p>

<p>什么是矿震呢，矿上有叫岩裂的，有叫岩震的，说法不一。书上的说法是冲击地压。通俗点就是地底下挖空了，巷道两侧岩石受不了压力，就压裂塌陷了。</p>

<p>我是没遇见过，矿上听过一些老师傅讲岩裂的时候，最可怕的是两侧的石子像子弹一样弹出来，人在那个时候是没什么办法的，趴在地上逃过一劫，一般高瓦斯的矿也会引发爆炸之类的事故，这个时候就听老天爷的了。</p>

<p>又胡思乱想了很多事情。</p>

<p>我刚入行，到各个煤矿下过一些井的时候，有很多不明白的事。那时候我一边看书上的一些矿压理论，一边在井下看实际的生产，发现了很多可以改进的地方。比如离层监控，直接顶垮塌预警，还有支护距离、支护强度的选择~~~
这些事情都是有现有理论支撑的，很多情况下找几位真正懂行的专家来，做好规划和基础建设，后期是能省下很多气力的，生产也能安全的多。</p>

<p>那个时候，我用很幼稚的办法写着一个支护专家系统，想着可以用电脑帮助预测离层压力，该如何选型液压支柱等，还想着要是有个论坛，供全国的煤矿从业者交流经验，提炼知识就好了。</p>

<p>后来，我又下了一段时间的井，有一个很心凉的发现或想法，现在也不能摆脱:</p>

<p>那就是，人命也许不是那么值钱，无论是在他人眼里，或是在自己眼里。</p>

<p>我记得那时候外来人员，像我这样的厂家人员下井，一般会买20几万的地险，我至今也没有去查过之前从业的公司有没有给我买工伤保险，有点可笑是不。可事实就是这样，在山东很多小县城，正规给工人交齐保险的小工厂几乎没有，相比下，富士康其实已经是非常良心的企业了。即使企业按最低标准给你交齐各种保险(这家企业还能正常运转)，你换工作，流动到其他地方后，这些钱大部分还是要孝敬当地政府的，而且那点钱再转到外地还不够跑腿的功夫。可能一些工作稳定，长期在一个地方生活的人体会不多。但是当我辗转几个地方后，就发现交类似养老保险这种事无论对企业还是工人都是非常不划算的。</p>

<p>所以在很多地方，工人和工厂心照不宣，在没有保障的前提下尽量活着。</p>

<p>事实上，无论是工厂还是工人自己，对自己的命值多少钱，估量的数字都少得可怜。在非常好的条件下，一个青壮年在井下挂了，能得到的赔偿我估计就在30-40万之间。而且这还是&#8221;毛利&#8221;，为了得到这笔赔偿你还要杂七杂八的各种打点开销。这个估算就是以山西国有大矿为参照，像甘肃那样年产40万吨的小矿就不说了。</p>

<p>但更令我惊奇的是，甘肃那样的小矿，井下条件反而比山西的大矿好得多，井口的巷道会贴瓷砖，会有很明亮的灯，下井的工人也比大矿的工人心情更宽松。虽然硬件设施比不上人家财大气粗，但软件上的很多小细节都很贴心。</p>

<p>后来我明白了，就是西边的老矿区，一般还是把人当人来看的，说的不好听些，你真的埋在井下了，虽然赔的钱比不上大矿，但一般还有人情世故，给你家其他人安排个矿上清闲活，家里也有矿上的左邻右舍照顾着，这就是我们老派国企的作风。
像山西很多大矿，我觉得是市场化和国有企业的奇怪混合体。工人的价值，管理制度，硬件建设，都市场化了；说白了，就是这个投入下去，要比你的命便宜，就投，你的命贱，就不投。但煤炭销售，利润分配，还是要国家来管。</p>

<p>有很多瞎扯的专家讲这个制度，那个管理。似乎每次事故出来都是管理问题，制度问题&hellip;&hellip;不错，肯定是管理问题，制度问题。但是，我下井的时候，干活很累的时候，不止一次想过:就是现在顶塌了，也无所谓。
人在极累的时候，什么也顾不上的。这是人不可克服的弱点。当工人连自己性命也轻忽的时候，你和他讲这个管理，那个制度，专家们，敢到井下去讲讲吗。</p>

<p>管理当然很重要，后来我觉得，安全行业最根本的保障在于科技进步。只有人远离危险的时候，才有闲情谈管理，谈制度。</p>

<p>听新闻说中国已经成为全世界最大的机器人消费市场，非常高兴。</p>

<p>有人说会有下岗，会有就业萎缩。</p>

<p>我只想问:人命有贵贱吗?人命有价格吗?</p>

<p>如果你不想回答这种无聊的问题，就不要再对更无聊的问题评头论足了。</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Pycon2014 in Shanghai]]></title>
    <link href="http://brain-zhang.github.io/blog/2014/11/16/pycon2017-in-shanghai/"/>
    <updated>2014-11-16T04:19:21+00:00</updated>
    <id>http://brain-zhang.github.io/blog/2014/11/16/pycon2017-in-shanghai</id>
    <content type="html"><![CDATA[<p>今年又去打酱油了。在上海有这点好处，可以很方便的找到各种组织~~~</p>

<p>去年拿了个帽子，今年发了件T恤，明年来条短裤就套装啦。</p>

<p>这次Pycon非常赞，上海的组织者真用心，这次无论是演讲还是气氛都很到位。志愿者们真的辛苦了，十二分的敬礼。</p>

<p>讲的内容有几点让我很惊艳的:</p>

<ul>
<li><p>讲协程的时候提到，函数的返回值不必返回给调用者，可以返回给三方，很有启发</p></li>
<li><p>黄冬老师讲测试3层设备或者网站性能的最好办法，是把一段时间的DDOS发包抓下来，或者造出一堆SYN，直接用tcpreplay打到目标机上。很好很粗暴，也很有效</p></li>
<li><p>关于OpenCL在数据计算领域的应用，让我有点吃惊，已经这么易用了，回头要看看</p></li>
<li><p>以前一直听人说postgresql怎么怎么好，这次又被强化了一遍，这个也要研究研究</p></li>
<li><p>中间看到有演讲者调试程序用lldb，之前我一直以为它不靠谱，貌似已经很成熟了</p></li>
<li><p>机器学习讲的简洁明了，让我这个门外汉也听得津津有味</p></li>
<li><p>中间的台湾演讲同五地互动的创举，太有想法了，虽然效果不理想，但我想说太Cool了，未来的大会互动会更多元，更精彩，为这个尝试鼓掌</p></li>
<li><p>主持人非常专业，聪敏又风趣，可以直接上央视啦</p></li>
</ul>


<p>还有几点不足的:</p>

<ul>
<li><p>话筒时好时不好，这个估计让大家有点提心吊胆的。这个是经验啊，以后组织类似的活动话筒要多多益善，还要多备电池。</p></li>
<li><p>Django和创业的两个议题都有点浅，太多讲Python的ABC了，这方面的内容可以收缩下</p></li>
</ul>


<p>另外有点Confuse，会上有人提到用libpcap抓包分析网络流的，黄冬老师说性能没问题。其实我们这测试下来，绑定CPU抓包，libpcap通常的性能就在单网卡400Mbps左右。
如果用Zero Copy的话，可能性能有提升，但也不会太高。目前抓流量效率最好的是Intel的DPDK，可以到10Gbps。</p>

<p>还有魔豆提到用Selenium做自动化测试的事情，我用Selenium觉得，他的适用场景在WEB UI很少变化，并且页面结构简单的企业软件，像传统的路由器管理界面这样的东西，用它的录制测试还是可以的。
但是界面稍微个性化一些，想让测试代码长久，必须手写代码，而且是简单可靠的代码，不能单纯追求覆盖率。Selenium的测试代码虽然好写，但也容易废弃，要想写的简单可靠还是很有难度的。</p>

<p>关于UI测试，我的想法就是，尽量降低编写成本，如果一个UI测试挂了，你不能在5分钟之内修复它，直接丢弃掉！编写UI自动化测试的成本不应该超过5分钟，如果一个测试要频繁维护，那么，是重新写一个的时候了。
要想达到这个目标，我想到的简单解决方案就是图像DIFF，facebook之前出过一个huxley，我很有兴趣的研究过，还PULL过代码，但这个东西还是离我心目中的自动化图像DIFF有距离。后来又自己写了一个能把每天的测试结果保存下来，并能基于时间查看对比的东东，但效果也不好。</p>

<p>我想象中的web UI自动测试是这样的:</p>

<ul>
<li><p>支持比较模板点自定义</p>

<p>  对比的截图可以是基于录制时间最早的case的，如果中途重新录制，提供用户自定义机制。</p></li>
<li><p>支持时间轴功能</p>

<p>  1、查询时间范围的灵活选择，可以很简洁的查询某段时间、或某个时间点的case.</p>

<p>  2、可以在时间轴上直接修改比较模板的base时间点</p>

<p>  3、以不同颜色标识base时间点、pass的测试、fail的测试以及fail的个数，测试名称等</p></li>
<li><p>比较智能的图像DIFF算法:</p>

<p>  1、首先要能忽略指定区域，因为有些区域能够预测到是不断变化的。</p>

<p>  2、能对整张图、或某几个区域提供多个选择，如果符合其中一个我们就认为是OK的</p>

<p>  3、能提供组件级的识别，比如某个button，某个搜索框等等，一张截图里面如果所有指定的组件都OK，我们就认为是OK的。</p></li>
</ul>


<p>PS:已经出现了类似的开源项目:</p>

<p><a href="https://github.com/Huddle/PhantomCSS">https://github.com/Huddle/PhantomCSS</a></p>

<p>最后感概下，Pycon一年比一年进步，志愿者们功不可没。对于他们的工作，怎么赞誉都不过分。非常感谢!</p>
]]></content>
  </entry>

</feed>
