<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2021-04-22T10:16:15+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux下块设备缓存Bcache设置]]></title>
    <link href="https://happy123.me/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi/"/>
    <updated>2021-04-22T10:04:17+08:00</updated>
    <id>https://happy123.me/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi</id>
    <content type="html"><![CDATA[<h2 id="bcache">Bcache简介</h2>

<p>Bcache是Linux内核块设备层cache，支持多块HDD使用同一块SSD作为缓存盘。它让SSD作为HDD的缓存成为了可能。由于SSD价格昂贵，存储空间小，而HDD价格低廉，存储空间大，因此采用SSD作为缓存，HDD作为数据存储盘，既解决了SSD容量太小，又解决了HDD运行速度太慢的问题。</p>

<p>Bcache是从Linux-3.10开始正式并入内核主线的，因此，要使用Bcache，需要将内核升级到3.10及以上版本才行。</p>

<!-- more -->

<h2 id="bcache-1">Bcache缓存策略</h2>

<p>Bcache支持三种缓存策略，分别是：writeback、writethrough、writearoud，默认使用writethrough，缓存策略可动态修改。</p>

<ul>
  <li>
    <p>writeback 回写策略：回写策略默认是关闭的，如果开启此策略，则所有的数据将先写入缓存盘，然后等待系统将数据回写入后端数据盘中。</p>
  </li>
  <li>
    <p>writethrough 写通策略：默认的就是写通策略，此模式下，数据将会同时写入缓存盘和后端数据盘。</p>
  </li>
  <li>
    <p>writearoud ：选择此策略，数据将直接写入后端磁盘。</p>
  </li>
</ul>

<p>Write-misses写缺失(写入的数据不在缓存中)有两种处理方式：</p>

<pre><code>* Write allocate方式将写入位置读入缓存，然后采用write-hit（缓存命中写入）操作。写缺失操作与读缺失操作类似。

* No-write allocate方式并不将写入位置读入缓存，而是直接将数据写入存储。这种方式下，只有读操作会被缓存。
</code></pre>

<p>无论是Write-through还是Write-back都可以使用写缺失的两种方式之一。只是通常Write-back采用Write allocate方式，而Write-through采用No-write allocate方式；因为多次写入同一缓存时，Write allocate配合Write-back可以提升性能；而对于Write-through则没有帮助。</p>

<h2 id="section">安装</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install bcache-tools</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">操作</h2>

<p>假设我们的HDD设备为/dev/sdb， SSD设备为/dev/sdc，我们需要用SSD加速HDD</p>

<h4 id="section-2">擦除磁盘中的超级块信息</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># wipefs -a /dev/sdb
</span><span class="line"># wipefs -a /dev/sdc</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hdd">创建后端磁盘(HDD)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">make-bcache -B /dev/sdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="ssd">创建缓存盘(SSD)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">make-bcache -C /dev/sdc -w4k -b1M --writeback</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">添加缓存盘</h4>

<p>要为bcache后端磁盘添加缓存盘，在创建缓存盘成功之后，首先需要获取该缓存盘的cset.uuid</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># ls /sys/fs/bcache/
</span><span class="line">5d9e80f1-e4b7-48f5-ace2-f2f391877ea7
</span><span class="line">
</span><span class="line"># bash -c 'echo 5d9e80f1-e4b7-48f5-ace2-f2f391877ea7 &gt; /sys/block/bcache0/bcache/attach'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意，写入UUID必须以root身份才能执行，在zsh里面sudo可能会出现权限不够的问题，所以直接用<code>bash -c</code>来做</p>

<h4 id="section-4">看一下块设备结构</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># lsblk
</span><span class="line">
</span><span class="line">sdb         8:16   0 1000G  0 disk
</span><span class="line">└─bcache0 251:0    0 1000G  0 disk
</span><span class="line">sdc         8:32   0  300G  0 disk
</span><span class="line">└─bcache0 251:0    0 1000G  0 disk
</span><span class="line">
</span><span class="line">ls /sys/block/sdb/bcache/dev/slaves</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-5">格式化、挂载</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># mkfs.ext4 /dev/bcache0
</span><span class="line"># mount /dev/bcache0 /opt</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">开机自动挂载</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo "/dev/bcache0 /opt ext4 rw 0 0" &gt;&gt; /etc/fstab</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-7">测试性能</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># fio -filename=/dev/sda -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=16k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bcache-2">停用Bcache</h2>

<h4 id="section-8">卸载</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">umount /dev/bcache0</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-9">注销缓存盘</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo 1 &gt;/sys/fs/bcache/5d9e80f1-e4b7-48f5-ace2-f2f391877ea7/unregister</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-10">停用后端磁盘</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo 1 &gt; /sys/block/bcache0/bcache/stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="lsblk">操作完成后，通过lsblk命令查看结果</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># lsblk /dev/sdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>停用之后，后端磁盘的数据是不会丢的，只不过加速功能没有了；当然，注销缓存盘的时候，缓存盘不能有数据读写操作</p>

<h2 id="section-11">参考</h2>

<p>https://wiki.ubuntu.com/ServerTeam/Bcache</p>

<p>https://askubuntu.com/questions/523817/how-to-setup-bcache</p>

<p>https://markrepo.github.io/maintenance/2018/09/10/bcache/</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Split a File Into Equal Parts Without Breaking Individual Lines?]]></title>
    <link href="https://happy123.me/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines/"/>
    <updated>2021-04-19T17:26:06+08:00</updated>
    <id>https://happy123.me/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">split -n l/5 your_file.txt</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意 l/5 前面是小写的L;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remove All Non-ascii Content From a Workflow (File)]]></title>
    <link href="https://happy123.me/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file/"/>
    <updated>2021-04-17T09:46:10+08:00</updated>
    <id>https://happy123.me/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file</id>
    <content type="html"><![CDATA[<h4 id="grep-remove-lines">grep remove lines</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep --colour='auto' -P '[^\x00-\x7]' file</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="tr-remove-characters">tr remove characters</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LC_ALL=C tr -dc '\0-\177' &lt;file &gt;newfile</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Modify an Invalid '/etc/sudoers' File?]]></title>
    <link href="https://happy123.me/blog/2021/01/09/how-to-modify-an-invalid-slash-etc-slash-sudoers-file/"/>
    <updated>2021-01-09T16:16:31+08:00</updated>
    <id>https://happy123.me/blog/2021/01/09/how-to-modify-an-invalid-slash-etc-slash-sudoers-file</id>
    <content type="html"><![CDATA[<p>刚说小心驶得万年船，就想自己偷奸耍滑，手工裸编辑 <code>/etc/sudoers</code> 文件把sudo权限搞挂了…-_-</p>

<p>仔细瞅了瞅，少加了一个冒号，导致现在进退两难…</p>

<!-- more -->

<p>解决这个问题的标准方法是pkexec，参考：</p>

<p>https://askubuntu.com/questions/73864/how-to-modify-an-invalid-etc-sudoers-file</p>

<p>但是执行pkexec的时候又暴露了一个问题:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">polkit-agent-helper-1: error response to PolicyKit daemon: GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed: No session for cookie
</span><span class="line">==== AUTHENTICATION FAILED ===
</span><span class="line">Error executing command as another user: Not authorized</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后解决需要一点小技巧:</p>

<ol>
  <li>
    <p>在第一个shell种执行:<code>echo $$</code>，得到PID</p>
  </li>
  <li>
    <p>再开一个shell，再执行<code>pkttyagent --process PID</code></p>
  </li>
  <li>
    <p>再回到第一个shell执行<code>pkexec visudo</code></p>
  </li>
</ol>

<p>参考：</p>

<p>https://github.com/NixOS/nixpkgs/issues/18012</p>

<p>最后的教训是：人就是这样，要求别人头头是道，轮到自己偷奸耍滑；早用<code>visudo</code>还有这种事吗？</p>

<p>三省吾身，不说了，我得赶紧检查下自己其它耍滑头找方便留下的口子;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux服务器极简安全配置]]></title>
    <link href="https://happy123.me/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi/"/>
    <updated>2021-01-06T17:33:38+08:00</updated>
    <id>https://happy123.me/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi</id>
    <content type="html"><![CDATA[<p>网络知识了解的越多，就越胆小；也许，这就是江湖吧；</p>

<p>当配置一台新的Linux服务器并上线时，其实就是将Server暴露到了炮火横飞的战场上，任何的大意都会让其万劫不复；但由于永恒的人性的弱点，我们总是在安全和便利之间摇摆；</p>

<p>本文希望能提供一种最简单的办法，帮助我们抵抗大多数的炮火；</p>

<!-- more -->

<h4 id="section">用户管理</h4>

<p>最重要的就是不要用root用户操作，当一台服务器部署初期，为不同用途划分不同用户组以及用户能避免绝大多数悲剧；</p>

<ol>
  <li>
    <p>增加一个用户组 <code>develop</code></p>

    <p><code>
 groupadd develop
</code></p>
  </li>
  <li>
    <p>增加一个用户<code>brain</code>，设置密码，并把他加入到组 <code>develop</code></p>

    <p><code>
 useradd -d /home/brain -s /bin/bash -m brain
</code></p>

    <p><code>
 passwd brain
</code></p>

    <p><code>
 usermod -a -G develop brain
</code></p>
  </li>
  <li>
    <p>允许用户登录</p>

    <p><code>
 vim /etc/sudoers
</code></p>

    <p>找到类似下面的一行，并在后面增加一行</p>

    <p><code>
 root     ALL=(ALL:ALL) ALL
</code></p>

    <p><code>
 brain    ALL=(ALL) NOPASSWD: ALL
</code></p>

    <p>上面的NOPASSWD表示，切换sudo的时候，不需要输入密码，这样比较省事。如果出于安全考虑，也可以强制要求输入密码。</p>

    <p><code>
 root    ALL=(ALL:ALL) ALL
</code></p>

    <p><code>
 brain    ALL=(ALL:ALL) ALL
</code></p>

    <p>然后，切换到新用户的身份，检查到这一步为止，是否一切正常。</p>

    <p><code>
 su brain
</code></p>
  </li>
</ol>

<h4 id="section-1">防火墙</h4>

<p>防火墙为我们抵抗绝大多数的脚本小子的攻击，是最省力，性价比最高的配置，切勿偷懒;</p>

<p>几乎所有的公有云都提供了非常傻瓜化的web 操作界面，来设置防火墙规则，一般情况下这些设置足够了；</p>

<p>设置第一原则是：只开放必要的端口</p>

<p>如果是自己设置防火墙，iptable的使用比较复杂，我们采用最简单的规则链:</p>

<p>待整理……</p>

<h4 id="sshd">sshd配置</h4>

<p>几条最简单的配置，即能避免90%以上的恶意嗅探；</p>

<ol>
  <li>
    <p>修改默认端口</p>

    <p><code>
 vim /etc/ssh/sshd_config
</code></p>

    <p>找到默认的22端口</p>

    <p><code>
 Port 22
</code></p>

    <p>修改为</p>

    <p><code>
 Port 12222
</code></p>
  </li>
  <li>
    <p>DNS</p>

    <p><code>
 UseDNS no
</code>
 提升ssh连接速度</p>
  </li>
  <li>
    <p>Key</p>

    <p>首先，确定有SSH公钥（一般是文件~/.ssh/id_rsa.pub），如果没有的话，使用ssh-keygen命令生成一个</p>

    <p><code>
 echo "ssh-rsa [your public key]" &gt; ~/.ssh/authorized_keys
</code></p>

    <p><code>
 sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/
</code></p>

    <p>修改/etc/ssh/sshd_config</p>

    <p><code>
 PermitRootLogin no
</code></p>

    <p><code>
 PermitEmptyPasswords no
</code></p>

    <p><code>
 PasswordAuthentication no
</code></p>

    <p><code>
 RSAAuthentication yes
</code></p>

    <p><code>
 PubkeyAuthentication yes
</code></p>

    <p><code>
 AuthorizedKeysFile .ssh/authorized_keys
</code></p>
  </li>
  <li>
    <p>重新启动sshd服务让配置生效</p>

    <p><code>
 systemctl restart sshd
</code></p>
  </li>
  <li>
    <p>验证</p>

    <p>注意，此时不要退出终端；而是另开一个终端，验证配置无误，可以正常登陆后再关闭老终端；</p>

    <p>如果出现什么问题无法登录，而之前的终端窗口又关闭了，如果是远程机房，那就有得麻烦了。所以一切验证无误后再收工，是个好习惯。</p>
  </li>
</ol>

<h4 id="fail2ban">Fail2Ban</h4>

<p>警惕那些不怀好意的撞库者，用Fail2Ban 将尝试暴力破解的脚本小子自动封禁</p>

<ul>
  <li>
    <p>安装</p>

    <p>centos:
  <code>
  yum -y install epel-release
 </code></p>

    <p><code>
  sudo yum install fail2ban
 </code></p>

    <p>ubuntu:
  <code>
  sudo apt-get install fail2ban
 </code></p>
  </li>
  <li>
    <p>编辑规则文件</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/fail2ban/jail.local
</span><span class="line">[DEFAULT]
</span><span class="line">ignoreip = 127.0.0.1/8
</span><span class="line">bantime  = 86400
</span><span class="line">maxretry = 5
</span><span class="line">findtime = 1800
</span><span class="line">destemail = xxxx@xxx.com
</span><span class="line">sender = xxxx@gmail.com
</span><span class="line">mta = mail
</span><span class="line">protocol = tcp
</span><span class="line">banaction = firewallcmd-ipset
</span><span class="line">action = %(action_mwl)s
</span><span class="line">
</span><span class="line">[sshd]
</span><span class="line">enabled = true
</span><span class="line">filter  = sshd
</span><span class="line">port    = 12222
</span><span class="line">action = %(action_mwl)s
</span><span class="line">logpath = /var/log/secure</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>设定邮件转发</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/nail.rc
</span><span class="line">
</span><span class="line">## Add sendmail settings
</span><span class="line">set from=xxxx@gmail.com
</span><span class="line">set smtp=smtps:smtp.gmail.com:587
</span><span class="line">set smtp-auth-user=xxxx@gmail.com
</span><span class="line">set smtp-auth-password=xxxxx
</span><span class="line">set smtp-auth=login
</span><span class="line">set ssl-verify=ignore
</span><span class="line">set nss-config-dir=/etc/pki/nssdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>设定邮件模板</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> vim /etc/fail2ban/action.d/mail-whois-lines.conf
</span><span class="line">
</span><span class="line"># Fail2Ban configuration file
</span><span class="line">#
</span><span class="line"># Author: Cyril Jaquier
</span><span class="line">#
</span><span class="line">#
</span><span class="line">
</span><span class="line">[Definition]
</span><span class="line">
</span><span class="line"># Option: actionstart
</span><span class="line"># Notes.: command executed once at the start of Fail2Ban.
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionstart = printf %%b "Hi,\n The jail &lt;name&gt; has been started successfully.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: started on `uname -n`" &lt;dest&gt;
</span><span class="line">
</span><span class="line"># Option: actionstop
</span><span class="line"># Notes.: command executed once at the end of Fail2Ban
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionstop = printf %%b "Hi,\n The jail &lt;name&gt; has been stopped.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: stopped on `uname -n`" &lt;dest&gt;
</span><span class="line">
</span><span class="line"># Option: actioncheck
</span><span class="line"># Notes.: command executed once before each actionban command
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actioncheck =
</span><span class="line">
</span><span class="line"># Option: actionban
</span><span class="line"># Notes.: command executed when banning an IP. Take care that the
</span><span class="line"># command is executed with Fail2Ban user rights.
</span><span class="line"># Tags: See jail.conf(5) man page
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionban = printf %%b "Hi,\n The IP &lt;ip&gt; has just been banned by Fail2Ban after &lt;failures&gt; attempts against &lt;name&gt;.\n\n Here are more information about &lt;ip&gt;:\n `whois &lt;ip&gt;`\n `/bin/curl http://ip.taobao.com/service/getIpInfo.php?ip=&lt;ip&gt;`\n\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: banned &lt;ip&gt; from `uname -n`" &lt;dest&gt;
</span><span class="line">
</span><span class="line"># Option: actionunban
</span><span class="line"># Notes.: command executed when unbanning an IP. Take care that the
</span><span class="line"># command is executed with Fail2Ban user rights.
</span><span class="line"># Tags: See jail.conf(5) man page
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionunban =
</span><span class="line">
</span><span class="line">[Init]
</span><span class="line">
</span><span class="line"># Default name of the chain
</span><span class="line">#
</span><span class="line">name = default
</span><span class="line">
</span><span class="line"># Destination/Addressee of the mail
</span><span class="line">#
</span><span class="line">dest = root
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动服务，查看状态</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl start fail2ban
</span><span class="line">systemctl status fail2ban
</span><span class="line">fail2ban-client status</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Close Lightning Channels by Lnd-cli?]]></title>
    <link href="https://happy123.me/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli/"/>
    <updated>2021-01-03T16:54:10+08:00</updated>
    <id>https://happy123.me/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli</id>
    <content type="html"><![CDATA[<p>越来越有老年痴呆的倾向，这个命令至少Google过3次了，每次都忘，被自己蠢哭了~~</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli closechannel &lt;fund_txid&gt; [fund_tx_vout_NO]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不要忘了vout_NO，不然会报错”channel not found”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Systemd Startup Script for Bitcoind?]]></title>
    <link href="https://happy123.me/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind/"/>
    <updated>2020-12-29T16:22:42+08:00</updated>
    <id>https://happy123.me/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind</id>
    <content type="html"><![CDATA[<h2 id="setup-bitcoindservice">setup bitcoind.service</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/systemd/system/bitcoind.service</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[Unit]
</span><span class="line">Description=Bitcoin daemon
</span><span class="line">After=network.target
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">ExecStart=/opt/node/bitcoin/bin/bitcoind -daemon -conf=/opt/node/bitcoin/blockdata/bitcoin.conf -pid=/run/bitcoind/bitcoind.pid
</span><span class="line"># Creates /run/bitcoind owned by bitcoin
</span><span class="line">RuntimeDirectory=bitcoind
</span><span class="line">RuntimeDirectoryPreserve=yes
</span><span class="line">User=ubuntu
</span><span class="line">Type=forking
</span><span class="line">PIDFile=/run/bitcoind/bitcoind.pid
</span><span class="line">Restart=on-failure
</span><span class="line">StandardOutput=/var/log/bitcoind.log
</span><span class="line">StandardError=/var/log/bitcoind.log
</span><span class="line">
</span><span class="line"># Hardening measures
</span><span class="line">####################
</span><span class="line">
</span><span class="line"># Provide a private /tmp and /var/tmp.
</span><span class="line">PrivateTmp=true
</span><span class="line">
</span><span class="line"># Mount /usr, /boot/ and /etc read-only for the process.
</span><span class="line">ProtectSystem=full
</span><span class="line">
</span><span class="line"># Disallow the process and all of its children to gain
</span><span class="line"># new privileges through execve().
</span><span class="line">NoNewPrivileges=true
</span><span class="line">
</span><span class="line"># Use a new /dev namespace only populated with API pseudo devices
</span><span class="line"># such as /dev/null, /dev/zero and /dev/random.
</span><span class="line">PrivateDevices=true
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reload-systemctl-daemon">Reload systemctl daemon</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl daemon-reload</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="enabled-new-bitcoind-service">Enabled new bitcoind service</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl enable bitcoind</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="commands-to-start-or-stop-the-service">Commands to start or stop the service</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl stop bitcoind
</span><span class="line">systemctl start bitcoind</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="show-service-status">Show service status</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl status bitcoind.service</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>More info in:</p>

<p>https://github.com/bitcoin/bitcoin/tree/master/contrib/init</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Sort by Length of String Followed by Alphabetical Order]]></title>
    <link href="https://happy123.me/blog/2020/08/17/how-to-sort-by-length-of-string-followed-by-alphabetical-order/"/>
    <updated>2020-08-17T08:34:52+08:00</updated>
    <id>https://happy123.me/blog/2020/08/17/how-to-sort-by-length-of-string-followed-by-alphabetical-order</id>
    <content type="html"><![CDATA[<p>shell中，多行文本，先按照字母长度排序，相同长度再按照字母序排列；</p>

<p>做了很多次，隔几天就忘，让人绝望：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cat /tmp/xxx.txt|sort -u | awk '{print length($0), $0}'  | sort -k2,2n -k1,1n -k3,3 |cut -d" " -f2-|less</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xargs Sh -c Skipping the First Argument]]></title>
    <link href="https://happy123.me/blog/2020/08/12/xargs-sh-c-skipping-the-first-argument/"/>
    <updated>2020-08-12T16:46:27+08:00</updated>
    <id>https://happy123.me/blog/2020/08/12/xargs-sh-c-skipping-the-first-argument</id>
    <content type="html"><![CDATA[<p>其实这个问题已经见过很多次了，但是知其然不知其所以然；今天偶尔在stackoverflow上看到了，记录一下；</p>

<h4 id="shellarg1-arg2">shell中的arg1, arg2…</h4>

<p>在bash shell中，<code>$1</code>, <code>$2</code>代表arg1, arg2，比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs echo $1 $2
</span><span class="line">
</span><span class="line">hello world</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p><code>$0</code> 代表执行环境，如果是一个执行脚本的话，<code>$0</code> 代表其脚本名；比如下面这个脚本hello.sh:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash
</span><span class="line">
</span><span class="line">echo $0
</span><span class="line">echo $1
</span><span class="line">echo $2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># ./hello.sh arg1 arg2
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>会输出</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./hello.sh
</span><span class="line">arg1
</span><span class="line">arg2</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="xargs-sh--c-arg">xargs 调用sh -c 中的arg</h4>

<p>但是使用<code>xargs sh -c</code>时会出现一个比较疑惑的情况，比如执行:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs sh -c 'echo $1 $2'
</span><span class="line">
</span><span class="line">world</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时<code>$1</code>代表world，<code>$2</code>已经没有值了；而执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs sh -c 'echo $0 $1'
</span><span class="line">
</span><span class="line">hello world</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>反而得到了正确结果；</p>

<h4 id="why">why</h4>

<p>之前我一直认为<code>xargs sh -c</code>调用的时候吃掉了<code>$0</code>，不求甚解；偶尔读了一下sh的手册才发现玄机:</p>

<blockquote>
  <p>From the documentation for the -c option:</p>
</blockquote>

<blockquote>
  <p>Read commands from the command_string operand. Set the value of special parameter 0 (see Special Parameters) from the value of the command_name operand and the positional parameters ($1, $2, and so on) in sequence from the remaining argument operands.</p>
</blockquote>

<p>就是说在上面这条命令中，其实是没有找到要执行的命令，或者说要执行的命令为空，而hello world作为<code>$1</code>, <code>$2</code>传给一个空命令了；</p>

<p>后面追加一个dummy的命令会看的更清楚:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs sh -c 'echo $1 $2' _
</span><span class="line">
</span><span class="line">hello world</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>后面我加了一条下划线作为xargs的dummy command，这样<code>$1</code>, <code>$2</code>就恢复正常了；</p>

<h4 id="section">总结</h4>

<p>虽然这是一个啥用也没有的Magic Topic，但是搞明白之后还是挺有意思的，娱乐用；</p>

<p>另外隐隐约约觉得这里面隐含着一些安全方面的问题，暂时只是一种感觉，将来需要留意有没有这方面的hack手段;</p>

<h4 id="section-1">引用</h4>

<p>https://stackoverflow.com/questions/41043163/xargs-sh-c-skipping-the-first-argument</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Logging on Solidity Contract With Truffle Suite]]></title>
    <link href="https://happy123.me/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite/"/>
    <updated>2020-07-17T17:33:45+08:00</updated>
    <id>https://happy123.me/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite</id>
    <content type="html"><![CDATA[<p>Ethereum的智能合约调试起来很麻烦，到目前为止还是没有一个方便的类似于console.log()或printf的调用；</p>

<p>一般都是通过Event的方法来打印log；这种办法在写单元测试的时候很麻烦；</p>

<p>目前最接近于官方的手段是构造一个公用的Console库合约，然后链接到主合约里面来用；</p>

<p>https://github.com/trufflesuite/truffle-logger-example</p>

<p>这个PR一直没有Merge到TruffleSuite的新版本中，我们只能先临时手工Copy下代码来Monkey Patch一下；</p>

<p>步骤如下：</p>

<ul>
  <li>首先在主合约的同级目录添加Console.sol合约:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget https://raw.githubusercontent.com/trufflesuite/truffle/truffleLogger/packages/core/lib/logging/Console.sol</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>然后在部署脚本里面增加这个库的链接(以官方示例MetaCoin为例)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim migrations/2_deploy_contracts.js</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const Console = artifacts.require("Console");
</span><span class="line">const MetaCoin = artifacts.require("MetaCoin");
</span><span class="line">
</span><span class="line">module.exports = function(deployer) {
</span><span class="line">      deployer.deploy(Console);
</span><span class="line">        deployer.link(Console, MetaCoin);
</span><span class="line">          deployer.deploy(MetaCoin);
</span><span class="line">          };
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>在需要打印log的单元测试中引入Console.sol</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim test/TestMetaCoin.sol</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import "../contracts/Console.sol";
</span><span class="line">
</span><span class="line">.....
</span><span class="line">    console.log("xxxxxx");</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十行代码挑战世界金融体系]]></title>
    <link href="https://happy123.me/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi/"/>
    <updated>2020-04-23T15:47:39+08:00</updated>
    <id>https://happy123.me/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi</id>
    <content type="html"><![CDATA[<p>这个有点标题党了，但实话说许多”高科技”项目也是这种浮夸的宣传手段，且听我慢慢道来；</p>

<p>最近央行将推出数字货币（DCEP）的消息沸沸扬扬，在没有实际用过之前，我无意对其做过多揣测；</p>

<p>不过这个消息激起了我另一方面的兴趣，就是写一写那些在以太坊上面发行的各种山寨Token；</p>

<p>众所周知，自从Ethereum的<a href="https://github.com/ethereum/EIPs/issues/20">ERC20</a>、<a href="https://github.com/ethereum/EIPs/issues/223">ERC223</a>、<a href="https://github.com/ethereum/EIPs/issues/721">ERC721</a>、<a href="https://github.com/ethereum/EIPs/issues/777">ERC777</a>等Token合约标准诞生以来，在Ethereum上面发行一种货币的成本低的令人发指，我测算，按照现在的ETH汇率，大概10块人民币就能让你发行一个具有发行、转账、增发、销毁等基本功能的电子货币，如果导入OpenZeppelin程序库，在部署合约的时候多出100块钱左右，就可以拥有一个具有融资上限、拍卖、行权计划和其他更复杂的功能的货币。</p>

<p>先知Andreas M. Antonopoulos 曾经在2014年加拿大关于比特币的听证会上表示，未来的货币发行市场可能会超出所有人的想象，一个十几岁的屁大小子，用10行代码足以创造最灵活最有信用的货币；借助区块链的技术，一个幼儿园的童星创造的货币，可能比历史上最有权力的君王创造的货币用户更多；</p>

<p>虽然比特币发明以来，把它的代码Folk一份，修改两个参数就出来”颠覆世界”的山寨币已经数不胜数，但真正把”造币”这件事情变成无门槛，像吃棒棒糖一样容易的，还是得说以太坊的ERC20的横空出世；</p>

<p>那么，就先让我们体验一下，如何10行代码创造我们自己的棒棒糖币吧~~~</p>

<!-- more -->

<h3 id="section">前置技能</h3>

<p>虽然夸张的宣传是只需要十行代码，但是我们得懂一些前置技能:</p>

<ol>
  <li>会翻墙</li>
  <li>了解<a href="https://ethereum.org/">Ethereum</a>的基本原理，最好能把白皮书读明白</li>
  <li>学会<a href="https://github.com/ethereum/solidity/">solidity语言</a></li>
  <li>搞明白<a href="trufflesuite.com/">Truffle开发环境的使用</a></li>
  <li>会用Nodejs</li>
  <li>会用Npm安装包，因为相关代码迭代速度很快，有时候需要你自己解决一些依赖问题</li>
  <li>会一些基本的Linux命令</li>
</ol>

<p>好啦，相信老码农对于以上小门槛根本不屑一顾；</p>

<p>我们假设你满足了上面的前置条件，在一台能翻墙的Linux机器上部署了Nodejs, Geth, Truffle，让我们开干吧；</p>

<h3 id="section-1">初版</h3>

<ol>
  <li>
    <p>首先我们要完成Truffle的搭建，与我们本地运行的Geth联动，保证你的地址里面有一点ETH能支付Gas费用，这部分操作可以参考官方文档</p>
  </li>
  <li>
    <p>然后我们用Truffle命令建立一个简单的模板项目</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir CakeCoin
</span><span class="line">$ cd CakeCoin
</span><span class="line">$ truffle init</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>开始编辑我们的棒棒糖Token合约</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim contracts/CakeCoin.sol
</span><span class="line">
</span><span class="line">pragma solidity ^0.5.0;
</span><span class="line">contract CakeCoin {
</span><span class="line">    mapping (address =&gt; uint256) public balanceOf;
</span><span class="line">    constructor(uint256 initialSupply) public {
</span><span class="line">        balanceOf[msg.sender] = initialSupply;
</span><span class="line">    }
</span><span class="line">    function transfer(address _to, uint256 _value) public {
</span><span class="line">        require(balanceOf[msg.sender] &gt;= _value);
</span><span class="line">        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
</span><span class="line">        balanceOf[msg.sender] -= _value;
</span><span class="line">        balanceOf[_to] += _value;
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>编写一个部署脚本</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim migrations/2_deploy_contact.js
</span><span class="line">
</span><span class="line">var CakeCoin = artifacts.require("CakeCoin");
</span><span class="line">module.exports = function(deployer) {
</span><span class="line">  deployer.deploy(CakeCoin);
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>编译部署上链</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ truffle migrate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>大功告成，在付出大概0.001ETH的Gas费用之后，你的私人货币就发行成功了，此时你有两项权力：</p>

<ul>
  <li>可以在部署的时候指定货币的总体供应量</li>
  <li>可以执行央行的角色，把货币分发给其他人；至于分发的方式，就看你的心情了
    <ul>
      <li>可以像以太坊众筹一样，为某个时间点的所有比特币持有者做个快照，然后按照比特币的持有量给所有持有人发币</li>
      <li>可以搞宣传诈骗，先创建一个美轮美奂的高大上的网站，然后引那些不明真相的群众花钱来买你成本只有0.001ETH的棒棒糖币</li>
      <li>纯粹为了玩，发行1000万亿货币随机分发给所有以太坊玩家；这也是大多数山寨Token的初始发行办法–先把场子热起来；</li>
    </ul>
  </li>
</ul>

<p>这个合虽然简单，但是已经完成了货币的基本功能：贮存和转移，而且是一个全球通用的，不需要任何组织背书，完全依赖于以太坊的数学体系运转的电子货币；</p>

<p>不要小看这10行代码哦，在所谓的“区块链技术”纷纷攘攘的日子里，很多所谓的金融创新就是靠着这样的代码，大肆圈钱；甚至有个国家，咱就不指明了，发行个啥石油币，本质上一样的套路；</p>

<h3 id="section-2">第二版</h3>

<p>虽然这个CakeCoin已经具备了最简单的发行和转账的功能，但是查询总发行量，账户持有量等等操作只能通过与合约交互来实现，对于非码农人士太困难了，我们需要增加必要的接口:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.5.0;
</span><span class="line">
</span><span class="line">contract CakeCoin {
</span><span class="line">/* This creates an array with all balances */
</span><span class="line">    mapping (address =&gt; uint256) public balanceOf;
</span><span class="line">    uint256 public totalSupply;
</span><span class="line">
</span><span class="line">    event TransferEvent(address indexed _from, address indexed _to, uint256 _value);
</span><span class="line">
</span><span class="line">    /* Initializes contract with initial supply tokens to the creator of the contract */
</span><span class="line">    constructor(uint256 initialSupply) public {
</span><span class="line">        balanceOf[msg.sender] = initialSupply;
</span><span class="line">        totalSupply = initialSupply;
</span><span class="line">        // Give the creator all initial tokens
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    /* Send coins */
</span><span class="line">    function transfer(address _to, uint256 _value) public {
</span><span class="line">        require(balanceOf[msg.sender] &gt;= _value);
</span><span class="line">        // Check if the sender has enough
</span><span class="line">        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
</span><span class="line">        // Check for overflows
</span><span class="line">        balanceOf[msg.sender] -= _value;
</span><span class="line">        // Subtract from the sender
</span><span class="line">        balanceOf[_to] += _value;
</span><span class="line">        // Add the same to the recipient
</span><span class="line">        emit TransferEvent(msg.sender, _to, _value);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">        function getBalance(address addr) public view returns(uint) {
</span><span class="line">                return balanceOf[addr];
</span><span class="line">        }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后提供一个web UI操作界面，具体代码可以参考：</p>

<p>https://github.com/brain-zhang/CakeCoin/tree/branches/1.2/src</p>

<h3 id="erc20">第三版(ERC20)</h3>

<p>上面的货币虽然简单好用，但是有一些缺陷：</p>

<ul>
  <li>初始发行量定了就不能改了，以后不能再增发货币</li>
  <li>发行出去的货币无法注销</li>
  <li>初始发行者的权利不能转让</li>
  <li>无法开展融资等活动</li>
  <li>…..</li>
</ul>

<p>为了解决这些问题，我们想要一个更高级一点的糖果货币；毕竟，金融就是一件把事情越做越复杂的活儿，这样才好浑水摸鱼嘛^_^；</p>

<p>这么搞下来10行代码肯定不止了，但是程序员最大的特长就是造轮子，早就有人把这些东西封装成现成的库合约了,比如这个项目：</p>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts</p>

<p>我们引入一下，代码量反而更少了；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.4.0;
</span><span class="line">
</span><span class="line">import 'openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
</span><span class="line">
</span><span class="line">contract CakeCoin is StandardToken {
</span><span class="line">    string public constant name = 'CakeCoin';
</span><span class="line">    string public constant symbol = 'CAKECOIN';
</span><span class="line">    uint8 public constant decimals = 2;
</span><span class="line">    uint constant _initial_supply = 10000;
</span><span class="line">
</span><span class="line">    function CakeCoin() public {
</span><span class="line">        totalSupply_ = _initial_supply;
</span><span class="line">        balances[msg.sender] = _initial_supply;
</span><span class="line">        emit Transfer(address(0), msg.sender, _initial_supply);
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上的合约相比我们第二版，可以一眼看出有几个变化:</p>

<ol>
  <li>有了个正式的名字 <code>CakeCoin</code>, 这是ERC20的规范</li>
  <li>有了个正式的货币符号 <code>CAKECOIN</code>, 这是ERC20的规范</li>
  <li>有了精度限制, 这是ERC20的规范</li>
  <li>有了初始发行量, 这是ERC20的规范</li>
  <li>有了以上这些明文约定的东西，就很容易被第三方的交易所解析，可以直接上架交易</li>
</ol>

<p><code>openzeppelin-contracts</code> 项目发展非常快，为了便于演示，我们先采用其早期版本作为基础库；其truffle-config.js配置如下：</p>

<p>https://github.com/brain-zhang/CakeCoin/blob/branches/1.3/truffle-config.js</p>

<p>执行下面命令重新部署:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle migrate --reset</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如此一来我们就有了一个完整的符合<a href="https://docs.openzeppelin.com/contracts/3.x/erc20">ERC20</a>规范的代币；让我们先在命令行里面体验一下其能力：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ truffle console
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.address
</span><span class="line">
</span><span class="line">'0xb634675Ea3B3aDBb2B72A975cD7Ed04Be79c4873'
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到了合约的部署地址，然后我们执行下列命令看一下货币发行总量:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let supply = await CakeCoin.deployed().then(instance =&gt; instance.totalSupply())
</span><span class="line">truffle(development)&gt; supply.toString()
</span><span class="line">
</span><span class="line">'10000'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接着，我们用本地的测试区块链上创建的账户进行一笔转账，并验证其余额:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let accounts;
</span><span class="line">truffle(development)&gt; web3.eth.getAccounts((err,res) =&gt; { accounts = res });
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 10000
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.transfer(accounts[1], 100) })
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 9900
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[1]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 100
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK，验证完毕，这样我们创造了一个符合ERC20规范，可以直接上架交易所，具备基本的发行、转账功能的代币；但是我们得到的还不止于此~~~</p>

<p>ERC20最大的功能创新是使用了approve和transferFrom的两步式交易。这个流程允许代币的持有人授权其他地址操纵他们的代币。这通常用于授权给某一个合约地址，进行代币的分发，但也可以用于交易所的场景。</p>

<p>例如，某个公司正在销售ICO的代币，他们使用授权某个众筹合约的地址进行一定数量的代币分发。这个众筹合约就可以使用transferFrom把代币从持有人的余额中转账给ICO代币的买方;</p>

<p>下面我们就演示如何创建一个众筹合约来配合我们的CakeCoin实现一个自动化的代币分发</p>

<h4 id="cakecoindemo">首先我们需要建立一个接收CakeCoin的合约Demo</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.4;
</span><span class="line">
</span><span class="line">import 'openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
</span><span class="line">
</span><span class="line">// A faucet for ERC20 token CakeCoin
</span><span class="line">contract CakeCoinFaucet {
</span><span class="line">
</span><span class="line">        StandardToken public CakeCoin;
</span><span class="line">        address public CakeCoinOwner;
</span><span class="line">
</span><span class="line">        // CakeCoinFaucet constructor, provide the address of CakeCoin contract and
</span><span class="line">        // the owner address we will be approved to transferFrom
</span><span class="line">        constructor(address _CakeCoin, address _CakeCoinOwner) public {
</span><span class="line">
</span><span class="line">                // Initialize the CakeCoin from the address provided
</span><span class="line">                CakeCoin = StandardToken(_CakeCoin);
</span><span class="line">                CakeCoinOwner = _CakeCoinOwner;
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        function withdraw(uint withdraw_amount) public {
</span><span class="line">
</span><span class="line">        // Limit withdrawal amount to 10 CakeCoin
</span><span class="line">        require(withdraw_amount &lt;= 1000);
</span><span class="line">
</span><span class="line">                // Use the transferFrom function of CakeCoin
</span><span class="line">                CakeCoin.transferFrom(CakeCoinOwner, msg.sender, withdraw_amount);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">        // REJECT any incoming ether
</span><span class="line">        function () public payable { revert(); }
</span><span class="line">
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个合约的作用非常简单，就是接收CakeCoin，然后允许接收者提现到指定地址；</p>

<h4 id="migratecakecoincakecoinfaucet">修改migrate同时部署CakeCoin以及CakeCoinFaucet</h4>

<p>因为CakeCoinFaucet依赖于CakeCoin合约的部署，所以我们修订之前的2_deploy_contracts.js为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const CakeCoin = artifacts.require("CakeCoin");
</span><span class="line">const CakeCoinFaucet = artifacts.require("CakeCoinFaucet");
</span><span class="line">
</span><span class="line">module.exports = function(deployer, network, accounts) {
</span><span class="line">  var owner = accounts[0];
</span><span class="line">  deployer.deploy(CakeCoin, {from:owner}).then(function(){
</span><span class="line">    // Then deploy CakeCoinFaucet and pass the address of CakeCoinToken  and the
</span><span class="line">    // address of the owner of all the CakeCoin who will approve CakeCoinFaucet
</span><span class="line">    console.log(CakeCoin.address);
</span><span class="line">    return deployer.deploy(CakeCoinFaucet, CakeCoin.address, owner);
</span><span class="line">  });
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意，CakeCoin部署完毕后，才能得到实际的合约地址，然后CakeCoinFaucet的合约部署需要传入这个地址；</p>

<h4 id="section-3">验证</h4>

<p>首先看一下CakeCoin初始发币数目:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let accounts;
</span><span class="line">truffle(development)&gt; web3.eth.getAccounts((err,res) =&gt; { accounts = res });
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 10000</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看一下第二个测试地址的币:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好了，我们先批准CakeCoinFaucet合约对CakeCoin的控制</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.approve(CakeCoinFaucet.address, 10000) })</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>提现试一下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; CakeCoinFaucet.deployed().then(instance =&gt; { faucet = instance})
</span><span class="line">truffle(development)&gt; faucet.withdraw(1000, {from:web3.eth.accounts[1]})
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[1]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 1000</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">功能增强</h4>

<p>翻阅<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20基类代码</a>可以发现，它其实没有什么神奇之处，只不过是把各个电子货币的名称、发行量、支持接口标准化了而已，其中最重要的增强就是为其它合约支持ERC20代币提供了两个接口approve和trnasfrom；</p>

<p>我们当然可以在ERC20的标准之上添加其它增强功能</p>

<h5 id="section-5">比如创始人可以随时销毁这个合约</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">contract owned {
</span><span class="line">      address payable owner;
</span><span class="line">      // Contract constructor: set owner
</span><span class="line">      constructor() public {
</span><span class="line">              owner = msg.sender;
</span><span class="line">      }
</span><span class="line">      // Access control modifier
</span><span class="line">      modifier onlyOwner {
</span><span class="line">             require(msg.sender == owner,
</span><span class="line">                     "Only the contract owner can call this function");
</span><span class="line">           _;
</span><span class="line">      }
</span><span class="line">}
</span><span class="line">
</span><span class="line">contract CakeCoin is StandardToken, owned {
</span><span class="line">       // Contract destructor
</span><span class="line">       function destroy() public onlyOwner {
</span><span class="line">               selfdestruct(owner);
</span><span class="line">       }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="section-6">比如创始人可以销毁代币，或者增发代币</h5>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Burnable.sol</p>

<h5 id="section-7">比如创始人可以临时终止代币的使用</h5>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Pausable.sol</p>

<h4 id="section-8">甚至可以在某个合适的时间点对代币金融系统做个快照</h4>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Snapshot.sol</p>

<h4 id="section-9">妖魔横行</h4>

<p>我们用10行代码就创建了可以在技术层面媲美现代金融系统中最安全的电子货币，这一切是如此轻而易举，总觉得有哪些地方不大对劲~~~</p>

<p>是的，有的人认为这还是太麻烦了，最好有个web界面让我把币名、初始发行量、发行人等等信息填一下，最好加上两句蛊惑人心的宣传口号，然后一键发币~~</p>

<p>是的，这个要求很合理，于是诞生了像<a href="https://vittominacori.github.io/erc20-generator/">ERC20-Generator</a> 这样的开源平台，它真正做到了让幼儿园小朋友也能一键发币！</p>

<p>只要填写几个简单的参数，在安装MetaMask的浏览器中支付一点ETH Gas费用，人人都可以发币；</p>

<p>光发个币自娱自乐的人非常少，我们在之前的文章里面一再提醒，所谓的区块链领域，充斥着诈骗赌博投机者；不幸的是，这帮人对于新技术的利用和孜孜不倦的学习精神让真正的专家们汗颜；很快的，他们就把这项技术应用在割韭菜事业中~~~</p>

<p>光发币还不足以割韭菜，还记得我们之前的介绍blockchain的文章吗？里面提到了比特币的<a href="https://happy123.me/blog/2019/01/23/bi-te-bi-de-blockchain-2/">侧链</a>技术，并预言基于Atomic Swap (原子交易)技术的交易所终将会大放光彩；</p>

<p>没错，以太坊作为技术急先锋试验场，诞生了像<a href="https://uniswap.org/">Uniswap</a> 这样的平台，它是完全去中心化的，开源的，可以自动上架ERC20代币，向全世界的ETH玩家们敞开了投机大门、并且是完全公正，没有人控制的一个交易平台(当然，它有没有漏洞、是不是万无一失还很难说)~~~</p>

<p>人人都能发币，发行的货币可以毫无限制、毫无门槛的上架全世界交易流通的去中心化交易所，这就像是一个不受监管、零门槛的IPO市场，会发生什么就不用再多说了吧;</p>

<p>这是一个完全颠覆传统证券市场、传统赌博行业的一个新兴割韭菜基地；赌博投机者以其敢为人先的魄力，绝对的技术Geek范、对新技术的开放心态、野兽般的学习进取精神，还有绝妙的工程能力让人肃然起敬；</p>

<h3 id="erc223">第四版(ERC223)</h3>

<p>ERC20已经非常方便了，但是它还有一个明显的缺陷，就是把ERC20 Token发送到一个不支持它的合约B时，并不会报错，而是悄无声息的把这些Token冻结在B合约中，永远无法使用了；</p>

<p>在合约开发中，一般开发者们都会充分的考虑到接收ETH的处理，即使不能返还，也很少发生冻结ETH的问题；但是为ERC20 Token的使用者们所做的考虑却不多；作为一个开发者的角度来说，我怎么才能为无穷尽的ERC20 Token去做适配呢？ 那些傻瓜持有者们乱发到我的合约里算他们自己倒霉，有人在大街上乱撒钱然后收不回来，责任只能自己承担嘛；</p>

<p>在ICO群魔乱舞的时候，数不清的小白还没搞明白他们买到的Token到底是个什么东西，就迫不及待的充值各种合约，企图投机大赚一笔，这样做的结果就是有许多设计不当的投机合约冻结了大笔资金，并且…..没有人能取出来，即使你是这些合约的拥有者也无济于事；粗略估计这些小白们损失的资金在几百万美元的量级，可以参考：</p>

<p>https://github.com/ethereum/EIPs/issues/223</p>

<p>为了解决这个问题，有人非常贴心的提出了ERC223改进方案，思路也非常简单：</p>

<ol>
  <li>实现ERC20 Token的时候，转账函数需要检测要发送的地址是不是有效的合约</li>
  <li>如果是有效的合约，需要调用一个约定好的函数(tokenFallback)看是否能处理我发送的Token</li>
</ol>

<p>如果不满足以上两个条件，则转账失败，Token不会实际发送；</p>

<p>ERC223标准尚未被广泛采用，有关这个方案的后向兼容性、实现的形态到底是在合约接口层还是在用户界面等问题仍旧是以太坊社区讨论的焦点。</p>

<h3 id="erc777">第五版(ERC777)</h3>

<p>同样的针对ERC223提出的问题，另一个改进提案是ERC777:</p>

<p>ERC777除了要解决误把Token发给不支持的合约之外，还做了我们上文提到过的一些增强，比如:</p>

<ul>
  <li>
    <p>为代币的生成和销毁提供特定事件。</p>
  </li>
  <li>
    <p>使运营方（可信第三方，旨在验证合约）代表代币持有者移动代币。</p>
  </li>
  <li>
    <p>在userData和operator数据字段中提供代币发送交易的元数据。</p>
  </li>
  <li>
    <p>通过调用接收方的tokensReceived函数使合约和地址能够通知代币收据，并通过要求合约提供tokensReceived函数来降低代币被锁定到合约的可能性。</p>
  </li>
  <li>
    <p>允许现有合约对tokensToSend和tokensReceived函数使用代理合约。</p>
  </li>
</ul>

<p>详细请参考：</p>

<p>http://github.com/ethereum/EIPs/issues/777</p>

<p>同样的，增强越多，实施就越慢，ERC777也还在社区讨论中……</p>

<p>注意，开发ERC777 Token上架UniSwap，如果代码处理不当，会有非常严重的安全风险，今年已经有无数Hack事件教用户做人了，请参考下面的最佳实践：</p>

<p>https://github.com/OpenZeppelin/exploit-uniswap</p>

<h3 id="erc721">番外篇(ERC721)</h3>

<p>当我们能随意发行代币之后，很容易就能扩展到金融行业另外的普遍需求，资产证券化；</p>

<p>最直观的就是我们之前的文交所、邮币卡之类的证券交易，还有房产证券化REITs等产品；而这些东西在智能合约的帮助下很容易实现；</p>

<p>可以预见，将来所有现实世界的融资手段或投机产品都能在区块链上找到对应的证券化模型；</p>

<p>好了，让我们看看如何将一件唯一的资产(比如名画)在智能合约上进行交易呢？</p>

<p>为了了解ERC20和ERC721的本质区别，我们只需要看一看ERC721的内部数据结构就可以了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Mapping from deed ID to ownermapping 
</span><span class="line">(uint256 =&gt; address) private deedOwner;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ERC20将所有者作为映射的主键，跟踪每个所有者的余额；而ERC721将合约ID作为映射的主键； 这样，我们只要创造一个智能合约，收录所有证券化的画作，并分配ID；就可以将其在链上进行交易了；</p>

<p>像ERC20规定了代币的标准化信息一样，ERC721也用一个Metadata提供了资产的标识信息，详细的实现请参考:</p>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol</p>

<h3 id="erc1155">第六版(ERC1155)</h3>

<p>到目前为止，我们已经为所有现实世界中拥有的证券化手段搬上了区块链，但是注意到了吗？这一切还有局限：</p>

<p>从ERC20到ERC721，每个提案都是根据区块链应用的一步步发展慢慢提出草案来标准化的；刚开始大家想的比较简单，就是一类资产对应一个合约；但很快，就有了更大的愿景，比如：</p>

<p>如何在一个合约中发行多个代币，或多项资产？</p>

<p>最典型的场景，我们开发了一款RPG游戏(暗黑破坏神)；里面充斥着大量的装备以及游戏金币，现在我们想要把这一切搬到区块链上，玩家们可以将金币Token化，从而交易各类装备；</p>

<p>按照现有的实现，我们需要发行一个Token合约，以及好几个装备合约；这样无疑会增加交易的复杂度以及Gas成本；</p>

<p>为了解决这类问题，有人提出了ERC1155，ERC1155借鉴了ERC20，ERC721和ERC777的全部思想；可以在一个合约中发行多个代币及资产，交易的时候可以批量完成多个交换：</p>

<p>https://github.com/ethereum/eips/issues/1155</p>

<p>老实说，这个合约的实现我还没有研究过，现在此类的应用也不多，让我们留到下次再探讨吧。</p>

<h3 id="section-10">总结</h3>

<p>最后，也许你已经被这些名词、规范、绕来绕去的工具链给搞晕了；那么我们只需要认清一件事，就是这个领域在高速的发展，今天被热捧的概念，也许明天就会被抛弃；在这种蛮荒时代，骗子层出不穷，要当心啊~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -3]]></title>
    <link href="https://happy123.me/blog/2019/11/30/hello-lightning-network-3/"/>
    <updated>2019-11-30T09:12:24+08:00</updated>
    <id>https://happy123.me/blog/2019/11/30/hello-lightning-network-3</id>
    <content type="html"><![CDATA[<p>在前面几篇文章中我们评论道：闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>为了理解这个问题，我们对于闪电网络的原理做了详细的探讨，现在是谈谈社区的一些解决方案的时候了；</p>

<p>我们这篇文章就来探讨为了解决Inbound Capacity问题，目前lightningLab的一个实验项目：</p>

<p><a href="https://github.com/lightninglabs/loop">loop</a></p>

<!-- more -->

<h4 id="inbound-capacity">再次回忆Inbound Capacity</h4>

<p>想一下，我们什么时候需要注入Inbound Capacity；简单来说，有两种典型的场景：</p>

<ol>
  <li>商家收款，Inbound Capacity消耗殆尽</li>
  <li>小白初次体验闪电钱包，向朋友收款，需要开辟第一个收款通道</li>
</ol>

<p>在一个人人都使用闪电的理想未来中，这个系统是自平衡的。你付给别人的钱和你从他们那里得到的钱一样多，而资金只是不停地来回流动。然而，在今天的闪电网络状态下，这并不符合实际情况。例如，一个商人通过闪电销售产品，但通过另一种支付方式支付其供应商可能会积累越来越多的平衡在其闪电渠道，直到客户不能再支付。所有的资金都移到了商人那边。</p>

<p>现在最普遍的解决办法就是向三方服务商购买通道服务。这就造成了一个让比特币老手匪夷所思的疑问：不是说闪电网络好用吗？怎么收个款这么折腾？难道我要收款，还得先求别人来给我铺路？</p>

<p>为什么我不能自己动手，丰衣足食呢？还有，假如我是商家，收款的时候还得时时操心额度够不够，这不是折腾吗？</p>

<p>这是非常正常的质疑，因此我们一再说闪电网络还处于发展期，有很多基础设施不够完善；</p>

<h2 id="loop">LOOP</h2>

<ul>
  <li>在我们的想象中，闪电网络应该提供这样一种服务：</li>
</ul>

<p>让用户能够用来自钱包或交易所的链上比特币来填充他们的闪电通道。当用户通过闪电网络进行一系列支付时，她的Inbound 余额就会下降。然后，她可以使用这个服务从一个普通的比特币链上钱包或通过一个交易所账户，在闪电通道上重新注入资金，并在必要时继续增加额外的资金。</p>

<p>这项服务还应该允许用户使用非托管的比特币合约，安全地将资金从闪电网络中转移到其他地方。有了LOOP，用户、企业和路由节点运营商就能够无限期地保持闪电通道的开放，从而使网络更高效、更稳定、使用更便宜。</p>

<p>在这个场景中，不论是用户的链上钱包，还是闪电通道，只要还有余额，就能没有感知的继续付款和收款，直到余额消费完毕为止；</p>

<p>用户的体验应该是打开钱包，即可完成每一笔支付和收款交易，而不用去操心通道余额，Inbound Capacity这些烦心问题；</p>

<p>要做到这些，Loop的解决方案是利用闪电通道付款(把资金从你这边推出)，然后在一个链上地址收到钱。你有效地将支付循环回你自己，因此得名闪电循环(Loop)。</p>

<p>任何通道都可以反复循环。不需要打开新的通道，用户可以选择他们想要循环出去的对等点。这是与“销售”服务和用户之间的通道的现有服务相比的一个优势。</p>

<p>有了这些服务，任何支付给用户的收入将支付路由费用。它们绑定到目标服务的路由策略。除此之外，许多用户使用相同的服务打开通道会造成单点故障。客户端Lightning Loop软件和协议是开源的，并且是经过mit许可的，而服务器端则可以通过使用比特币合约来完全验证。</p>

<p>我们当然可以成立一个托管方来完成一切操作，但是，在去中心化的背景下，为每一个用户提供这样的能力也是非常重要的；让我们看看Loop是如何做到这一切的；</p>

<h4 id="loop-1">一个最基本的LOOP循环</h4>

<p>一个最基本的LOOP循环包含下面这几个步骤：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191130/bg1.jpg" alt="img" /></p>

<p>我们假设商家的名字叫Bob，他想用自己的链上钱包充值一个闪电通道，他连接到了一个LOOP服务，这个LOOP服务可以是Bob自己架设，也可以是不需要信任的第三方假设的；</p>

<ol>
  <li>Bob生成一个秘密散列预原像值R，以及散列结果H</li>
  <li>Bob将与此散列H绑定的付款发送到Lightning Loop服务器。服务器还不能消费这笔款项，因为它还不知道R。相反，它会一直持有这笔支付交易，直到它得到原像R。此部分使用hodl发票实现。</li>
  <li>服务器将一个链上事务发布到一个输出(交易C1a)，该输出可以通过公开原像R(一笔P2SH交易)来消费，这是一笔链上的HTLC交易</li>
  <li>Bob将监控到这笔交易，他提供了R值消费了这笔交易(称为sweep tx)，此时R值成为一个公共知识</li>
  <li>服务器同样监控到这笔交易的消费，它从其中提取R值，并使用它来处理它仍然持有的闪电支付。最后一步完成交换。</li>
</ol>

<p>如果服务器保留闪电支付，并且从不发布链上事务，那么支付将超时，资金将返回给用户。这构成了服务的非托管性质。在超时的情况下，用户会受到轻微的惩罚，因为Loop将锁定他们的资金直到超时。</p>

<h4 id="section">预付款</h4>

<p>LOOP服务器需要花钱构造一个HTLC 链上交易。如果Bob不消费这笔交易，LOOP服务器将失去这笔钱。如果不进行检查，这可能会引入一个DoS攻击方法，将循环系统的空闲UTXOs消耗一空。</p>

<p>为了防止这种情况发生，Bob需要在交换付款的同时进行第二次闪电付款，称为预付款(prepayment)。这个想法是，如果交换没有成功，但是服务器发布了链上 HTLC(C1a)，服务器保留预付款作为对矿商费用损失的补偿。</p>

<h4 id="bobhtlc">Bob消费链上HTLC</h4>

<p>当Bob的消费HTLC(C1a)的交易进入mempool(上面的步骤4)时，就会显示原像R值。从那时起，原像R将被视为公共知识，Bob应该期待他们的闪电付款尽快成功确认。正是出于这个原因，Bob需要确保消费交易得到确认。有一件事可能会延迟确认，那就是以过低的矿商费发布消费交易。但是，用户可以使用诸如RBF和CPFP等费用提升工具来确保及时的确认。</p>

<p>在Lightning Loop中，通过启用RBF并尝试用基于最新费用估计的新交易替换每个块中的sweep交易来处理未确认的交易风险。交易费用的上限是用户在开始交换时指定的最大矿商费用，以避免在链上支付过高的费用。</p>

<h4 id="section-1">时间压力</h4>

<p>不幸的是，对于用户Bob来说，确认扫描交易的时间是有限的。LOOP服务器需要一种方法，如果Bob没有发布R值来消费这笔链上交易C1a，服务器也可以收回资金。因此，链上交换输出同时被一个散列和一个时间锁定，这使得它成为一个类似于常规闪电支付中使用的HTLC的hashtime locked contract (HTLC)。</p>

<p>当交换被启动时，服务器会选择HTLC的实际到期高度，并根据循环客户端实现可接受的最小值进行检查。如果服务器建议的到期时间太短，将不会构造C1a，并且交换将终止。这样做的原因是，用户需要有一个合理的机会来确认C1a的消费交易。</p>

<p>当用户通过在内存池中插入消费交易来公开原像R时，计时器开始计时。用户需要在达到到期高度并打开服务器回收路径之前确认交易。</p>

<p>当Bob公布了R值，但他的消费交易却因为费用太低而迟迟无法确认，当接近到期高度时，Bob可能需要更积极地提高收费。他甚至可能想要超过设定的最大矿商费，因为另一种选择可能是失去全部掉期金额。</p>

<h4 id="section-2">服务器如何保证公正</h4>

<p>LOOP的目标是以一种不考虑服务器行为的方式实现它。它应该考虑服务器作恶的情况。例如，从服务器接收到的所有值和on-chain HTLC的参数都由客户机在本地进行检查。如果任何操作超出了可接受的范围，则LOOP交换将中止。</p>

<p>尽管做了这些准备，但Loop还实现了一个“公平”的服务器。只要对方可以选择不同的行为，LOOP Server就会选择对用户最有利的行为。相对的，有些对手服务器会抓住任何机会来最大化利润。由于掉期是非托管性的，幸运的是，这样的机会并不多。它们大多出现在用户不愉快的流程和错误方面。</p>

<p>取消掉期支付就是一个例证。当链上的HTLC过期且超时交易得到充分确认后，服务器需要收回资金时，将立即取消所持有的通道中的付款。它本来可以持有它更久，希望由于某种原因，原像R仍然会出现在mempool当中，但公平的服务器不会这样做。</p>

<h4 id="section-3">递归循环</h4>

<p>有了LOOP，就有可能使用一定数量的资金X来获得比X大得多的流入流动性。用收到的链上基金，可以注入到打开的另一个通道中去，这个通道的资金也可以循环出去。只要还有资金，这个过程就可以继续下去，因为每一步都需要向矿工、路由节点和循环服务支付费用。这个方法称为“环回”。</p>

<p>这样做的最终结果是，路由节点会向用户的节点提交大量资金。对他们来说，希望他们能从中赚取一些路由费用。</p>

<p>这也强调了路由节点监视它们的通道并关闭不产生任何返回的通道的必要性。</p>

<p>将链上资金注入闪电通道的行为我们称之为 LoopIn，将闪电通道的资金支付回链上钱包的行为我们称之为LoopOut。</p>

<p>Bob的LoopIn只可以为自己的通道注资，来源资金可以来自自己的钱包，也可以通过指定一笔外部的on-chain HTLC交易给通道注资；如果某个交易所支持这种Loop方式，也许将来你可以直接从交易所托管的在线钱包中提取资金到你的闪电通道中；</p>

<p>而LoopOut既可以付款给自己，也可以指定一个三方钱包地址，这在发工资的时候可能很有用；</p>

<h4 id="section-4">缺陷</h4>

<p>为了防止DoS攻击，使用LOOP服务需要一笔预付款。预付款数额是名义上的，最多是几千satoshis。在API和CLI中，执行交换的用户可以预先看到他们同意的预付金额。</p>

<p>除此之外，还需要使用HTLCs对传入和传出的CLTV输出进行标准超时处理。这与Lightning中所需的时间锁管理级别没有什么不同。然而，良好的费用选择启发式的影响可以降低到最低。</p>

<h4 id="section-5">结论</h4>

<p>可以看到，与循环输出提供的独特优势相比，上述几点缺陷微不足道。它为用户提供了从任何人获得流入流动性的灵活性。它不会推动集中式的网络拓扑结构，并提供了重用现有通道的方法，从而延长了通道的生存期。</p>

<h2 id="section-6">实践</h2>

<h4 id="loop-2">架设一个LOOP服务</h4>

<p>Loop目前只能跟lnd搭配使用，我们在同一台机器上，模拟Bob商户，在不需要别人帮助的情况下为自己的闪电通道Inbound注资；</p>

<ul>
  <li>lnd的编译需要特殊开关才能支持loop:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/lightningnetwork/lnd.git
</span><span class="line">cd lnd
</span><span class="line">make install tags="signrpc walletrpc chainrpc invoicesrpc routerrpc"</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动lnd</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nohup ./lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=xxxxx --bitcoind.rpcpass='xxxxx' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=x.x.x.x 2&gt;&amp;1 &gt; lndtest.log &amp;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>启动之后你会发现多了几个macaroon验证文件，关于macaroon，我们以后会写文章介绍；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ls ~/.lnd/data/chain/bitcoin/testnet/
</span><span class="line">admin.macaroon  chainnotifier.macaroon  channel.backup  invoice.macaroon  invoices.macaroon  macaroons.db  readonly.macaroon  router.macaroon  signer.macaroon  wallet.db  walletkit.macaroon</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>如果没有闪电通道的话，建立一个闪电通道，此步骤参考之前的文章</p>
  </li>
  <li>
    <p>编译loop</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/lightninglabs/loop.git
</span><span class="line">cd loop/cmd
</span><span class="line">go install ./...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译之后会得到两个可执行文件，服务程序loopd，以及命令行cli交互工具loop;</p>

<ul>
  <li>启动loopd</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nohup loopd &gt;&gt; loopd.log 2&gt;&amp;1 &amp;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>将链上钱包的钱注入到已有的闪电网络通道中</li>
</ul>

<p>因为我们是自助服务，所以我们使用loop out提取一部分链下的资金，回收到自己的链上钱包中，同时为自己的通道注入流动性</p>

<p>在注入之前，我们已经建立了一个持有1000000 satoshi的通道，不过这1000000 satoshi都在我们自己<code>local_balance</code>一端，我们的<code>remote_balance</code>此时是0；</p>

<p>我们执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./loop out 500000 tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx
</span><span class="line">./loop monitor</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>持续监控log输出，我们发现此时通道状态变成了这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class=""><span class="line">channel:
</span><span class="line">    "channels": [
</span><span class="line">        {
</span><span class="line">            "active": true,
</span><span class="line">            "remote_pubkey": "xxxxx",
</span><span class="line">            "channel_point": "zzzzzz:1",
</span><span class="line">            "chan_id": "111111111111",
</span><span class="line">            "capacity": "1000000",
</span><span class="line">            "local_balance": "498627",
</span><span class="line">            "remote_balance": "0",
</span><span class="line">            "commit_fee": "271",
</span><span class="line">            "commit_weight": "944",
</span><span class="line">            "fee_per_kw": "253",
</span><span class="line">            "unsettled_balance": "501102",
</span><span class="line">            "total_satoshis_sent": "0",
</span><span class="line">            "total_satoshis_received": "0",
</span><span class="line">            "num_updates": "21",
</span><span class="line">            "pending_htlcs": [
</span><span class="line">                {
</span><span class="line">                    "incoming": false,
</span><span class="line">                    "amount": "1338",
</span><span class="line">                    "hash_lock": "eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=",
</span><span class="line">                    "expiration_height": 1609844
</span><span class="line">                },
</span><span class="line">                {
</span><span class="line">                    "incoming": false,
</span><span class="line">                    "amount": "1338",
</span><span class="line">                    "hash_lock": "eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=",
</span><span class="line">                    "expiration_height": 1609844
</span><span class="line">                },
</span><span class="line">                {
</span><span class="line">                    "incoming": false,
</span><span class="line">                    "amount": "499764",
</span><span class="line">                    "hash_lock": "+xsofcSn9Y+Wx94vkx66rl5rgQoDthVBI4Pvhp6lhX4=",
</span><span class="line">                    "expiration_height": 1609988
</span><span class="line">                }
</span><span class="line">            ],
</span><span class="line">            "csv_delay": 144,
</span><span class="line">            "private": false,
</span><span class="line">            "initiator": true,
</span><span class="line">            "chan_status_flags": "ChanStatusDefault",
</span><span class="line">            "local_chan_reserve_sat": "10000",
</span><span class="line">            "remote_chan_reserve_sat": "10000",
</span><span class="line">            "static_remote_key": false
</span><span class="line">        }
</span><span class="line">    ]
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通道中现在有了htlc交易，并设定了一个过期块高度;</p>

<p>此时loopd的输出如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2019-11-24 10:58:48.403 [INF] LOOP: Offchain swap destination: xxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class="line">2019-11-24 10:58:53.073 [INF] LOOPD: Loop out request received
</span><span class="line">2019-11-24 10:58:53.073 [INF] LOOP: LoopOut 0.005 BTC to tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx (channel: &lt;nil&gt;)
</span><span class="line">2019-11-24 10:58:53.078 [INF] LOOP: Initiating swap request at height 1609561
</span><span class="line">2019-11-24 10:58:53.423 [INF] LOOP: fb1b28 Htlc address: tb1qku40cmlsrmdtyqp6vgpjw9vpe8jkcp3ullxa9u5yphpdequc6f4qa60ts8
</span><span class="line">2019-11-24 10:58:53.424 [INF] LOOP: fb1b28 state Initiated
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending swap payment lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm (id:fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e)
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending prepayment lntb13370n1pwanu0dpp50rhm7qj4lvw5g723h95ejvlp7zwdf622hvkduaxm4y7ycpumzu0sdq2wpex2urp0ycqzxgxq97zvuqkhdq3yvlvljdkz2h3u5s37q2h6mxt4w3ynucnf6psckwpc80l3y944h09ruj2m2zacyshuch7hdwzl86n6nva0lan8lyg3rhshqsn0qprgdyel (id:78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f )
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Register conf ntfn for swap script on chain (hh=1609561)
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609561)
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Waiting for either htlc on-chain confirmation or  off-chain payment failure
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意，这里产生了两笔闪电支付，分别是注入通道的资金(swap payment)，以及预付款(prepayment)；Loop服务端立即发布了链上交易，期待得到swap payment的原像R值；</p>

<p>然后我们等待链上交易的确认:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2019-11-24 10:59:02.029 [INF] LOOPD: Monitor request received
</span><span class="line">2019-11-24 11:10:41.583 [INF] LOOP: Received block 1609562
</span><span class="line">2019-11-24 11:10:41.585 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609562)
</span><span class="line">2019-11-24 11:28:10.032 [INF] LOOPD: Loop out terms request received
</span><span class="line">2019-11-24 11:28:10.091 [INF] LOOPD: Loop in terms request received
</span><span class="line">2019-11-24 11:28:53.934 [INF] LNDC: Payment 78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f completed
</span><span class="line">2019-11-24 11:29:36.256 [INF] LOOPD: Monitor request received
</span><span class="line">2019-11-24 11:30:27.928 [INF] LOOP: Received block 1609563
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609563)
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Swap script confirmed on chain
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc tx eac746dd4c7f28edd277a39aa4771b651f0faf1d11f82bacf03e668b35a5658b at height 1609563
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc value: 0.005 BTC
</span><span class="line">2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 state PreimageRevealed
</span><span class="line">2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 Sweep on chain HTLC to address tb1q3d8l6wgqprl7tgtgwlqcxq8fts8vf5cwezww9s with fee 0.00000138 BTC (tx 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc)
</span><span class="line">2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Htlc spend by tx: 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc
</span><span class="line">2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Wait for server pulling off-chain payment(s)
</span><span class="line">2019-11-24 11:45:01.841 [INF] LNDC: Payment fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e completed
</span><span class="line">2019-11-24 11:45:01.841 [INF] LOOP: fb1b28 Swap completed: Success (final cost: server 0.000006 BTC, onchain 0.00000138 BTC, offchain 0.00000502 BTC)
</span><span class="line">2019-11-24 11:45:01.842 [INF] LOOP: fb1b28 state Success</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>客户端迅速消费了链上交易，一个区块确认之后，整个交换过程完成：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">success swap payment:
</span><span class="line">
</span><span class="line">        {
</span><span class="line">            "payment_hash": "fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e",
</span><span class="line">            "value": "499263",
</span><span class="line">            "creation_date": "1574564333",
</span><span class="line">            "path": [
</span><span class="line">                "03052ae5c77d75264a13ab0d34520bd8260de9542e7d930cbe6bc5137485f065f3",
</span><span class="line">                "03d5e17a3c213fe490e1b0c389f8cfcfcea08a29717d50a9f453735e0ab2a7c003",
</span><span class="line">                "03fe1c271da46da5cf632beb84551c4100064d830b89dc46f8975123803cc93ff3",
</span><span class="line">                "0223acffd7f363b4591ce860eda870fea352e981212d8a25e96a0ebea37faae288"
</span><span class="line">            ],
</span><span class="line">            "fee": "501",
</span><span class="line">            "payment_preimage": "b975dc85897b707865dcff54b96511568f86622c89020a2678171e083001717a",
</span><span class="line">            "value_sat": "499263",
</span><span class="line">            "value_msat": "499263000",
</span><span class="line">            "payment_request": "lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm",
</span><span class="line">            "status": "SUCCEEDED",
</span><span class="line">            "fee_sat": "501",
</span><span class="line">            "fee_msat": "501762"
</span><span class="line">        }
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时的通道状态:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">    "channels": [
</span><span class="line">        {
</span><span class="line">            "active": true,
</span><span class="line">            "remote_pubkey": "xxxxx",
</span><span class="line">            "channel_point": "zzzzzz:1",
</span><span class="line">            "chan_id": "111111111111",
</span><span class="line">            "capacity": "1000000",
</span><span class="line">            "local_balance": "498714",
</span><span class="line">            "remote_balance": "501102",
</span><span class="line">            "commit_fee": "184",
</span><span class="line">            "commit_weight": "724",
</span><span class="line">            "fee_per_kw": "253",
</span><span class="line">            "unsettled_balance": "0",
</span><span class="line">            "total_satoshis_sent": "501102",
</span><span class="line">            "total_satoshis_received": "0",
</span><span class="line">            "num_updates": "23",
</span><span class="line">            "pending_htlcs": [
</span><span class="line">            ],
</span><span class="line">            "csv_delay": 144,
</span><span class="line">            "private": false,
</span><span class="line">            "initiator": true,
</span><span class="line">            "chan_status_flags": "ChanStatusDefault",
</span><span class="line">            "local_chan_reserve_sat": "10000",
</span><span class="line">            "remote_chan_reserve_sat": "10000",
</span><span class="line">            "static_remote_key": false
</span><span class="line">        }
</span><span class="line">    ]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们loop循环出通道的一半资金返回到我们的链上钱包，同时在通道另一端注入了流动性；总体花费：</p>

<ol>
  <li>pre payment 费用</li>
  <li>on-chain HTLC 矿工费</li>
  <li>on-chain HTLC 花费交易(sweep tx)的矿工费</li>
</ol>

<p>最后，我们自立更生，为一个通道注入的Inbound流动性。</p>

<h2 id="section-7">小结</h2>

<p>与比特币刚出现时的情况一样，整个过程漫长而枯燥，批评者会说：哦，太麻烦了，太糟糕了；我不能想象会有人用这种东西！！</p>

<p>不要着急，LOOP技术为闪电网络通道的资金管理提供了无限的可能性；个人运行一个LOOP Server的成本非常低，并且可以想象，在闪电网络的极大繁荣期，并不是只有大公司才能以极大的资金量提供闪电通道的服务，小商家通过精细的运营和筹划，在安全保证本金的前提下，运营一个 LOOP节点来获得手续费用，其性价比会超过运营一个超大规模的闪电节点；就像换汇一样，如果开放自由市场，国家控制的大银行无疑在换汇服务中有极大的优势，但能提供更低廉、更方便的换汇服务的，往往是街头不起眼的小商小贩；</p>

<p>不要因为它现在只是一棵幼苗而轻视它，也许二十年后，它会成长为一棵参天大树。</p>

<h4 id="stay-hungry-stay-foolish">饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</h4>

<h4 id="section-8">引用</h4>

<p>https://blog.lightning.engineering/posts/2019/03/20/loop.html</p>

<p>https://blog.lightning.engineering/technical/posts/2019/04/15/loop-out-in-depth.html</p>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>

<p>https://blog.lightning.engineering/posts/2018/05/30/routing.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -2]]></title>
    <link href="https://happy123.me/blog/2019/11/26/hello-lightning-network-2/"/>
    <updated>2019-11-26T17:14:16+08:00</updated>
    <id>https://happy123.me/blog/2019/11/26/hello-lightning-network-2</id>
    <content type="html"><![CDATA[<p>在上一篇文章中我们评论道：闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>为了研究如何解决Inbound Capacity的问题，我们还需要复习并深化闪电网络的一些基础知识；即RSMC 和HTLC；这些基础我们曾在<a href="https://happy123.me/blog/2019/01/06/bi-te-bi-de-jiao-yi-7/">之前的文章中</a>简要介绍过，但只是对网上的资料做了一番整理，人云亦云而已，实在是辜负了闪电网络；</p>

<p>如果把闪电网络比作一支跌宕起伏的乐章，那RSMC和HTLC就是其中最华彩的两个小节，围绕这两个基础技术所衍生的种种细节Tooltips就是其中的伴奏，整个乐章美不胜收。那么，让我们沉下心来仔细体味吧；</p>

<!-- more -->

<h2 id="rsmc-recoverable-sequence-maturity-contract----rsmc">RSMC (Recoverable Sequence Maturity Contract) – 序列到期可撤销合约RSMC</h2>

<h4 id="funding-tx">Funding Tx</h4>

<p>让我们再回忆一下链下(off-chain)交易的双方要解决的信任问题：Alice和Bob想要实现公正的，双方都无法作弊的多次交易，他们需要做什么；</p>

<p>首先他们需要向对方展示一下自己有支付的能力，放到现实世界里面做个类比，我们买房摇号时要冻结一笔保证金，这样双方能够放心；</p>

<p>买房者的保证金放到银行账户上，银行来确保开发商不会挪用，但在去中心化的世界里面，如何向对方证明自己的资金实力呢？毕竟，比特币世界里面，可没有中心化的银行；</p>

<p>这需要双方各自将一笔保证金打到一个2-2 多重签名地址当中，这样只要这笔资金不被挪用，就会在这段时间内表明双方的资金实力；</p>

<p>这笔交易被称之为Funding Tx，一般翻译为保证金交易；Funding Tx交易输出的资金需要Alice和Bob两个人的签名同意才能动用；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg0-1.jpg" alt="img" /></p>

<p>Funding Tx构造之后，最终资金如何花费需要取得双方的同意，当双方产生分歧时，这笔钱就有可能冻结在这个地址永远无法花费，所以此时还不能广播上链；所以支付通道建立初期， 状况是这样的：</p>

<ol>
  <li>Alice和Bob 通过协商，构造了Funding Tx交易；双方都需要将自己的资金打入一个2-2多重签名地址；</li>
  <li>Funding Tx交易的UTXO需要两人签名才能花费，而此时Alice没有Bob的签名，Bob也没有Alice的签名，只算个口头协议而已</li>
  <li>由于担心之后存在的分歧，Funding Tx交易还不能广播到链上</li>
</ol>

<h4 id="commitment-tx">Commitment Tx</h4>

<p>Funding Tx需要解决几个问题，才能让人放心大胆的广播出去：</p>

<ol>
  <li>需要防止某一方 <code>损人不利己</code> – 永远不同意释放这笔资金，然后这笔钱就一直冻结在这里了；</li>
  <li>相互签名之后，需要防止某一方全部提款走人，每一方只能花费自己应得资金；在上图中，要保证当前状态下，Alice和Bob各自只能花费0.5BTC</li>
</ol>

<p>于是我们产生了一个初步的方案：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg0-2.jpg" alt="img" /></p>

<p>Alice构造了C1a交易，这笔交易的Input是Funing Tx的output，但是输出上做了限制，它将资金分配到了两个output:</p>

<ul>
  <li>需要Alice2和Bob的签名才能花费 (0.5BTC)</li>
  <li>直接还给Bob 0.5BTC</li>
</ul>

<p>这样的交易输出保证Bob不会吃亏，在任何情况下，Alice解约，Bob会立即收到自己的0.5BTC；</p>

<p>但是Alice呢？Alice的0.5BTC怎么办呢？ Alice会对Bob说：我够意思吧，任何情况下，你都能拿回自己的0.5BTC，那么，你如果能对 Alice2&amp;Bob的Output提供签名，那就太好了，这样我们就能达成交易了，这样任何时候都不会让你吃亏；</p>

<p>同样的，Bob也会构造C1b交易，他会说：好吧，Alice，你确实是个诚信的人；你的做法启发了我，为了能随时解约，我也同样构造了一笔交易，无论何时，你都能拿回自己应得的0.5个BTC，而这笔交易也需要你签署一下；</p>

<p>双方的这两笔交易我们称之为 Commitment Tx(承诺交易)；</p>

<p>我们可以想象，Alice和Bob两个人高高兴兴的互相为对方的交易签名，并为合作双方不用依靠别人就达成了如此巧妙而公平的交易而洋洋自得；</p>

<p>此时，无论是Funding TX，还是双方的Commitment Tx，都还没有广播出去; 但是似乎在达成了Commitment Tx之后，可以广播Funding Tx了；</p>

<p>但是且慢!！ 我们建立资金通道的目的是什么？</p>

<p>当然是为了解决资金的链下双向流通问题，目前双方在不依靠第三方公证人的前提下，成功冻结了一笔保证金，可是怎么让这笔保证金流动起来呢？</p>

<h4 id="rsmc">RSMC</h4>

<p>聪明的Alice和Bob再次对他们的通道交易做了升级，现在通道里面的交易变成了这样：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg1.jpg" alt="img" /></p>

<p>在Alice一方， 又增加了一笔交易， 即RD1a；</p>

<p>RD1a消费了C1a的第一个输出，即 <code>Alice2 &amp; Bob 0.5btc</code>， 而RD1a直接输出给Alice，但是这笔交易有一个限制条件，即seq=1000，即如果广播C1a的话，要等1000个block之后，RD1a才会生效；</p>

<p>C1a, C1b两笔交易花费的是同一个输出，故他们两个交易只有一个能进块。若Alice广播C1a，则Bob立即拿到0.5BTC（C1a的第二个输出），而Alice需要等C1a得到1000个确认，才能通过RD1a的输出拿到0.5BTC。另一方，若Bob广播C1b，则Alice立即拿到0.5BTC，Bob等待C1b得到1000个确认，才能通过RD1b拿到0.5BTC。也就是说，单方广播交易终止合约的那一方会延迟拿到币，而另一放则立即拿币。</p>

<p>上述过程以及结构图的描述，就是创建RSMC的全部过程。</p>

<h4 id="section">交易更新</h4>

<p>Alice和Bob各自0.5BTC的余额，此时Alice从Bob处购买了一件商品，价格为0.1BTC，那么余额应该变为Alice 0.4BTC，Bob 0.6BTC。</p>

<p>于是创建新的Commitment Tx，对于Alice来说是C2a 和RD2a，对于Bob来说是C2b和RD2b，过程与上面类似。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg2.jpg" alt="img" /></p>

<p>交易更新时的交易结构–此时两个状态均是有效的，那么最核心的问题来了，如何才能彻底废弃掉C1a和C1b呢？</p>

<p>RSMC采用了一个非常巧妙的方法，在C1a的第一个输出中，采用了Alice2和Bob的多重签名，Alice将Alice2 的私钥交给Bob，即表示Alice放弃C1a，承认C2a。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg3.jpg" alt="img" /></p>

<p>Alice交出Alice2的私钥给Bob，那么Bob就可以修改RD1a的输出给他自己，形成新的交易BR1a。</p>

<p>若Alice破坏合约存在C2a的情况下依然广播出C1a，那么Alice的惩罚就是失去她全部的币。</p>

<p>Alice交出Alice2的私钥，或者对交易BR1a进行签名，两者是等同的，都是对C1a的放弃。反之亦然，Bob交出Bob2的私钥给Alice即意味放弃C1b，而仅能认可C2b。</p>

<p>引入sequence的目的是，阻止后续交易进块（RD1a），给出一个实施惩罚窗口期，当发现对方破坏合约时，可以有1000个块确认的时间去实施惩罚交易，即广播BR1a代替RD1a。若错过1000个块时间窗口，则无法再实施惩罚了（RD1a进块了）。</p>

<h4 id="section-1">小结</h4>

<p>Alice和Bob两人通过不断的协商和推敲，最终建立了这样一个通道：</p>

<ol>
  <li>两人各自拿出一笔资金来放入这个通道中</li>
  <li>每个人都可以随时随地自由解约，同时任何情况下两人的资金都不会有损失</li>
  <li>通道的资金可以在两方协商同意的情况下任意分配，而不需要交易广播上链</li>
</ol>

<p>在达成了Funding Tx、C1a, C2a, RD1a, RD2a 这些交易之后，Alice和Bob两人就可以广播Funding Tx了，这是唯一需要广播的交易，建立通道后，双方所有的交易就是更新Commitment Tx的过程了，这些更新都可以通过链下完成，交易速度理论上只取决于Alice及Bob两方的网络和机器性能，可以很轻易的提升至数千TPS；</p>

<h2 id="htlc-hashed-timelock-contract---htlc">HTLC (Hashed Timelock Contract) –哈希时间锁定合约HTLC</h2>

<h4 id="section-2">交易中转</h4>

<p>RSMC要求交易的双方一定要都缴纳一笔保证金，我每天都跟不同的商家打交道，不能跟每个人都去建立RSMC，存入一笔资金吧。而且通道的建立和关闭都是需要链上广播的，如果要建立多个支付通道，交易费用也不容小觑，这有点本末倒置了吧。</p>

<p>为了解决这个问题，闪电网络又引入了HTLC ( Hashed Timelock Contract )，中文意思是“哈希的带时钟的合约”。这个其实就是限时转账。理解起来也很简单，通过智能合约，双方约定转账方先冻结一笔钱，并提供一个哈希值，如果在一定时间内有人能提出一个字符串，使得它哈希后的值跟已知值匹配（实际上意味着转账方授权了接收方来提现），则这笔钱转给接收方。</p>

<p>推广一步，甲想转账给丙，丙先发给甲一个哈希值。甲可以先跟乙签订一个合同，如果你在一定时间内能告诉我一个暗语，我就给你多少钱。乙于是跑去跟丙签订一个合同，如果你告诉我那个暗语，我就给你多少钱。丙于是告诉乙暗语，拿到乙的钱，乙又从甲拿到钱。最终达到结果是甲转账给丙。这样甲和丙之间似乎构成了一条完整的虚拟的“支付通道”。而乙就做了中转节点。</p>

<p>Alice想要支付0.5BTC给Bob，但她并没有一个渠道来和他进行交易。幸运的是，她和Charlie有一个交易渠道，而Charlie正好和Bob有一个交易渠道。这样Alice就能借助Charlie的交易渠道，通过哈希时间锁定合约（HTLC）来和Bob进行交易了。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg4.png" alt="img" /></p>

<p>为了完成这次交易，Alice就会给Bob发短信说：“嘿！我要给你付笔款。”这时Bob自己将收到一个随机数字（R），接着Bob便会回一个被哈希的数字（H）（你可以认为被哈希的数字R是随机数字的一种加密形式）给Alice。</p>

<p>然后Alice的钱包紧接着就会联系Charlie说：“嘿，Charlie。如果你给我生成（H）的未加密值（R），那么我就同意更新我们渠道的支付分配，这样你就可以得到的就会比0.5BTC多一点，我得的比0.5少一点。”</p>

<p>尽管Charlie并不知道R，但他也会同意。之后Charlie便会去找Bob说：“嘿，Bob。如果你给我那个能生成H的未加密的值R，我将同意更新我们渠道的支付分配，这样你就可以得到的会比0.5BTC多一点，我得到的比0.5少一点。”因为R就是从Bob这里生成的，所以他肯定知道。接着他马上将R告诉Charlie，并更新了其渠道的支付分配。然后Charlie将R告诉给了Alice之后也更新他们的渠道，最后交易完成，Alice以脱链的形式付给Bob0.5BTC。</p>

<p>交易中转说起来很简单，但它也要解决一些工程细节问题：</p>

<ol>
  <li>如何构造一笔交易，保证Charlie 只有收到R值的时候才能花费</li>
  <li>如果交易由于超时或者网络原因中断，如何回退交易</li>
  <li>这笔交易其实是Alice和Bob之间的事情，形成一条交易路径时却要通知所有参与转发交易的节点，如何保护隐私？</li>
</ol>

<p>让我们用一个更复杂的例子来好好理清这个交易过程吧！</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg1-0.jpg" alt="img" /></p>

<p>在这个例子中，我们有五个参与者：Alice、Bob、Carol、Diana和Eric。这五名参与者彼此之间已经开设了支付通道。Alice和Bob有支付通道。Bob连接Carol，Carol连接到Diana，Diana连接Eric。为了简单起见，我们假设每个通道每个参与者都注资2个比特币资金，每个通道的总容量为4个比特币。</p>

<p>现在Alice想要给Eric支付1个比特币，通过我们的交易中转机制，她发现了一条支付通道：Alice-&gt;Bob-&gt;Carol-&gt;Diana-&gt;Eric；然后支付步骤如下：</p>

<ol>
  <li>Alice向Eric发出支付请求，Eric的LN节点使用随机数生成器创建一个密钥R。Eric的节点没有向任何人泄露这个秘密。相反，Eric的节点计算密钥R对应的散列H，并将此散列值H发送到Alice的节点</li>
  <li>Alice的节点构造一个HTLC，支付到散列H(P2SH交易)，并具有10个区块时间锁用于（当前块+10）退款，数量为1.003比特币。额外的0.003比特币将用于补偿参与此支付路由的中间节点。Alice将此HTLC提供给Bob，从和Bob之间的通道余额中扣除1.003比特币，并将其提交给HTLC。该HTLC具有以下含义：“如果Bob知道密钥，Alice将其通道余额的1.003比特币支付给Bob，或者如果超过10个区块时间后，则退还到Alice的账号”。Alice和Bob之间的通道余额现在由Commitment Tx表示，其中有三个输出：Bob的2比特币余额，Alice的0.997比特币余额，Alice的HTLC中承诺的1.003比特币。承诺交易再从Alice的余额中减去HTLC中的金额。</li>
  <li>Bob现在有一个承诺，如果他能够在接下来的10个区块生产时间内获得密钥R，他可以获取Alice锁定的1.003。手上有了这一承诺，Bob的节点在和Carol的支付通道上构建了一个HTLC。Bob的HTLC提交一笔HTLC（这是一笔P2SH交易，输出1.002比特币及9个区块时间锁），如果Carol拥有密钥R，她就可以兑换这个HTLC。Bob知道，如果Carol要获取他的HTLC，她必须出示密钥R。如果Bob在9个区块的时间内有R，他可以用它给自己兑换Alice的HTLC。通过承诺自己的通道余额9个区块的时间，他也赚了0.001比特币。如果Carol无法获取他的HTLC，并且他也无法获取Alice的HTLC，那么一切都将恢复到之前的通道余额，没有人会亏损。Bob和Carol之间的通道余额现在是：2比特币给Carol，0.998比特币给Bob，1.002比特币由Bob承诺给HTLC。</li>
  <li>Carol现在有一个承诺，如果她在接下来的9个区块时间内获得R，她可以获取Bob的锁定1.002比特币。现在她可以在她与Diana的通道上构建HTLC承诺。她提交了一个1.001比特币的HTLC（一笔P2SH交易，输出1.001比特币及8个区块时间锁），如果Diana有密钥R，她就可以兑换。从Carol的角度来看，如果能够实现，她就可以获得0.001比特币，否则也没有失去任何东西。她提交给Diana的HTLC，只有在R是已知的情况下才可行，到那时候她可以从Bob那里索取HTLC。Carol和Diana之间的通道余额现在是：2比特币给Diana，0.999比特币给Carol，1.001比特币由Carol承诺给HTLC。</li>
  <li>最后，Diana可以提供给Eric一个HTLC，1比特币到散列H及7个区块时间锁。Diana与Eric之间的通道余额现在是：2比特币给Eric，1比特币给Diana，1比特币由Diana承诺给HTLC。</li>
  <li>Eric拥有密钥R，他可以获取Diana提供的HTLC。他将R发送给Diana，并获取1比特币，添加到他的通道余额中。通道余额现在是：1比特币给Diana，3比特币给Eric。</li>
  <li>现在，Diana有密钥R，因此，她现在可以获取来自Carol的HTLC。Diana将R发送给Carol，并将1.001比特币添加到其通道余额中。现在Carol与Diana之间的通道余额是：0.999比特币给Carol，3.001比特币给Diana。Diana已经“赚了”参与这个付款路线0.001比特币。</li>
  <li>Carol 拿到密钥R，重复了同样的事情，他获取了来自Bob的HTLC的1.002个比特币，将他们的通道余额设为：0.998比特币给Bob，3.002比特币给Carol</li>
  <li>最后，Bob获取来自Alice的HTLC）。他们的通道余额更新为：0.997比特币给Alice，3.003比特币给Bob。</li>
</ol>

<p>在没有向Eric打开支付通道的情况下，Alice已经支付给Eric 1比特币。付款路线中的中间方无须互相信任。在他们的通道内做一个短时间的资金承诺，他们就可以赚取一小笔费用，唯一的风险是，如果通道关闭或路由付款失败，退款有段短的延迟时间。</p>

<h4 id="section-3">路由加密</h4>

<p>LN节点之间的所有通信都是点对点加密的。另外，节点有一个长期公钥，它们用作标识符并且彼此认证对方；</p>

<p>在前面的例子中，Alice的节点使用这些路由发现机制之一来查找将她的节点连接到Eric的节点的一个或多个路径。一旦Alice的节点构建了路径，她将通过网络初始化该路径，传播一系列加密和嵌套的指令来连接每个相邻的支付通道。</p>

<p>重要的是，这个路径只有Alice的节点才知道。付款路线上的所有其他参与者只能看到相邻的节点。从Carol的角度来看，这看起来像是从Bob到Diana的付款。Carol不知道Bob实际上是中继转发Alice的汇款。她也不知道Diana将会向Eric中继转发付款。</p>

<p>这是闪电网络的一个重要特征，因为它确保了付款的隐私，并且使得很难对其应用监控、审查以及黑名单机制。但是，Alice如何建立这种付款路径，而不向中间节点透露任何内容呢？</p>

<p>闪电网络实现了一种基于<a href="https://cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf">Sphinx</a> 方案的洋葱路由协议。该路由协议确保支付发送者可以通过闪电网络构建和通信路径，使得：</p>

<ul>
  <li>
    <p>中间节点可以验证和解密其部分路由信息，并找到下一跳。</p>
  </li>
  <li>
    <p>除了上一跳和下一跳，他们不能获取路径上任何其他节点。</p>
  </li>
  <li>
    <p>他们无法识别支付路径的长度，或者他们自己在该路径中的位置。</p>
  </li>
  <li>
    <p>路径的每个部分都被加密，使得网络级别的攻击者不能将来自路径的不同部分的数据包相互关联。</p>
  </li>
</ul>

<p>使用这种洋葱路由协议，Alice将路径的每个节点信息封装在一层加密中，从尾端开始倒过来运算。她用Eric的公钥加密了Eric的消息。该消息封装在加密到Diana的消息中，并将Eric标识为下一个收件人。给Diana的消息封装在加密到Carol的公钥的消息中，并将Diana识别为下一个收件人。对Carol的消息被Bob的密钥加密。这样一来，Alice已经构建了这个加密的多层“洋葱”的消息。她发送给Bob，他只能解密和解开外层。在里面，Bob发现了一封给Carol的消息，他可以转发给Carol，但不能自己破译。按照路径，消息被转发、解密、转发等，一路到Eric那里。每个参与者只知道各自这一跳的前一个和下一个节点。</p>

<p>路径中的每个节点都包含有关HTLC必须扩展到下一个跳的信息，HTLC中的要发送的数量，要包括的费用以及CLTV锁定到期时间（以块为单位）。随着路由信息的传播，节点将HTLC承诺转发到下一跳。</p>

<p>此时，你可能想知道节点如何不知道路径的长度及其在该路径中的位置。毕竟，它们收到一个消息，并将其转发到下一跳。难道它不会将路径缩短，或者允许他们推断出路径长短和位置？为了防止这种情况，路径总是固定在20跳，并用随机数据填充。每个节点都会看到下一跳和一个要转发的固定长度的加密消息。只有最终的收件人看得到没有下一跳。对于其他人来说，似乎总是有20多跳要走。</p>

<h4 id="section-4">总览</h4>

<p>中转交易和路由加密技术解决了回退交易以及隐私保护的问题；</p>

<p>那么，剩下的就是最重要的问题，就是如何在双方的支付通道中，在Commitment Tx的基础上，构造HTLC交易，同时不会影响原有Commitment Tx的所有功能？</p>

<p>我们即将探究闪电网络最后的，也是最精细的一个部分，就是HTLC的细节实现，堪称这支交响乐中最细腻的部分；</p>

<h4 id="htlc">HTLC细节</h4>

<p>让我们再从头想想吧， HTLC本质上也是一个双方资金分配的问题，只不过这笔资金的解锁需要一个符合散列H值的原像R值，这就是一笔P2SH交易而已；</p>

<p>但普通的P2SH交易并不能满足这个场景的所有需求，因为我们还需要在交易失败的时候设置回退机制，资金还要能回退回来；</p>

<p>回到我们上图的例子中，在路由的第一跳，我们想象中的Alice付给Bob的HTLC交易逻辑是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">OP IF
</span><span class="line">OP HASH160 &lt;Hash160（R）&gt; OP EQUALVERIFY
</span><span class="line">2 &lt;Alice2&gt; &lt;Bob2&gt; OP CHECKMULTISIG
</span><span class="line">OP ELSE
</span><span class="line">2 &lt; Alice1&gt; &lt;Bob1&gt; OP CHECKMULTISIG
</span><span class="line">OP ENDIF</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个脚本从单一的 HTLC 输出花费有两种可能的路径:</p>

<ul>
  <li>在第一个路径（定义为 OP IF）将资金发送给 Bob，如果 Bob 可以产生R。这个UTXO是可以立即花费的；</li>
  <li>第二条路径是交易失败，被赎回的时候触发的， 它需要设置一个10 Block的时间锁定，当它被赎回时，需要10个block的时间才能上链，这段时间为支付路径上的每一个中转节点提供了回退的时间窗口；</li>
</ul>

<p>那么让我们再次继续RSMC中的例子，假设Alice和Bob已经在Funding Tx的基础上建立了Commitment Tx，并且每个人都注入了0.5BTC，现在Alice想要为Bob构造一个输出为0.1BTC的HTLC，细节是这样的：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/htlc2-1.jpg" alt="img" /></p>

<p>这个图跟我们在更新Commitment Tx的时候没有多大区别，最大的不同就是我们多了一个Output: 即C2a,C2b中的Output2;</p>

<p>这个输出就代表着0.1BTC的HTLC的完整逻辑；要花费它可以有两种方式，就是我们上面所定义的两种路径：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/htlc2-2.jpg" alt="img" /></p>

<p>我们以Alice的视角，来观察C2a交易中的HTLC输出，拆分为HT1a和HED1a；</p>

<p>HED1a的输出很简单，就是只需要Bob2签名以及原像R，Bob就能立即得到0.1BTC；</p>

<p>HT1a就复杂了，它解决了交易失败时，如何交易回退的问题：</p>

<p>让我们仔细再想想，支付通道更新的过程中，C1a,C2a, C1b, C2b等等交易完全是不上链的，如果Bob没有在指定时间内提供原像R，Alice如何收回自己的0.1BTC呢？</p>

<p>等等，这个问题好熟悉的感觉！！ 没错，这个问题其实与我们如何花费Funding Tx如出一辙！ 对于HTLC交易的处理跟Funding Tx的处理可以采取一样的方法：</p>

<h5 id="htlcrsmc-">就是将HTLC交易放到一个RSMC 当中去！！</h5>

<p>经历了漫长的探索，我们最终得到了闪电网络白皮书中这样一张大图：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg1-1.png" alt="img" /></p>

<ul>
  <li>当我们以Alice视角来看待HT1a交易时： </li>
</ul>

<p>对于付款人（Alice），“中转”交易作为 HTLC 执行交付交易（HED1a）被发送，其不受阻于 RSMC。假定支付路径成立，而且 Alice 证明公布的承诺交易C2a是最近的话。如果 Bob 可以产生原像 R，他将能够在该承诺交易C2a在 blockchain 上公布之后赎回资金。当然只有 Alice 给 Bob她的 HED1a 签名Alice2，Bob 才可以公布 HED1a。</p>

<p>如果交易失败， Alice 公布她的承诺交易HT1a，本次交易需要multisig（Alice1，Bob1）。但是，需要三天的锁定期，Alice才可以公布HTLC Timeout交易（HT1a）。这项交易是一个 RSMC。HT1a的输出HTRD1a需要Alice3和Bob3的 multisig，并且1000个block之后才能入块； 这样为后面的再次调整HTLC金额留出了余地，即本次交易可以撤销，当另一个使用
multisig（PAlice4，PBob4）的交易取代 HTRD1a，它没有对任何区块的成熟度要求。所以Bob也可以放心的签署HTRD1a；</p>

<ul>
  <li>当我们以Bob视角来看待HE1b交易时： </li>
</ul>

<p>对于收款者（Bob），收到的“Timeout” 作为 HTLC Timeout 交付交易（HTD1b）被退还。本次交易直接返还资金给原始发件人（Alice），并不受 RSMC 的阻碍。假定该 HTLC从未被 Off-chain 终止，因为 Bob 证明公布的承诺交易（C2b）是最新的。如果 3 天已经过去，Alice 可以公布 HTD1b 并拿到退款。如果 Bob 公布 C2b，本次交易需要 multisig（PAlice5，PAlice5）。只有 Alice 可以公布 HTD1b，因为 Bob 给了 Alice 他 HTD1b 交易的签名。</p>

<p>但是，如果 HTD1b 没有被公布（没有经过 3 天时间）并且 Bob 知道原像 R，如果他能产生R，则 Bob 将能够公布 HTLC 执行交易（HE1b）。这项交易是一个 RSMC。如果 Bob 公布C2b，它需要输出 multisig（Alice6，Bob6），并要求披露 R。此交易的输出是一个有 1000个区块相对成熟的 multisig（Alice7，Bob7）的 RSMC，和不需要区块确认成熟的 multisig（Alice8，Bob8）。只有 Alice 给 Bob 她 HT1a 的签名，Bob 才可以公布 HT1a。HT1A 进入 blockchain 并且 1000 次确认完成后，一个 HTLC Timeout 撤销交付交易（HERD1b）可以由 Bob 通过消耗 multisig（Alice7，Bob7）公布。只有 Alice 给 Bob 他 HERD1b 的签名，Bob 可以在公布 HE1b 1000 区块后公布 HERD1b。本次交易可以撤销，当另一个使用multisig（Alice8，Bob8）的交易取代 HERD1b，它没有对任何区块的成熟度要求。</p>

<ul>
  <li>交易终止</li>
</ul>

<p>HTLC 构造之后，为了终止 HTLC Off-chain 需要双方同意渠道的状态。如果收件人可以向对方证明 R 的信息，证明他们能够立即关闭比特币 blockchain 上的渠道并且接收资金。在这一点上，如果双方都希望保持渠道打开，就应终止 HTLC Off-chain，并创建一个新的承诺交易反应新的平衡。</p>

<p>由于 Bob 向 Alice 证明，以告诉 Alice R 的有关信息来告诉 Alice，Alice 愿意用新的承诺交易更新平衡。此时不管公布 C2 或 C3，支付将是相同的。</p>

<p>同样，如果收件人不能够通过公开 R 来证明 R 的信息，双方应同意终止 HTLC 并创建一个新的承诺交易， HTLC 中的余额退还给发件人。</p>

<p>如果交易对手不能达成协议或不回应，他们应该通过在比特币 blockchain 公布必需的渠道交易来关闭渠道。</p>

<p>但是，如果他们合作，他们可以通过首先生成具有新的平衡的承诺交易，然后通过交换违约补救交易（BR2a / BR2b）使先前承诺失效。此外，如果他们终止特定的 HTLC，也要交换一些在 HTLC 交易中使用的自己的私钥。</p>

<h2 id="section-5">总结</h2>

<p>为了研究解决Inbound Capacity的问题，我们不可避免的又把闪电网络的细节回顾了一遍；我们需要理解HTLC；但文章也因此拉长了，我们把解决方案的探讨留给下一篇文章。</p>

<h4 id="stay-hungry-stay-foolish">最后，让我们再次自我鞭策：饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</h4>

<h4 id="section-6">引用</h4>

<p>https://github.com/lightningnetwork/paper</p>

<p>https://blog.lightning.engineering/posts/2018/05/30/routing.html</p>

<p>https://blog.lightning.engineering/technical/posts/2019/04/15/loop-out-in-depth.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx配置多端口多域名访问]]></title>
    <link href="https://happy123.me/blog/2019/11/18/nginxpei-zhi-duo-duan-kou-duo-yu-ming-fang-wen/"/>
    <updated>2019-11-18T15:52:07+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/nginxpei-zhi-duo-duan-kou-duo-yu-ming-fang-wen</id>
    <content type="html"><![CDATA[<p>在一个服务器上部署多个站点，需要开放多个端口来访问不同的站点，流程很简单，调试花了2小时，记录一下：</p>

<!-- more -->

<h2 id="section">主域名多端口访问</h2>

<h4 id="dns-nameservera">在DNS NameServer设置A记录</h4>

<p>将 www.xxx.com 指向服务器ip</p>

<h4 id="nginx">开放所需端口，修改nginx配置文件</h4>

<p>比如我们有两个服务分别开放在80端口和8080端口</p>

<p>如果有iptable，先开放端口：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">iptables -A INPUT -ptcp --dport 80 -j ACCEPT
</span><span class="line">iptables -A INPUT -ptcp --dport 8080 -j ACCEPT</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改配置文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#path: /usr/local/nginx/conf/nginx.conf
</span><span class="line">
</span><span class="line">server {
</span><span class="line">listen 80;
</span><span class="line">server_name www.xxx.com;
</span><span class="line">access_log /data/www/log/33.33.33.33_nginx.log combined;
</span><span class="line">index index.html index.htm index.php;
</span><span class="line">include /usr/local/nginx/conf/rewrite/none.conf;
</span><span class="line">root /data/www/website/33.33.33.33:80;
</span><span class="line">
</span><span class="line">
</span><span class="line">location ~ [^/]\.php(/|$) {
</span><span class="line">    fastcgi_pass unix:/dev/shm/php-cgi.sock;
</span><span class="line">    fastcgi_index index.php;
</span><span class="line">    include fastcgi.conf;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {
</span><span class="line">    expires 30d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(js|css)?$ {
</span><span class="line">    expires 7d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">server {
</span><span class="line">listen 8080;
</span><span class="line">server_name A.xxx.com;
</span><span class="line">access_log /data/www/log/33.33.33.33:8080_nginx.log combined;
</span><span class="line">index index.html index.htm index.php;
</span><span class="line">include /usr/local/nginx/conf/rewrite/none.conf;
</span><span class="line">root /data/www/website/33.33.33.33:8080;
</span><span class="line">
</span><span class="line">
</span><span class="line">location ~ [^/]\.php(/|$) {
</span><span class="line">    fastcgi_pass unix:/dev/shm/php-cgi.sock;
</span><span class="line">    fastcgi_index index.php;
</span><span class="line">    include fastcgi.conf;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {
</span><span class="line">    expires 30d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(js|css)?$ {
</span><span class="line">    expires 7d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关键就是两个<code>server</code>段配置，你也可以把这两段拆成两个配置文件，放到</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/etc/nginx/conf.d/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>目录下面；</p>

<h2 id="section-1">子域名多端口访问</h2>

<p>这种访问比较傻，因为你的8080端口的访问需要 http://xxx.com:8080 这样的格式；</p>

<p>而且如果有两个不同的cgi，比如80端口对应一个php web服务， 8080端口对应一个nodejs web服务；而我们的nodejs自带web服务，已经在8080端口监听了，这怎么办？</p>

<p>这个时候我们需要Nginx的反向代理功能，并在DNS Server上面增加一条A记录，最终实现</p>

<ul>
  <li>www.xxx.com 访问80端口</li>
  <li>A.xxx.com 通过nginx转发访问8080端口服务</li>
</ul>

<h5 id="a">增加一条A记录</h5>

<p>将 A.xxx.com 指向服务器ip</p>

<h5 id="nginx-1">Nginx配置模板如下：</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#path: /usr/local/nginx/conf/nginx.conf
</span><span class="line">
</span><span class="line">server {
</span><span class="line">    listen 80;
</span><span class="line">    server_name www.xxx.com;
</span><span class="line">    access_log /data/www/log/33.33.33.33_nginx.log combined;
</span><span class="line">    index index.html index.htm index.php;
</span><span class="line">    include /usr/local/nginx/conf/rewrite/none.conf;
</span><span class="line">    root /data/www/website/33.33.33.33:80;
</span><span class="line">
</span><span class="line">
</span><span class="line">    location ~ [^/]\.php(/|$) {
</span><span class="line">        fastcgi_pass unix:/dev/shm/php-cgi.sock;
</span><span class="line">        fastcgi_index index.php;
</span><span class="line">        include fastcgi.conf;
</span><span class="line">        }
</span><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {
</span><span class="line">        expires 30d;
</span><span class="line">        access_log off;
</span><span class="line">        }
</span><span class="line">    location ~ .*\.(js|css)?$ {
</span><span class="line">        expires 7d;
</span><span class="line">        access_log off;
</span><span class="line">        }
</span><span class="line">}
</span><span class="line">
</span><span class="line">server {
</span><span class="line">    listen 80;
</span><span class="line">    listen [::]:80;
</span><span class="line">
</span><span class="line">    server_name A.XXX.com;
</span><span class="line">
</span><span class="line">    proxy_connect_timeout  300s;
</span><span class="line">    proxy_send_timeout  300s;
</span><span class="line">    proxy_read_timeout  300s;
</span><span class="line">    fastcgi_send_timeout 300s;
</span><span class="line">    fastcgi_read_timeout 300s;
</span><span class="line">
</span><span class="line">    location / {
</span><span class="line">        proxy_pass    http://127.0.0.1:3000;
</span><span class="line">        proxy_http_version 1.1;
</span><span class="line">        proxy_set_header Upgrade $http_upgrade;
</span><span class="line">        proxy_set_header Connection 'upgrade';
</span><span class="line">        proxy_set_header Host $host;
</span><span class="line">        proxy_cache_bypass $http_upgrade;
</span><span class="line">        try_files $uri $uri/ =404;
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="nginx-2">nginx重新载入配置文件</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nginx -s reload</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Lightning Node Cheat Sheet]]></title>
    <link href="https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet/"/>
    <updated>2019-11-18T15:14:19+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet</id>
    <content type="html"><![CDATA[<p>运营一个闪电节点的基本命令速查；</p>

<!-- more -->

<h2 id="bitcoin-core">Bitcoin Core</h2>

<h4 id="section">启动</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果需要一些老接口</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/ --deprecatedrpc=signrawtransaction</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="bitcoinconf">bitcoin.conf</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rpcuser=user
</span><span class="line">rpcpassword=password
</span><span class="line">#rpcallowip=127.0.0.1/16
</span><span class="line">rpcallowip=0.0.0.0/0
</span><span class="line">rpcport=8332
</span><span class="line">test.rpcport=8332
</span><span class="line">rpcthreads=10
</span><span class="line">server=1
</span><span class="line">rest=1
</span><span class="line">testnet=0
</span><span class="line">zmqpubrawblock=tcp://127.0.0.1:28332
</span><span class="line">zmqpubrawtx=tcp://127.0.0.1:28333
</span><span class="line">
</span><span class="line">#walletnotify=/usr/bin/echo "hello"</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="lnd">Lnd</h2>

<p>接口丰富，自带rpc和restapi接口，迭代速度快；</p>

<p>https://github.com/lightningnetwork/lnd</p>

<h4 id="section-1">部署</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=user --bitcoind.rpcpass='password' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=207.246.105.100 --no-macaroons 2&gt;&amp;1 &gt;&gt; lndtest.log</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">常用命令</h4>

<ul>
  <li>解锁钱包</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet unlock
</span><span class="line">lncli  --network=testnet newaddr</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看余额</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet walletbalance
</span><span class="line">lncli  --network=testnet listunspent</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>连接到一个闪电节点</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet connect "027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8@3.13.29.161:9735"</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>打开一个通道</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet openchannel --node_key 027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8 100000</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>支付</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet sendpayment --pay_req "lntb10n1pw6gf60pp5jxwg30u3k7qw2lzef7cnpy6tmnd80q2v5ytglf5tdaalrejhprzsdqhvf6xxmt9ypkxuepqw3jhxaqcqzpg9jsccqelkelayq89ydgrhxwf0hv2ffkdu2y6l27vtpmscszxj3pjsh..."</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>接收付款</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet addinvoice --memo "invoice for lnd.fun test3" --amt 100000</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>关闭通道</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet closechannel "1243f60a54c4c6b8ab5d124a0c701792e085ab13a68da135ca3ffbabb461f1cc"</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>链上发送全部余额</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet sendcoins tbxxxxxx  --sweepall</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="c-lightning">C-lightning</h2>

<p>接口简洁，能直接集成lightning-charge；</p>

<p>https://github.com/ElementsProject/lightning</p>

<h4 id="section-3">部署</h4>

<ul>
  <li>c-lightning提供了systemctl 服务脚本:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cat /etc/systemd/system/lightning.service
</span><span class="line">
</span><span class="line">
</span><span class="line">[Unit]
</span><span class="line">Description=c-Lightning daemon
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">ExecStart=/usr/bin/lightningd --pid-file=/root/.lightning/lightning.pid --daemon
</span><span class="line">PIDFile=/root/.lightning/lightning.pid
</span><span class="line">User=root
</span><span class="line">Type=forking
</span><span class="line">Restart=always
</span><span class="line">RestartSec=10
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>配置文件:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">~/.lightning/config
</span><span class="line">
</span><span class="line">alias=brain_zhang_lightning_testnode
</span><span class="line">log-level=debug
</span><span class="line">#network=bitcoin
</span><span class="line">network=testnet
</span><span class="line">bitcoin-rpcuser=user
</span><span class="line">bitcoin-rpcpassword=password
</span><span class="line">bitcoin-rpcconnect=127.0.0.1
</span><span class="line">bitcoin-rpcport=18332
</span><span class="line">log-file=/var/log/lightning.log
</span><span class="line">bind-addr=
</span><span class="line">announce-addr=x.x.x.x:9735</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>注册、启动服务</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl enable lightning
</span><span class="line">systemctl start lightning</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">常用命令</h4>

<ul>
  <li>建立一个新地址</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli newaddr</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看线上钱包地址</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli dev-listaddrs</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>连接node (1ml.com node)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli connect 02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248@23.237.77.12:9735</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>建立通道</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli fundchannel id satoshi [feerate] [announce] [minconf]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看链上和链下余额</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli listfunds</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>支付</li>
</ul>

<p>Send payment specified by {bolt11} with {amount}</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli pay bolt11 [msatoshi] [label] [riskfactor] [maxfeepercent] [retry_for] [maxdelay] [exemptfee]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>收款</li>
</ul>

<p>Create an invoice for {msatoshi} with {label} and {description} with optional {expiry} seconds (default 1 hour), optional {fallbacks} address list(default empty list) and optional {preimage}</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli invoice msatoshi label description [expiry] [fallbacks] [preimage] [exposeprivatechannels]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="c-lightning--lightning-charge">C-lightning &amp;&amp; lightning-charge</h2>

<p>https://github.com/btcme/lightning-charge</p>

<h4 id="section-5">部署</h4>

<p>lightning-charge最好用docker直接集成c-lightning一把启动，比如我已经运行了一个bitcoin core全节点，可以直接下面的命令启动:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">docker run -d -u `id -u` -v `pwd`/data:/data -p 9735:9735 -p 9112:9112 \
</span><span class="line">             -e API_TOKEN=mySecretToken \
</span><span class="line">             -e NETWORK=testnet  \
</span><span class="line">             -e BITCOIND_URI="http://user:password@172.18.0.1:18332" \
</span><span class="line">             shesek/lightning-charge</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意BITCOIND_URL的IP是docker容器内向外连接的，如果不是用net的方式启动，要填docker的网桥地址；</p>

<ul>
  <li>查询运行状况</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl http://api-token:mySecretToken@localhost:9112/info</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSL环境备份恢复]]></title>
    <link href="https://happy123.me/blog/2019/11/18/wslhuan-jing-bei-fen-hui-fu/"/>
    <updated>2019-11-18T11:04:27+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/wslhuan-jing-bei-fen-hui-fu</id>
    <content type="html"><![CDATA[<p>WSL环境是可以单独备份还原的，有个工具名为LxRunOffline:</p>

<p>https://github.com/DDoSolitary/LxRunOffline</p>

<p>release版本下载下来之后直接使用就可以；记录一下操作命令:</p>

<!-- more -->

<h4 id="wsl">备份wsl</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LxRunOffline.exe export -n Ubuntu-18.04 -f ubuntu18.04.backup.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>-n ：wsl的别名，就是之前用list查看的其中一个</p>

<p>-f ：备份的路径，我这直接备份到当前路径backup.tar.gz</p>

<h4 id="wsl-1">还原wsl</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LxRunOffline.exe install -n Ubuntu-18.04 -d C:\wsl -f D:\temp\ubuntu18.04.backup.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>-n ：起个名字</p>

<p>-d ：wsl安装目录</p>

<p>-f ：备份文件目录</p>

<h4 id="wsl-2">删除WSL环境</h4>

<p>可以直接用wsl原生的命令：wslconfig</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wslconfig /u Ubuntu-18.04</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSL权限管理]]></title>
    <link href="https://happy123.me/blog/2019/11/18/wslquan-xian-guan-li/"/>
    <updated>2019-11-18T10:45:54+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/wslquan-xian-guan-li</id>
    <content type="html"><![CDATA[<p>重装系统，又折腾了一遍WSL环境，记录一下:</p>

<p>WSL (Win­dows Sub­sys­tem for Linux) 通过 /mnt 目录下的 c、d、e 等目录可分别访问本地的 C、D、E 等盘，虽然可以直接访问 Win­dows 下的文件内容，但输入 ls -al 查看文件你会发现文件权限全都是 777。这会导致一些问题出现，比如 Git会保留这些文件的执行权限，如果你之前在 Win­dows 下使用过 Git Bash ，那么在 WSL 中使用 <code>git status</code>查看本地仓库的文件状态时你会发现它们全部被标记成了 modified。</p>

<!-- more -->

<h3 id="section">分析问题</h3>

<p>首先要了解 WSL 中的两种文件系统：</p>

<h4 id="volfs">VolFs</h4>
<p>着力于在 Win­dows 文件系统上提供完整的 Linux 文件系统特性，通过各种手段实现了对 In­odes、Di­rec­tory en­tries、File ob­jects、File de­scrip­tors、Spe­cial file types 的支持。比如为了支持 Win­dows 上没有的 In­odes，VolFs 会把文件权限等信息保存在文件的 NTFS Ex­tended At­trib­utes 中。</p>

<p>WSL 中的 / 使用的就是 VolFs 文件系统。</p>

<h4 id="drvfs">DrvFs</h4>
<p>着力于提供与 Win­dows 文件系统的互操作性。与 VolFs 不同，为了提供最大的互操作性，DrvFs 不会在文件的 NTFS Ex­tended At­trib­utes 中储存附加信息，而是从 Win­dows 的文件权限（Ac­cess Con­trol Lists，就是你右键文件 &gt; 属性 &gt; 安全选项卡中的那些权限配置）推断出该文件对应的的 Linux 文件权限。</p>

<p>所有 Win­dows 盘符挂载至 WSL 下的 /mnt 时都是使用的 DrvFs 文件系统。</p>

<p>简单来说就是 WSL 对 / 目录下的文件拥有完整的控制权，而 /mnt 目录中的文件无法被 WSL 完全控制（可修改数据，无法真实的修改权限）。WSL 对 /mnt 目录中权限的修改不会直接记录到文件本身，而在 Win­dows 下对文件权限的修改直接可作用到 WSL 。关于权限在<a href="https://p3terx.com/go/aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL2NvbW1hbmRsaW5lL2NobW9kLWNob3duLXdzbC1pbXByb3ZlbWVudHMv">微软开发者博客中</a>有更详细的说明。</p>

<h3 id="section-1">解决方案</h3>

<p>这只是让文件在 WSL 中的权限看起来正常（目录 755，文件 644），实际并不会作用到 Win­dows 文件系统下的文件本身。</p>

<p>在 /etc/wsl.conf 中添加以下配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[automount]
</span><span class="line">enabled = true
</span><span class="line">root = /mnt/
</span><span class="line">options = "metadata,umask=22,fmask=111"
</span><span class="line">mountFsTab = true</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的方法对所有盘符都有效，如果你想在 WSL 中调用 Win­dows 下的应用程序（比如 explorer.exe . 调用资源管理器打开当前路径）就需要对 C 盘进行单独设置，否则会提示没有权限。首先确认 wsl.conf 中的 mountFsTab 没有被设置为 false，然后编辑 /etc/fstab，添加如下内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">C:\ /mnt/c drvfs rw,noatime,uid=1000,gid=1000,metadata,umask=22,fmask=11 0 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时执行<code>mkdir</code>等命令的时候，会发现新建的目录权限依然是 777。</p>

<p>目前民间解决方案是在.profile、.bashrc、.zshrc 或者其他 shell 配置文件中添加如下命令，重新设置 umask</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[filesystem]
</span><span class="line">umask = 022</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>全部设置完成之后，最好重启一遍Windows系统。</p>

<h4 id="section-2">参考:</h4>

<p>https://segmentfault.com/a/1190000016677670</p>

<p>https://p3terx.com/archives/problems-and-solutions-encountered-in-wsl-use-2.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Should You Do if Windows 10 Freezes Randomly]]></title>
    <link href="https://happy123.me/blog/2019/11/13/what-should-you-do-if-windows-10-freezes-randomly/"/>
    <updated>2019-11-13T11:45:32+08:00</updated>
    <id>https://happy123.me/blog/2019/11/13/what-should-you-do-if-windows-10-freezes-randomly</id>
    <content type="html"><![CDATA[<p>是的，作为一名码农，日常最主要的工作就是修电脑；</p>

<p>有一台装Win10的Thinkpad T440 笔记本会随机冻结，表现就是所有操作没有反应，鼠标键盘没有响应，画面不动，然后等待1分钟后自我恢复； 每天随机发生&gt;5次；</p>

<!-- more -->

<p>在Google了N多<code>What Should You Do If Windows 10 Freezes Randomly</code>的帖子之后，发现有这个问题的人可以组成一个军团，可谓是苦大仇深；</p>

<p>至少这下面所有的方法我都试了一遍：</p>

<p>https://www.partitionwizard.com/partitionmagic/win10-freezes-randomly.html</p>

<p>最后无奈之下挂载winGDB，是的，就是这么无聊，追到了Chrome里面；</p>

<p>我发现，只要关闭Chrome的 “设置-&gt;高级-&gt;使用硬件加速模式”，问题概率就会大大降低；</p>

<p>这是什么原理，一番探究后，我发现这台笔记本是自动切换核显和独立显卡的；而Intel核显有个选项： “Intel Graphics Control Panel -&gt; Energy management -&gt; Panel Self Refresh”关闭之后就OK了；</p>

<p>好吧，归根到底还是驱动的问题；Intel的这个显卡其实官方没有支持Win10的驱动，这是Win10自己瞎支持的，出现问题再所难免；</p>

<p>以后遇到Win10冻结的情况，你的检查清单上还需要多加两项：</p>

<ol>
  <li>
    <p>Chrome的硬件加速关闭试一试</p>
  </li>
  <li>
    <p>如果有Intel的核显，关闭<code>Panel Self Refresh</code>试一试</p>
  </li>
</ol>

<blockquote>
  <p>Apparently, disabling Panel Self Refresh (PSR) in the Intel HD Graphics Control Panel application fixed the issue.
On Lenovo notebook right click on desktop -&gt; Intel Graphics Control Panel -&gt; Energy management -&gt; Panel Self Refresh -&gt; set to Disabled.
I also set the display to max performance, but I don’t think this is relevant.
Once disabled, I’ve no more experienced any freeze for several days.</p>
</blockquote>

<p>参考：</p>

<p>https://forums.lenovo.com/t5/ThinkPad-X-Series-Laptops/X270-generic-freeze/td-p/3927475/page/5</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FRP内网穿透]]></title>
    <link href="https://happy123.me/blog/2019/11/11/frpnei-wang-chuan-tou/"/>
    <updated>2019-11-11T10:45:34+08:00</updated>
    <id>https://happy123.me/blog/2019/11/11/frpnei-wang-chuan-tou</id>
    <content type="html"><![CDATA[<p>对于没有公网 IP 的内网用户来说，远程管理或在外网访问内网机器上的服务是一个问题。之前一直用最简单的nc做反代，折腾了几次之后迁移到FRP上面了；记录一下ABC;</p>

<!-- more -->

<p>内网穿透工具 FRP，FRP 全名：Fast Reverse Proxy。</p>

<p>项目地址: https://github.com/fatedier/frp</p>

<h4 id="frp-">FRP 的作用</h4>

<ul>
  <li>
    <p>利用处于内网或防火墙后的机器，对外网环境提供 HTTP 或 HTTPS 服务。</p>
  </li>
  <li>
    <p>对于 HTTP, HTTPS 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 80 端口。</p>
  </li>
  <li>
    <p>利用处于内网或防火墙后的机器，对外网环境提供 TCP 和 UDP 服务，例如在家里通过 SSH 访问处于公司内网环境内的主机。</p>
  </li>
</ul>

<h4 id="frp--1">FRP 安装</h4>
<p>FRP 采用 Go 语言开发，支持 Windows、Linux、MacOS、ARM等多平台部署。FRP 安装非常容易，只需下载对应系统平台的软件包，并解压就可用。</p>

<p>这里以 Linux 为例，为了方便管理我们把解压后的目录重命名为 frp ：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> wget https://github.com/fatedier/frp/releases/download/v0.29.1/frp_0.29.1_linux_amd64.tar.gz
</span><span class="line"> tar xzvf frp_0.29.1_linux_amd64.tar.gz
</span><span class="line"> mv frp_0.29.1_linux_amd64 frp
</span><span class="line"> cp frp/frpc frp/frps /usr/bin/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="frp">FRP服务端配置</h4>

<ul>
  <li>首先建立配置文件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir /etc/frp
</span><span class="line">vim /etc/frp/frps.ini</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是模板，根据修改一下token，dashboard_user, dashboard_pwd，默认开了6000端口作为对外ssh端口， 7000作为frpc和frps通讯端口，7500端口作为web管理界面端口；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># [common] is integral section
</span><span class="line">[common]
</span><span class="line"># A literal address or host name for IPv6 must be enclosed
</span><span class="line"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"
</span><span class="line">bind_addr = 0.0.0.0
</span><span class="line">bind_port = 7000
</span><span class="line">
</span><span class="line"># udp port to help make udp hole to penetrate nat
</span><span class="line">bind_udp_port = 7001
</span><span class="line">
</span><span class="line"># udp port used for kcp protocol, it can be same with 'bind_port'
</span><span class="line"># if not set, kcp is disabled in frps
</span><span class="line">kcp_bind_port = 7000
</span><span class="line">
</span><span class="line"># specify which address proxy will listen for, default value is same with bind_addr
</span><span class="line"># proxy_bind_addr = 127.0.0.1
</span><span class="line">
</span><span class="line"># if you want to support virtual host, you must set the http port for listening (optional)
</span><span class="line"># Note: http port and https port can be same with bind_port
</span><span class="line">vhost_http_port = 80
</span><span class="line">vhost_https_port = 443
</span><span class="line">
</span><span class="line"># response header timeout(seconds) for vhost http server, default is 60s
</span><span class="line"># vhost_http_timeout = 60
</span><span class="line">
</span><span class="line"># set dashboard_addr and dashboard_port to view dashboard of frps
</span><span class="line"># dashboard_addr's default value is same with bind_addr
</span><span class="line"># dashboard is available only if dashboard_port is set
</span><span class="line">dashboard_addr = 0.0.0.0
</span><span class="line">dashboard_port = 7500
</span><span class="line">
</span><span class="line"># dashboard user and passwd for basic auth protect, if not set, both default value is admin
</span><span class="line">dashboard_user = user
</span><span class="line">dashboard_pwd = user
</span><span class="line">
</span><span class="line"># dashboard assets directory(only for debug mode)
</span><span class="line"># assets_dir = ./static
</span><span class="line"># console or real logFile path like ./frps.log
</span><span class="line">log_file = /var/log/frps.log
</span><span class="line">
</span><span class="line"># trace, debug, info, warn, error
</span><span class="line">log_level = info
</span><span class="line">
</span><span class="line">log_max_days = 3
</span><span class="line">
</span><span class="line"># disable log colors when log_file is console, default is false
</span><span class="line">disable_log_color = false
</span><span class="line">
</span><span class="line"># auth token
</span><span class="line">token = 123456frp
</span><span class="line">
</span><span class="line"># heartbeat configure, it's not recommended to modify the default value
</span><span class="line"># the default value of heartbeat_timeout is 90
</span><span class="line"># heartbeat_timeout = 90
</span><span class="line">
</span><span class="line"># only allow frpc to bind ports you list, if you set nothing, there won't be any limit
</span><span class="line">#allow_ports = 2000-3000,3001,3003,4000-50000
</span><span class="line">allow_ports = 80,6000,8080,18332,18333,28332,28333,60000-60010
</span><span class="line">
</span><span class="line"># pool_count in each proxy will change to max_pool_count if they exceed the maximum value
</span><span class="line">max_pool_count = 5
</span><span class="line">
</span><span class="line"># if subdomain_host is not empty, you can set subdomain when type is http or https in frpc's configure file
</span><span class="line"># when subdomain is test, the host used by routing is test.frps.com
</span><span class="line">subdomain_host = frps.com
</span><span class="line">
</span><span class="line"># if tcp stream multiplexing is used, default is true
</span><span class="line">tcp_mux = true
</span><span class="line">
</span><span class="line"># custom 404 page for HTTP requests
</span><span class="line"># custom_404_page = /path/to/404.html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>再建立systemd 启动脚本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /lib/systemd/system/frps.service
</span><span class="line">
</span><span class="line">[Unit]
</span><span class="line">Description=Frp Server Service
</span><span class="line">After=network.target
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">Type=simple
</span><span class="line">User=root
</span><span class="line">Restart=on-failure
</span><span class="line">RestartSec=5s
</span><span class="line">ExecStart=/usr/bin/frps -c /etc/frp/frps.ini
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动服务，再设置为开机启动</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl start frps
</span><span class="line">systemctl enable frps</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="frp-1">FRP客户端配置</h4>

<ul>
  <li>首先建立配置文件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir /etc/frp
</span><span class="line">vim /etc/frp/frpc.ini</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是模板，根据修改server_addr、admin_user, admin_pwd字段; token要设置的跟服务端的token相同；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># [common] is integral section
</span><span class="line">[common]
</span><span class="line"># A literal address or host name for IPv6 must be enclosed
</span><span class="line"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"
</span><span class="line">server_addr = x.x.x.x
</span><span class="line">server_port = 7000
</span><span class="line">
</span><span class="line"># if you want to connect frps by http proxy or socks5 proxy, you can set http_proxy here or in global environment variables
</span><span class="line"># it only works when protocol is tcp
</span><span class="line"># http_proxy = http://user:passwd@192.168.1.128:8080
</span><span class="line"># http_proxy = socks5://user:passwd@192.168.1.128:1080
</span><span class="line">
</span><span class="line"># console or real logFile path like ./frpc.log
</span><span class="line">log_file = /var/log/frpc.log
</span><span class="line">
</span><span class="line"># trace, debug, info, warn, error
</span><span class="line">log_level = info
</span><span class="line">
</span><span class="line">log_max_days = 3
</span><span class="line">
</span><span class="line"># disable log colors when log_file is console, default is false
</span><span class="line">disable_log_color = false
</span><span class="line">
</span><span class="line"># for authentication
</span><span class="line">token = 123456frp
</span><span class="line">
</span><span class="line"># set admin address for control frpc's action by http api such as reload
</span><span class="line">admin_addr = 127.0.0.1
</span><span class="line">admin_port = 7400
</span><span class="line">admin_user = user
</span><span class="line">admin_pwd = user
</span><span class="line"># Admin assets directory. By default, these assets are bundled with frpc.
</span><span class="line"># assets_dir = ./static
</span><span class="line">
</span><span class="line"># connections will be established in advance, default value is zero
</span><span class="line">pool_count = 5
</span><span class="line">
</span><span class="line"># if tcp stream multiplexing is used, default is true, it must be same with frps
</span><span class="line">tcp_mux = true
</span><span class="line">
</span><span class="line"># your proxy name will be changed to {user}.{proxy}
</span><span class="line">user = brainzhang.bitcoin.testnet
</span><span class="line">
</span><span class="line"># decide if exit program when first login failed, otherwise continuous relogin to frps
</span><span class="line"># default is true
</span><span class="line">login_fail_exit = true
</span><span class="line">
</span><span class="line"># communication protocol used to connect to server
</span><span class="line"># now it supports tcp and kcp and websocket, default is tcp
</span><span class="line">protocol = tcp
</span><span class="line">
</span><span class="line"># if tls_enable is true, frpc will connect frps by tls
</span><span class="line">tls_enable = true
</span><span class="line">
</span><span class="line"># specify a dns server, so frpc will use this instead of default one
</span><span class="line"># dns_server = 8.8.8.8
</span><span class="line">
</span><span class="line"># proxy names you want to start seperated by ','
</span><span class="line"># default is empty, means all proxies
</span><span class="line"># start = ssh,dns
</span><span class="line">
</span><span class="line"># heartbeat configure, it's not recommended to modify the default value
</span><span class="line"># the default value of heartbeat_interval is 10 and heartbeat_timeout is 90
</span><span class="line"># heartbeat_interval = 30
</span><span class="line"># heartbeat_timeout = 90
</span><span class="line">
</span><span class="line"># 'ssh' is the unique proxy name
</span><span class="line"># if user in [common] section is not empty, it will be changed to {user}.{proxy} such as 'your_name.ssh'
</span><span class="line">[ssh]
</span><span class="line"># tcp | udp | http | https | stcp | xtcp, default is tcp
</span><span class="line">type = tcp
</span><span class="line">local_ip = 127.0.0.1
</span><span class="line">local_port = 22
</span><span class="line"># true or false, if true, messages between frps and frpc will be encrypted, default is false
</span><span class="line">use_encryption = false
</span><span class="line"># if true, message will be compressed
</span><span class="line">use_compression = true
</span><span class="line"># remote port listen by frps
</span><span class="line">remote_port = 6000
</span><span class="line"># frps will load balancing connections for proxies in same group
</span><span class="line">#group = test_group
</span><span class="line">## group should have same group key
</span><span class="line">#group_key = 123456
</span><span class="line">## enable health check for the backend service, it support 'tcp' and 'http' now
</span><span class="line">## frpc will connect local service's port to detect it's healthy status
</span><span class="line">#health_check_type = tcp
</span><span class="line">## health check connection timeout
</span><span class="line">#health_check_timeout_s = 3
</span><span class="line">## if continuous failed in 3 times, the proxy will be removed from frps
</span><span class="line">#health_check_max_failed = 3
</span><span class="line">## every 10 seconds will do a health check
</span><span class="line">#health_check_interval_s = 10
</span><span class="line">
</span><span class="line">#[ssh_random]
</span><span class="line">#type = tcp
</span><span class="line">#local_ip = 127.0.0.1
</span><span class="line">#local_port = 22
</span><span class="line">## if remote_port is 0, frps will assign a random port for you
</span><span class="line">#remote_port = 0
</span><span class="line">
</span><span class="line"># if you want to expose multiple ports, add 'range:' prefix to the section name
</span><span class="line"># frpc will generate multiple proxies such as 'tcp_port_6010', 'tcp_port_6011' and so on.
</span><span class="line">[range:tcp_port]
</span><span class="line">type = tcp
</span><span class="line">local_ip = 127.0.0.1
</span><span class="line">#local_port = 6010-6020,6022,6024-6028,
</span><span class="line">#remote_port = 6010-6020,6022,6024-6028
</span><span class="line">local_port = 8080,18332,18333,28332,28333,60000-60010
</span><span class="line">remote_port = 8080,18332,18333,28332,28333,60000-60010
</span><span class="line">use_encryption = false
</span><span class="line">use_compression = false
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>再建立systemd 启动脚本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /lib/systemd/system/frpc.service
</span><span class="line">
</span><span class="line">[Unit]
</span><span class="line">Description=Frp Client Service
</span><span class="line">After=network.target
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">Type=simple
</span><span class="line">User=root
</span><span class="line">Restart=on-failure
</span><span class="line">RestartSec=5s
</span><span class="line">ExecStart=/usr/bin/frpc -c /etc/frp/frpc.ini
</span><span class="line">ExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.ini
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动服务，再设置为开机启动</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl start frpc
</span><span class="line">systemctl enable frpc</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section">测试</h4>

<p>现在可以从外网通过 frps服务端的ip(比如x.x.x.x)中转，访问内网了；比如ssh:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh -oPort=6000 root@x.x.x.x</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也可以直接用一条scp命令直接通过跳板机拷贝文件到内网机器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">scp -P 6000 -r xxx root@xxxxxxx:/opt/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样的，如果内网开通了某些服务，比如我们的配置模板里面已经映射出了8080,18332,18333,28332,28333,60000-60010这些端口，这些端口同样的映射到服务端了；</p>

<p>比如，我们在内网运行一个简单的web服务:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">python -m SimpleHTTPServer 8080</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以通过frps服务端的ip(比如x.x.x.x)访问这个服务：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl http://x.x.x.x:8080</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们也可以在内网运行一个bitcoin全节点+lnd，然后关闭不必要的服务，再运行一个轻量的vps，在vps上部署Tor服务，这样我们就可以通过多重跳板把闪电网络热钱包隐藏到Tor网络里面了，保证了安全性；</p>

<h4 id="section-1">管理</h4>

<p>可以通过下面的地址进入web管理界面，用户名和密码就是frps.ini中配置的dashboard_user、dashboard_pwd；</p>

<p>http://x.x.x.x:7500</p>

<h4 id="section-2">扩展</h4>

<p>FRP还有非常多的功能，比如虚拟主机、多路复用、负载均衡、点对点内网穿透等等，请参考官方文档：</p>

<p>https://github.com/fatedier/frp/blob/master/README_zh.md</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -1]]></title>
    <link href="https://happy123.me/blog/2019/11/05/hello-lightning-network-1/"/>
    <updated>2019-11-05T17:17:48+08:00</updated>
    <id>https://happy123.me/blog/2019/11/05/hello-lightning-network-1</id>
    <content type="html"><![CDATA[<p class="info">有许多比特币社区的先行者们面对小白的提问时，总是真诚的说：“去看看比特币的白皮书吧，把它真正弄明白吧，你就会理解一切的。” —–如今，我想对许多质疑闪电网络的比特币先驱们说：“去看看闪电网络的白皮书吧，把它真正弄明白吧，你就会理解一切的。”</p>

<p>我们之前写文章评价道，闪电网络是次世代的支付技术，它不仅仅是一个支付技术，更是建立在比特币主网上的二层网络协议，将来会有许许多多新奇的应用建立在上面，它会为比特币开启下一个十年；</p>

<p>但是闪电网络还在实现的早期阶段，能耐心去读懂它的白皮书的人已经非常少了，更不用提现在飞速发展的<a href="https://github.com/lightningnetwork/lightning-rfc/">BOLT规范</a>了；这其实跟比特币刚诞生时是一样的，在动辄就大谈“区块链技术改变未来”的那一群人中，有几人会真正花时间，去把已经发表11年的比特币8页白皮书弄个明白呢？</p>

<p>闪电网络的基本原理其实非常简单，在我们之前的文章中已经花费了大量篇幅去介绍；但是在实现过程中，还有数不清的工程细节上的权衡；由于现在的实现还只是一个雏形，我们实操闪电网络交易的时候会有各种各样的“？”，我打算写一个系列文章，把一些有趣或者让人困惑的地方抽丝剥茧，记录一下自己的学习过程，也把这项迷人的技术介绍给更多人。</p>

<p>我们将在这篇文章中讨论闪电网络的通道入站容量(Inbound Capacity)问题。</p>

<!-- more -->

<p>凡是亲身体验闪电网络钱包的人，都是这样一个过程:</p>

<ol>
  <li>发送小额的比特币给钱包链上地址</li>
  <li>连接到一个闪电网络节点，创建一个通道，并放置一些币到通道中；</li>
  <li>通过闪电网络发送一笔支付交易</li>
</ol>

<p>到目前为止，一切顺利(当然，对于技术小白来讲，这三个步骤已经足够艰辛了)；然后他会立即遇到闪电网络中第一个令人困惑的问题：</p>

<ul>
  <li>我如何收款？</li>
</ul>

<p>在解决这个问题之前，我们需要复习一些基础知识；你会惊奇的发现，我们前文所说的<code>工程上的细节</code>到底是多么细节的东西；</p>

<h4 id="local-balance-and-remote-balance">本地余额与远程余额 (local balance and remote balance)</h4>

<p>当我们初次建立一个支付通道时，用<code>lncli listchannels</code>探测，一般必要信息是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class=""><span class="line">    {
</span><span class="line">        "active": true,
</span><span class="line">        "remote_pubkey": "xxxxxxxxxx",
</span><span class="line">        "channel_point": "zzzzzzzzzz:0",
</span><span class="line">        "chan_id": "17405554940800000000",
</span><span class="line">        "capacity": "279359",
</span><span class="line">        "local_balance": "279176",
</span><span class="line">        "remote_balance": "0",
</span><span class="line">        "commit_fee": "183",
</span><span class="line">        "commit_weight": "600",
</span><span class="line">        "fee_per_kw": "253",
</span><span class="line">        "unsettled_balance": "0",
</span><span class="line">        "total_satoshis_sent": "0",
</span><span class="line">        "total_satoshis_received": "0",
</span><span class="line">        "num_updates": "48",
</span><span class="line">        "pending_htlcs": [
</span><span class="line">        ],
</span><span class="line">        "csv_delay": 144,
</span><span class="line">        "private": false,
</span><span class="line">        "initiator": true,
</span><span class="line">        "chan_status_flags": "ChanStatusDefault",
</span><span class="line">        "local_chan_reserve_sat": "2793",
</span><span class="line">        "remote_chan_reserve_sat": "2793",
</span><span class="line">        "static_remote_key": false
</span><span class="line">    },</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们先来关注一下 <code>local_balance</code>和<code>remote_balance</code>这两个参数；</p>

<p>如果还记得我们之前的<a href="https://happy123.me/blog/2019/01/06/bi-te-bi-de-jiao-yi-7/">科普文章</a>的话；构建闪电通道的第一个步骤是建立一笔Funding TX；
这需要双方拿出一定量的比特币放入通道中，这样就会有固定数量的比特币被锁定到通道中，称为通道容量(capacity); 通道发起方投入的金额称为本地余额(local_balance)，对端投入的金额称为远程余额(remote_balance)；</p>

<p>在上面这个例子中，我们看到作为通道发起方，local_balance是279176 satoshi，remote_balance是0，代表对端仅仅是跟我们建立通道链接，并没有放币进来；</p>

<p>local_balance和remote_balance可以在不关闭通道的情况下多次更新，但是如果不关闭或者拼接通道，通道容量无法更改；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg0.png" alt="img" /></p>

<blockquote>
  <p>我们可以把它想象成一个沙漏，虽然沙子的总量是固定的，但是我们可以在沙漏的上下部之间移动啥子，如果想要改变沙子的总量，就需要打破沙漏；</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg1.png" alt="img" /></p>

<blockquote>
  <p>如图：以你的视角来看，你和ROBERT的通道容量是8 btc, local_balance是5btc，remote_balance是3btc; 以ROBERT的视角来看，他的local_balance是3btc，remote_balance是5btc</p>
</blockquote>

<p>每次你付款时，都会把local_balance的部分余额推给对端的ROBERT。 同样的，当收到一笔付款时，local_balance也会增加，remote_balance会减少；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg2.png" alt="img" /></p>

<blockquote>
  <p>如图：当你支付ROBERT 1BTC时，你的local_balance减少1BTC，而remote_balance增加1BTC;</p>
</blockquote>

<p>回到我们最初的例子，因为remote_balance的余额是0 satoshi，所以在只有这一个通道的情况下，你最多发送279176 satoshi，却无法接受付款；</p>

<p>可能聪明的你已经想到了，作为主动发起通道连接的一方，在通道中放入资金是天经地义的，但是对方却没有义务配合你放入资金；为了能获得remote_balance，你需要给对方一点好处才行，目前请求remote_balance的通道连接已经变成了一种服务，你需要<code>购买</code>这样的服务，以便在建立支付通道的时候能有remote_balance余额；</p>

<p>比如这个服务商：</p>

<p>https://yalls.org/about/</p>

<p>那么，购买这种服务，保证自己的支付通道中拥有remote_balance，有什么作用呢？为什么我们收款必须要依赖于它呢？</p>

<h4 id="inbound-and-outbound-capacity">进出容量(Inbound and Outbound Capacity)</h4>

<p>现在，我们已经更清楚的了解了是什么决定了通道的容量以及local_balance和remote_balance 平衡更新的方式，接下来我们考虑一下，如果你是连接节点网络的一部分，会发生什么情况？</p>

<p>两个对等点不需要直接建立支付通道来互相支付。相反，他们可以通过路由节点中转支付。在路由的每一跳，都会发生对应通道内local_balance和remote_balance余额的更新。</p>

<p>假设你想要通过闪电网络出售一个披萨。你至少需要连接到一个闪电网络节点。你会仔细的选择人气尽可能高的节点，为你的顾客–SOPHIE和ANGELA提供收款服务；</p>

<p>这个时候的闪电网络拓扑是这样的：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg3.png" alt="img" /></p>

<blockquote>
  <p>你打开了一个连接到LNTOP的支付通道，并在其中放入2个BTC，你的local_balance是2BTC，remote_balance为0BTC</p>
</blockquote>

<p>现在，ANGELA想要买个披萨，并通过LNTOP支付给你。但是，你与LNTOP的支付通道里，remote_balance为0，所以LNTOP无法付款给你；</p>

<p>在某个特定时刻，你可以接收到的金额或者入站容量(Inbound Capacity)受到remote_balance的限制。你不能收到比你的邻接节点能发送给你的更多的金额。</p>

<p>类似的，你可以发送的金额，或者说出站容量(Outbound Capacity)也同样受到local_balance的限制。</p>

<p>当你用LNTOP打开一个通道时，你决定想要锁定多少比特币，即你的local_balance；类似的，如果LNTOP与你打开一个通道，他们将确定你的初始remote_balance。这具有重要意义。虽然选择local_balance允许你决定初始Outbound Capacity，但你无法控制remote_balance和Inbound Capacity。</p>

<p>如果你今天启动你的闪电节点，并简单的打开一个通道到你选择的另一个节点，你可能会惊奇的发现，自己没有Inbound Capacity，从而无法通过闪电网络接收付款；这对于一个商家来说绝对是大问题；</p>

<p>幸运的是，有好几种方法来获得Inboound Capacity，包括上面提到的，花钱给一些商家，让他们来为你提供一些remote_balance；</p>

<p>…TODO  方法待另一篇文章介绍</p>

<h4 id="section">这样就解决问题了吗？</h4>

<p>嗯……，当然不会这么简单……在一个复杂的网络中，即使你在直接相连的通道中有足够的remote_balance，但你不能保证支付路径上的每一个节点都有充足的remote_balance； 让我们揭示网络中所有节点的local_balance和remote_balance，来更好的理解资金如何流动。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg4.png" alt="img" /></p>

<blockquote>
  <p>如图: LNTOP是一个大的中转节点，与他相邻的每个节点都有LNTOP提供的remote_balance</p>
</blockquote>

<p>这样你与LNTOP的支付通道中，你的remote_balance为3BTC， 而LNTOP与ANGELA的支付渠道中，LNTOP的remote_balance为2BTC，这样ANGELA最多能发送给你2BTC；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg5.gif" alt="img" /></p>

<blockquote>
  <p>如图：ANGELA为你发送了1BTC</p>
</blockquote>

<p>但是在这个网络中，SOPHIE甚至不能发送1BTC给你。如果你看一下SOPHIE和你之间的支付路线，就会发现LNTOP没有接收SOPHIE付款的能力；</p>

<p>对于收款，要求每个路由节点与你(接收方)之间都需要与前一个相邻的节点具有足够的Inbound Capacity；因此，即使你可能通过相邻节点获得了Inbound Capacity，但是整个支付路径上的某些节点可能并没有足够的Inbound Capacity；这样你仍然不能完成收款；</p>

<p>最致命的一点是，这种”显示所有节点的remote_balance和local_balance”的事情在闪电网络中是做不到的；作为网络的一个节点，我们只能知道其他支付通道的容量，而不知道它是如何在相连的两个节点之间分配资金的；</p>

<h4 id="section-1">谁会受影响</h4>

<p>在闪电网络中，并不是所有的节点都有同等的需求。查看我们的示例，全网至少会有三种类型的节点：</p>

<h5 id="section-2">商人节点</h5>

<p>商人节点主要需求是收款，因此，他需要Inbound Capacity，并且从客户到商人节点之间的支付路径上每一个节点，都要有足够的Inbound Capacity;</p>

<h5 id="section-3">用户节点</h5>

<p>用户主要通过闪电网络发送资金，偶尔也会从朋友那里收到一些钱； 对于这些用户，他们的关键是要连接到的节点具有足够的资金能路由给商家；这些用户需要保有少量的remote_balance即可；</p>

<h5 id="section-4">路由节点</h5>

<p>这些节点通过网络路由支付并为此收费。LNTOP就是这样的例子；</p>

<p>他们的工作是探测可用的支付路径。所以他们需要上游与终端用户的Inbound Capacity，以及下游与商家的Outbound Capacity；此外，它们的收费必须与市场上其他的公司竞争，他们还需要确保可靠性、充裕的流动性；这是一项艰难的工作，不是吗？</p>

<p>有很多攻击闪电网络的言论是：只有那些资金充裕的大公司才能有足够的精力和财力运行路由节点，根据马太效应，用户也会倾向于选择这些公司运营的节点服务；这样就会慢慢造成寡头垄断，最终比特币变成一个中心化的东西，变成一个大公司的玩物；</p>

<p>真的是这样的吗？</p>

<h4 id="section-5">结论</h4>

<p>我们讨论了一个支付通道具有的特性，其通道容量、local_balance、remote_balance、Inbound Capacity, Outbound Capacity； 我们看到，闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>但我得说，这些批评者过于心急了；就像比特币诞生初期，很多传统的经济学家批评比特币的<code>通缩</code>特性一样；</p>

<p>为了解决这些问题，社区以一个惊人的创新速度不断提出解决方法，包括WIP、Lightning Loop、多路径余额合并平衡等等；我们也将会在后面的文章中一一介绍；</p>

<p>最后，数字货币世界还是处于蛮荒狂野时代，不是那么多事情都是理所当然的; 每个人的言论都需要批判吸收； </p>

<p>乔帮主的训诫还是需要时时温习：饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</p>

<h4 id="section-6">引用</h4>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>
]]></content>
  </entry>
  
</feed>
