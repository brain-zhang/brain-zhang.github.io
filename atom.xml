<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2017-06-05T12:48:37+08:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Update to gcc4.9.x on Centos7]]></title>
    <link href="http://memoryboxes.github.io/blog/2017/04/15/how-to-update-to-gcc4-dot-9-x-on-centos7/"/>
    <updated>2017-04-15T15:50:53+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2017/04/15/how-to-update-to-gcc4-dot-9-x-on-centos7</id>
    <content type="html"><![CDATA[<p>现在很多软件包默认编译要求GLIBCXX >=3.4.20，碰到这种事redhat系又哭了，目前Centos7.x默认仓库里的gcc还是4.8.5的，所以需要一个办法升级gcc相关组件>=4.9.1。</p>

<p>CentOS下升级gcc版本有两个途径，一个是添加其他源进行自动升级，一个是手动编译升级，这里先顺便讲下自动升级的两个办法：</p>

<h3>添加Fedora源</h3>

<p>在 /etc/yum.repos.d 目录中添加文件 FedoraRepo.repo ，并输入以下内容:</p>

<pre><code>[warning:fedora]
name=fedora
mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-23&amp;arch=$basearch
enabled=1
gpgcheck=1
gpgkey=https://getfedora.org/static/34EC9CBA.txt
</code></pre>

<p>然后执行</p>

<pre><code>yum update gcc gcc-c++
</code></pre>

<h3>使用Devtoolset-4升级</h3>

<pre><code>yum install centos-release-scl
yum install devtoolset-4-gcc*
scl enable devtoolset-4 bash
which gcc
gcc --version
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migarate Duoshuo to Disqus]]></title>
    <link href="http://memoryboxes.github.io/blog/2017/03/26/migarate-duoshuo-to-disqus/"/>
    <updated>2017-03-26T15:27:11+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2017/03/26/migarate-duoshuo-to-disqus</id>
    <content type="html"><![CDATA[<p>没有盈利前景的产品死掉了，话说disqus是怎么活的?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Pyinstaller打包python脚本适配windows]]></title>
    <link href="http://memoryboxes.github.io/blog/2017/02/14/yong-pyinstallerda-bao-pythonjiao-ben-gua-pei-windows/"/>
    <updated>2017-02-14T16:13:52+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2017/02/14/yong-pyinstallerda-bao-pythonjiao-ben-gua-pei-windows</id>
    <content type="html"><![CDATA[<p>一行命令的事，纯python脚本打包出来一般5Mb左右，大小还可以接收。</p>

<p>首先在脚本同目录下加入一个pyinstaller.py:</p>

<pre><code>#!/usr/bin/env python
from PyInstaller.__main__ import run
run()
</code></pre>

<p>然后执行:</p>

<pre><code>python pyinstaller.py -c -F &lt;xxxx.py&gt; -p &lt;sdk&gt;
</code></pre>

<ul>
<li>&lt;xxxx.py> 为脚本名称</li>
<li><sdk> 为三方包目录</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python在windows CMD中输出中文]]></title>
    <link href="http://memoryboxes.github.io/blog/2017/02/14/pythonzai-windows-cmdzhong-shu-chu-zhong-wen/"/>
    <updated>2017-02-14T16:06:12+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2017/02/14/pythonzai-windows-cmdzhong-shu-chu-zhong-wen</id>
    <content type="html"><![CDATA[<p>在windows CMD中输出中文是比较烦的事情，最简单的就是增加一个windows.py，用的时候import一下:</p>

<pre><code>#!/usr/bin/env python
#  -*- coding: utf-8 -*-
import sys

class UnicodeStreamFilter:
    def __init__(self, target):
        self.target = target
        self.encoding = 'utf-8'
        self.errors = 'replace'
        self.encode_to = self.target.encoding
    def write(self, s):
        if type(s) == str:
            s = s.decode("utf-8")
        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)
        self.target.write(s)

if sys.stdout.encoding == 'cp936':
    sys.stdout = UnicodeStreamFilter(sys.stdout)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加密技术发展]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/12/25/jia-mi-ji-zhu-fa-zhan/"/>
    <updated>2016-12-25T16:54:47+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/12/25/jia-mi-ji-zhu-fa-zhan</id>
    <content type="html"><![CDATA[<p>比特币是建立在区块链基础上的，区块链的基本技术支撑有三个:</p>

<ul>
<li><p>非对称加密</p></li>
<li><p>点对点网络技术</p></li>
<li><p>HASH现金</p></li>
</ul>


<p>其中非对称加密和HASH现金技术的历史发展颇有渊源，最近仔细学习了一下密码学科普知识，总结一下。</p>

<!-- more -->


<h2>历史回溯</h2>

<p>虽然加密和解秘是人类诞生以来一直上演的剧目，方法也是形形色色，但到现在为止，可以简单归纳为两个历史阶段:</p>

<h3>1976年之前</h3>

<p>1976年以前，所有的加密算法，模式是一样的:</p>

<ul>
<li><p>甲方选择某一种加密规则，对信息进行加密</p></li>
<li><p>乙方使用同一种规则，对信息进行解密</p></li>
</ul>


<p>这时候所有的加解密都是在规则上下文章，主要有两大流派，隐写术和密码术。</p>

<p>隐写术就是利用隐形墨水之类的秘密传递手段，缺点显而易见，比如在很多小说里描述的火烤显形的段子。</p>

<p>密码术相对比较主流，最基本的是&#8221;替换&#8221;和&#8221;移位&#8221;两种方法，</p>

<h4>替换法</h4>

<p>即用一个字母表来替换明码字母的方法，举例:</p>

<p>明码表: a b c d e f g h i j k l m n o p q r s t u v w x y z</p>

<p>密码表: D E F G H I J K L M N O P Q R S T U V W X Y Z A B C</p>

<p>明文:   v e n i, v i d i, v i c i</p>

<p>密文:   Y H Q L, Y L G L, Y L F L</p>

<p>上面这个简单的加密就来自于鼎鼎大名的凯撒加密。当然实际没这么简单，但原理就是这么回事。</p>

<h4>移位法</h4>

<p>即制定一系列规则，对明文进行移位交换获得密文， 举例:</p>

<p>相邻两个字符互换形成密文:</p>

<p>明文:   v e n i, v i d i, v i c i</p>

<p>密文:   e v i n, i v i d, i v i c</p>

<p>在1976年之前，大家用的最多的就是这两种方法交替多次加密，比如有多个密码表多次映射，多个移位变换规则进行多次变换等等</p>

<p>大家熟知的<a href="https://zh.wikipedia.org/zh-hans/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96">DES加密算法</a>就是此类古典加密算法的顶峰，当然，现在已经由于安全问题不被推荐了。</p>

<p>上千年间，大家围绕这些基础手段斗智斗力，但始终有个缺陷无法解决：</p>

<h4>如何把加密规则和密码表安全的通知对方?</h4>

<p>用现代密码学里面的一个<a href="https://zh.wikipedia.org/wiki/%E6%84%9B%E9%BA%97%E7%B5%B2%E8%88%87%E9%AE%91%E4%BC%AF">经典譬喻</a>来描述一下:</p>

<ul>
<li><p>Alice和Bob是朋友，他们的住处离得比较远，Alice想要发送一则隐私消息给Bob</p></li>
<li><p>Eve想要窃听Alice和Bob的通信，Alice和Bob无法防止Eve的偷看</p></li>
<li><p>Alice把信放在一个盒子里，她上了锁，让邮差发给Bob，Eve没有钥匙，无法打开盒子，但是Bob也无法打开</p></li>
</ul>


<p>那么问题来了，Alice如何把钥匙发给Bob呢？</p>

<p>古典密码术的所有问题，在于密钥分发的问题，而且看起来这个问题和“先有蛋还是先有鸡”的问题一样，是无解的:</p>

<p>Alice要安全的给Bob钥匙，就得放在加锁的盒子里，但是要打开盒子，就需要钥匙。</p>

<h3>1976年之后</h3>

<p>当然，世上的无奈，除了马云不能灌篮这类事情外，大部分都是能解决的。</p>

<p>在我们想出解决办法之前，先放一张拽拽的图片镇楼:</p>

<p><img src="https://raw.githubusercontent.com/memoryboxes/memoryboxes.github.io/source/images/201612/bg1.jpg" alt="非对称加密发明人" /></p>

<p>左边的Whtfield Diffie是早期的Geek典范，看看他迷离的眼神，拽拽的发型，不羁的络腮胡&hellip;.等等等等，最让人生气的是他还有个善解人意的爱人~ ~</p>

<p>好，让我们再回到Alice和bob的情书问题上来，咳咳，不知道为什么变成Alice给Bob情书了~ ~ ~</p>

<p>现在设想这样一种解决手段:</p>

<ul>
<li><p>Alice把情书放到铁盒子里，上锁，发给Bob</p></li>
<li><p>Bob收到盒子，没有去想办法打开它，而是又加上了自己的一把锁，发回给Alice</p></li>
<li><p>Alice打开自己加的锁，发回给Bob</p></li>
<li><p>Bob打开自己的锁</p></li>
<li><p>可恶的Eve只能干生气了，好可怜啊</p></li>
</ul>


<p>哈，这证明了在我们的小譬喻里，分发密钥这个事情是可以安全解决的。1976年之前的人好笨啊，为什么不能这么搞呢？</p>

<p>少年，图样图僧破，在密码世界里，有一个重要的屏障：先进先出原则，就是先上锁的那个人，必须先打开锁。</p>

<p>???</p>

<p>你问我为什么会有这个屏障呢，我也说不明白啊，这是数学家们呕心沥血好多年也没解决的问题，嗯，少年，我看好你哦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPU运算卡备存]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/12/18/gpuyun-suan-qia-bei-cun/"/>
    <updated>2016-12-18T15:38:18+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/12/18/gpuyun-suan-qia-bei-cun</id>
    <content type="html"><![CDATA[<p>科技产品的命名一很高冷，就是老发烧友，过了几年再来看新产品的名儿，仍有可能一头雾水。</p>

<p>这其中显卡命名尤甚，为了不把马良认成马超，留存一下。</p>

<p>从知乎上爬来一堆资料，先来备忘一下基础知识:</p>

<p>作者：老汤
链接：<a href="https://zhuanlan.zhihu.com/p/20585886">https://zhuanlan.zhihu.com/p/20585886</a></p>

<!-- more -->


<p>显卡有哪些？市面上的显卡又有哪些不同呢？</p>

<p>显卡由GPU和其他结构组成，那么不同的显卡的这两个部分固然是不同的。</p>

<h2>一、不同的显卡GPU有不同</h2>

<ol>
<li>GPU的品牌不同</li>
</ol>


<p>GPU是一种处理器，即一种超大规模的集成电路，其研发和设计非常复杂，反正不是每家公司都能干的。目前设计消费级GPU的三家企业为超微半导体（AMD）、英伟达（NVIDIA）和我们的老朋友英特尔（Intel）。AMD原本并不设计GPU，后来收购了冶天（ATI），才做起了GPU。</p>

<p>在国内，使用AMD GPU的显卡俗称A卡，使用NVIDIA GPU的就叫N卡，Intel GPU也可以叫做I卡，但由于Intel GPU全为核心显卡，这样叫的人比较少。</p>

<ol>
<li>GPU的性能不同</li>
</ol>


<p>GPU和CPU相似，是一种处理器，所以也有相似的常见参数如架构、制程、核心频率（单位为兆赫MHz，后面会详细讲）、功耗等。需要复习的同学请返回专栏首页或去我的公众号，点击关注，然后参考《DIY从入门到精通——CPU》中的有关内容！</p>

<p>GPU作为图形处理器，还有一些特殊的参数：</p>

<ul>
<li><p>显存类型：目前有SDDR3、DDR3、GDDR3和GDDR5四种，同容量的情况下性能依次增强；</p></li>
<li><p>显存位宽：GPU一个时钟周期内发送数据的位数，单位为bit，当然是越大越好的；</p></li>
<li><p>显存带宽：GPU的实际数据带宽，计算方法为显存带宽=显存频率*显存位宽/8；显存位宽是决定显卡性能的重要因素之一，越大越好；</p></li>
<li><p>3D API：是指与GPU对应的编程用应用程序，目前有DirectX和OpenGL，其中最重要的是显卡是否支持最新版本的DirectX。</p></li>
<li><p>辅助供电：主板的PCI-E 16x插槽可以为显卡提供电力，但有的GPU功耗较高，需要额外辅助供电。</p></li>
</ul>


<p>还有一堆越大越好的参数，比如晶体管数、流处理器数、纹理单元数、ROP单元数、N卡特有的CUDA Core数等等，这些参数都代表着GPU在不同方面的处理能力。</p>

<p>通过比较参数我们可以准确地判断一款GPU的性能。但为了方便，我们往往通过GPU的命名判断一款GPU的性能大概如何。下面就来简单无脑地说说GPU都是怎么命名的：</p>

<h3>AMD GPU</h3>

<p>分为HD系列和R系列。R系列于2013年底正式发布，取代HD系列。</p>

<h4>a. HD系列</h4>

<p>HD系列GPU姓HD，名为4位数字，可伴有后缀。</p>

<p>栗子：AMD HD 7970 x2</p>

<p>HD：HD系列；</p>

<p>第一位7：代数；这里为7代；代数的升级往往代表着架构和制程的升级，即一般情况下HD 7970相对HD6970有着较大的提升；</p>

<p>第二位9：定位；同一代下常分为7、8、9三级，分别指低、中、高端；这里的9即为高端；</p>

<p>第三位7：性能；同一定位下常分为3、5、7、9四挡，性能依次提升；这里的7即表示HD7970为HD79XX中性能第二强的GPU；</p>

<p>第四位0：基本无意义；</p>

<p>x2：后缀，这里代表双核心GPU，即一张显卡由两块GPU共同组成。若有后缀“M”表示为笔记本显卡。</p>

<p>于是我们可以判断任意一款HD系列的显卡究竟是哪个水平了，比如HD 8970M是HD系列8代高端显卡中性能最强（没有推出HD 8990M）的单核心笔记本GPU。</p>

<h4>b. R系列</h4>

<p>R系列GPU姓R加1位数字；名为3位数字，名前可伴有前缀，名后可伴有后缀；也有同姓R但名字特殊的型号，如R9 Fury、R9 Fury X、R9 Fury x2、R9 Nano等。</p>

<p>栗子：AMD R9 M290X</p>

<p>R：R系列；</p>

<p>加1位数字9：定位；共有5、7、9三级，分别指低、中、高端；这里R9表示R系列高端；</p>

<p>M：名前缀，表示笔记本GPU；</p>

<p>第一位2：代数，这里为2代。（注：R系列没有1代）</p>

<p>第二位9：性能；R5系列有3一档；R7系列分4、5、6三挡；R9系列有7、8、9三档，数字越大性能越强；这里9即为最强。</p>

<p>第三位0：基本无意义；有时代表性能，目前只有0、5两档，且仅存在于部分型号，如R9 295 x2。</p>

<p>X：名后缀，表示增强型号；若有后缀“x2”表示双核心。</p>

<p>至此我们可以判断几乎所有R系列的显卡是什么水平了，比如R7 340是R系列3代中端性能最弱（性能在3代中总排名倒数第2）的单核心台式机GPU。</p>

<h3>NVIDIA GPU</h3>

<p>NVIDIA GPU姓GT，姓后可紧接后缀；名为3位数字，名后可伴有后缀。也有姓GT但名字特殊的型号，多指Titan系列，如GTX Titan、GTX Titan X、GTX Titan Z、GTX Titan Black等。</p>

<p>栗子：NVIDIA GTX 980 TI</p>

<p>X：GT的后缀，代表性能更强；</p>

<p>9：代数；这里为9代；其中8代全线为笔记本GPU；</p>

<p>8：性能；分1到9共九档，这里的8代表第二强；</p>

<p>0：基本无意义；有时可代表性能，分为0、5两档，仅存在于部分型号如GTX 765M。</p>

<p>TI：后缀，表示增强型号；若后缀为“M”则为笔记本GPU。</p>

<p>我们一起来看看GTX 860M是啥玩意？没错，就是8代第6档性能的笔记本GPU。</p>

<h3>Intel GPU</h3>

<p>Intel GPU均为核心显卡，有HD和锐炬（Iris）两个系列。</p>

<h4>a. HD系列</h4>

<p>HD系列GPU姓HD，名为3位或4位数字，名前可伴有前缀。其中3位命名从Skylake开始沿用。另有最古老、性能最弱的一款为HD Graphics。</p>

<p>4位命名栗子：HD P4600</p>

<p>HD：HD系列；</p>

<p>P：前缀，表示企业版，性能上与民用版几乎无异；</p>

<p>4600：性能；基本上数字越大，性能越强，从2000到6000无规律分布。</p>

<p>三位命名栗子：HD 530</p>

<p>530：性能，与4位命名规律基本一致，但不能根据数字大小与4位命名的HD系列GPU直接比较。</p>

<p>由此可见HD 4400便是一款在HD系列中排名第七的民用版GPU。</p>

<h4>b. Iris系列</h4>

<p>Iris系列GPU姓Iris，姓后可伴有后缀；名为3位或4位数字。其中3位命名从Skylake开始沿用。</p>

<p>4位命名栗子：Iris Pro 5200</p>

<p>Iris：锐炬系列；</p>

<p>Pro：姓后缀，表示专业版，性能有所提升；若姓有后缀“P”则为企业版；</p>

<p>5200：性能，基本上数字越大，性能越强，从5100至6300无规律分布；</p>

<p>三位命名栗子：Iris 540</p>

<p>540：性能，与4位命名规律基本一致，但不能根据数字大小与4位命名的Iris系列GPU直接比较。</p>

<p>由此可见Iris P580为锐炬系列企业版的顶级GPU。</p>

<h4>Intel GPU的命名十分混乱把自己都搞混了，所以Intel把自家的GPU分为GT1、GT1.5、GT2、GT3、GT3e、GT4e共六个等级，性能依次提升，每个等级下有多种型号，以下是目前的分类：</h4>

<ul>
<li><p>GT1包含HD Graphics、HD 510；</p></li>
<li><p>GT1.5包含HD 515；</p></li>
<li><p>GT2包含HD 4200、HD 4400、HD 4600、HD P4600、HD 520、HD 530、HD P530；</p></li>
<li><p>GT3包含HD 5000、HD 5100、Iris 540、Iris 550；</p></li>
<li><p>GT3e包含HD 5200、HD 570；</p></li>
<li><p>GT4e包含HD 580、HD P580。</p></li>
</ul>


<h2>二、不同的显卡其他结构不同</h2>

<p>这里仅限独立显卡。A、N、I公司设计出GPU后，通过外包生产得到成品GPU，这些GPU会有三种用途：</p>

<p>AMD和Intel的部分GPU用作CPU的核心显卡。</p>

<p>AMD和NVIDIA的部分GPU用于生产公版显卡。</p>

<p>AMD和NVIDIA的部分GPU卖给显卡授权生产商，用于生产独立显卡；</p>

<p>公版显卡，是A、N公司为了宣传GPU而生产的，其实就是在告诉显卡授权生产商：“使用这款GPU做出来的显卡是这样的！”，一般公版显卡的性能、用料比较基础，只是用作示范。当然，粉丝们可以买来作纪念。</p>

<h2>买哪种卡组计算集群</h2>

<p>理论上说，同价位N卡的双精度计算能力是完爆A卡的。如果你是用于科学计算的话，参考下面这位仁兄的折腾经历:</p>

<p><a href="http://mli.github.io/gpu/2016/01/17/build-gpu-clusters/">http://mli.github.io/gpu/2016/01/17/build-gpu-clusters/</a></p>

<p>最近GTX1080已经开始展现王者性价比风范，如果你不是超土豪的话，可以考虑入手这个替代Titan X</p>

<p>但是，我要说但是，如果你是买来做某数字货币挖矿的话，A卡完爆N卡，具体的bentchmark，我希望将来有人就下面这几种算法，根据各种难度，出个列表:</p>

<ul>
<li><p>Scrypt算法</p></li>
<li><p>MAX算法</p></li>
<li><p>G算法</p></li>
<li><p>x11算法</p></li>
<li><p>HEFTY1算法</p></li>
</ul>


<p>好吧，折腾了一圈发现，某云号称要上A卡的云平台，难道是挖矿的春天来了？</p>

<p>太天真，某国外云立马做出回应，要开放FPGA云平台啦~~~~</p>

<p>嗯，我正在认真考虑重新投身微电子行业，确切的是打好本领，投身云挖矿行业&hellip;.</p>

<p>持续关注能耗比最小的hash算法手段~~~~</p>

<p>最后，附一个硬件天梯排行榜测评网站:</p>

<p><a href="http://www.passmark.com/">http://www.passmark.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Standard Startup Script]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/08/22/how-to-write-standard-startup-script/"/>
    <updated>2016-08-22T09:09:06+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/08/22/how-to-write-standard-startup-script</id>
    <content type="html"><![CDATA[<p>centos6中的init.d systemV script升级为systemd startup script，让我们有个easy setup的模板&hellip;</p>

<p>模板实例:</p>

<!-- more -->


<h2>systemV init script template</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'># testclient - Startup script for testclient
</span><span class='line'>
</span><span class='line'># chkconfig: 35 85 15
</span><span class='line'># description: testclient is your openstack VMS monitor and ovs auto config bot.
</span><span class='line'># processname: testclient
</span><span class='line'># config: /etc/testclient.conf
</span><span class='line'>
</span><span class='line'>. /etc/rc.d/init.d/functions
</span><span class='line'>
</span><span class='line'># NOTE: if you change any OPTIONS here, you get what you pay for:
</span><span class='line'># this script assumes all options are in the config file.
</span><span class='line'>CONFIGFILE="/etc/testclient.conf"
</span><span class='line'>
</span><span class='line'>testCLIENT=/usr/local/bin/testclient
</span><span class='line'>
</span><span class='line'>testCLIENT_USER=helloworldtest
</span><span class='line'>testCLIENT_GROUP=helloworldtest
</span><span class='line'>
</span><span class='line'># things from testclient.conf get there by testclient reading it
</span><span class='line'>PIDFILEPATH=`awk -F'[:=]' -v IGNORECASE=1 '/^[[:blank:]]*(processManagement\.)?pidFilePath[[:blank:]]*[:=][[:blank:]]*/{print $2}' "$CONFIGFILE" | tr -d "[:blank:]\"'" | aw
</span><span class='line'>PIDDIR=`dirname $PIDFILEPATH`
</span><span class='line'>LOGFILEPATH=`awk -F'[:=]' -v IGNORECASE=1 '/^[[:blank:]]*(processManagement\.)?logFilePath[[:blank:]]*[:=][[:blank:]]*/{print $2}' "$CONFIGFILE" | tr -d "[:blank:]\"'" | aw
</span><span class='line'>LOGDIR=`dirname $LOGFILEPATH`
</span><span class='line'>
</span><span class='line'>OPTIONS=" -c $CONFIGFILE"
</span><span class='line'>
</span><span class='line'>start()
</span><span class='line'>{
</span><span class='line'>  # Make sure the default pidfile directory exists
</span><span class='line'>  if [ ! -d $PIDDIR ]; then
</span><span class='line'>    install -d -m 0755 -o $testCLIENT_USER -g $testCLIENT_GROUP $PIDDIR
</span><span class='line'>  fi
</span><span class='line'>  if [ ! -d $LOGDIR ]; then
</span><span class='line'>    install -d -m 0755 -o $testCLIENT_USER -g $testCLIENT_GROUP $LOGDIR
</span><span class='line'>  fi
</span><span class='line'>
</span><span class='line'>  echo -n $"Starting testclient: "
</span><span class='line'>  daemon --pidfile "$PIDFILEPATH" --user "$testCLIENT_USER" --check $testCLIENT "$testCLIENT $OPTIONS &gt;$LOGFILEPATH 2&gt;&1 &"
</span><span class='line'>
</span><span class='line'>  RETVAL=$?
</span><span class='line'>  pid=`ps -A x | grep $testCLIENT | grep -v grep | cut -d" " -f1 | head -n 1`
</span><span class='line'>  if [ -n "$pid" ]; then
</span><span class='line'>          echo $pid &gt; $PIDFILEPATH
</span><span class='line'>  fi
</span><span class='line'>
</span><span class='line'>  [ $RETVAL -eq 0 ] && touch /var/lock/subsys/testclient
</span><span class='line'>  echo
</span><span class='line'>  return $RETVAL
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>stop()
</span><span class='line'>{
</span><span class='line'>  echo -n $"Stopping testclient: "
</span><span class='line'>  testclient_killproc "$PIDFILEPATH" $testCLIENT
</span><span class='line'>  RETVAL=$?
</span><span class='line'>  echo
</span><span class='line'>  [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/testclient
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>restart () {
</span><span class='line'>        stop
</span><span class='line'>        start
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'># Send TERM signal to process and wait up to 300 seconds for process to go away.
</span><span class='line'># If process is still alive after 300 seconds, send KILL signal.
</span><span class='line'># Built-in killproc() (found in /etc/init.d/functions) is on certain versions of Linux
</span><span class='line'># where it sleeps for the full $delay seconds if process does not respond fast enough to
</span><span class='line'># the initial TERM signal.
</span><span class='line'>testclient_killproc()
</span><span class='line'>{
</span><span class='line'>  local pid_file=$1
</span><span class='line'>  local procname=$2
</span><span class='line'>  local -i delay=10
</span><span class='line'>  local -i duration=1
</span><span class='line'>  local pid=`pidofproc -p "${pid_file}" ${procname}`
</span><span class='line'>
</span><span class='line'>  kill -TERM $pid &gt;/dev/null 2&gt;&1
</span><span class='line'>  usleep 1000
</span><span class='line'>  local -i x=0
</span><span class='line'>  while [ $x -le $delay ] && checkpid $pid; do
</span><span class='line'>    sleep $duration
</span><span class='line'>    x=$(( $x + $duration))
</span><span class='line'>  done
</span><span class='line'>
</span><span class='line'>  kill -KILL $pid &gt;/dev/null 2&gt;&1
</span><span class='line'>  usleep 1000
</span><span class='line'>
</span><span class='line'>  checkpid $pid # returns 0 only if the process exists
</span><span class='line'>  local RC=$?
</span><span class='line'>  [ "$RC" -eq 0 ] && failure "${procname} shutdown" || rm -f "${pid_file}"; success "${procname} shutdown"
</span><span class='line'>  RC=$((! $RC)) # invert return code so we return 0 when process is dead.
</span><span class='line'>  return $RC
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>RETVAL=0
</span><span class='line'>
</span><span class='line'>case "$1" in
</span><span class='line'>  start)
</span><span class='line'>    start
</span><span class='line'>    ;;
</span><span class='line'>  stop)
</span><span class='line'>    stop
</span><span class='line'>    ;;
</span><span class='line'>  restart|reload|force-reload)
</span><span class='line'>    restart
</span><span class='line'>    ;;
</span><span class='line'>  condrestart)
</span><span class='line'>    [ -f $PIDFILEPATH] && restart || :
</span><span class='line'>    ;;
</span><span class='line'>  status)
</span><span class='line'>    status $testCLIENT
</span><span class='line'>    RETVAL=$?
</span><span class='line'>    ;;
</span><span class='line'>  *)
</span><span class='line'>    echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
</span><span class='line'>    RETVAL=1
</span><span class='line'>esac
</span><span class='line'>
</span><span class='line'>exit $RETVAL</span></code></pre></td></tr></table></div></figure>


<h2>systemd startup script template</h2>

<h4>helloworld.conf</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server = tcp://localhost:35555
</span><span class='line'>node = 1
</span><span class='line'>heartbeat_period = 5
</span><span class='line'>port_sync_period = 10
</span><span class='line'>config_period = 60
</span><span class='line'>ovslog_filepath = /var/lib/helloworldtest/log/hello.log
</span><span class='line'>ovslog_maxbytes = 10485760
</span><span class='line'>
</span><span class='line'>[system]
</span><span class='line'>pidFilePath=/var/lib/helloworldtest/run/hello.pid
</span><span class='line'>logFilePath=/var/lib/helloworldtest/log/hello.log</span></code></pre></td></tr></table></div></figure>


<h4>service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'>Description=helloworld
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=forking
</span><span class='line'>EnvironmentFile=/etc/helloworld.conf
</span><span class='line'>ExecStartPre=/bin/sh -c '/bin/install -d -m 0755 -o root -g root $( /usr/bin/dirname ${logFilePath} )'
</span><span class='line'>ExecStartPre=/bin/sh -c '/bin/install -d -m 0755 -o root -g root $( /usr/bin/dirname ${pidFilePath} )'
</span><span class='line'>ExecStart=/usr/local/sbin/daemonize -p ${pidFilePath} -a -o ${logFilePath} -e ${logFilePath} /usr/local/bin/helloworld -c /etc/helloworld.conf
</span><span class='line'>ExecStopPost=/bin/kill $MAINPID
</span><span class='line'>Restart=always
</span><span class='line'>
</span><span class='line'>[Install]
</span><span class='line'>WantedBy=default.target</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Megacli Cheat]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/08/05/megacli-cheat/"/>
    <updated>2016-08-05T03:21:49+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/08/05/megacli-cheat</id>
    <content type="html"><![CDATA[<p>做Raid，用到了megacli，又学了一套命令.</p>

<!-- more -->


<ul>
<li>显示Rebuid进度</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -PDRbld -ShowProg -physdrv[20:2] -aALL</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看ES</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -PDList -aAll -NoLog | grep -Ei "(enclosure|slot)"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看所有硬盘的状态</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -LDInfo -LALL -aAll
</span><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -PDList -aAll -NoLog</span></code></pre></td></tr></table></div></figure>


<p>如果RAID卡被设置成了writethrough。这个是完全不利用卡上内存的一种做法，操作系统需要确认磁盘全部写入后再返回，io latency很大，而且性能差。</p>

<p>可以强制让他一定使用writeback模式，命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaCli64 -LDSetProp -ForcedWB -Immediate -Lall –aAll</span></code></pre></td></tr></table></div></figure>


<p>RAID卡上电池没电，单个盘损坏，都会造成RAID策略的变化，所以需要及时检测。</p>

<ul>
<li>查看所有Virtual Disk的状态</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -LdPdInfo -aAll -NoLog</span></code></pre></td></tr></table></div></figure>


<p>RAID Level对应关系：</p>

<pre><code>RAID Level : Primary-1, Secondary-0, RAID Level Qualifier-0 RAID 1
RAID Level : Primary-0, Secondary-0, RAID Level Qualifier-0 RAID 0
RAID Level : Primary-5, Secondary-0, RAID Level Qualifier-3 RAID 5
RAID Level : Primary-1, Secondary-3, RAID Level Qualifier-0 RAID 10
</code></pre>

<ul>
<li>在线做Raid</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -CfgLdAdd -r0[0:11] WB NORA Direct CachedBadBBU -strpsz64 -a0 -NoLog
</span><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -CfgLdAdd -r5 [12:2,12:3,12:4,12:5,12:6,12:7] WB Direct -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>点亮指定硬盘（定位）</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -PdLocate -start -physdrv[252:2] -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>清除Foreign状态</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -CfgForeign -Clear -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看RAID阵列中掉线的盘</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -pdgetmissing -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>替换坏掉的模块</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -pdreplacemissing -physdrv[12:10] -Array5 -row0 -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>手动开启rebuid</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -pdrbld -start -physdrv[12:10] -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看Megacli的log</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -FwTermLog dsply -a0 &gt; adp2.log</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置HotSpare</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -pdhsp -set [-Dedicated [-Array2]] [-EnclAffinity] [-nonRevertible] -PhysDrv[4:11] -a0
</span><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -pdhsp -set [-EnclAffinity] [-nonRevertible] -PhysDrv[32：1}] -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>关闭Rebuild</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -AdpAutoRbld -Dsbl -a0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置rebuild的速率</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/MegaRAID/MegaCli/MegaCli64 -AdpSetProp RebuildRate -30 -a0</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cisco 3560X Config Cheat]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/07/28/cisco-3560x-config-cheat/"/>
    <updated>2016-07-28T10:02:06+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/07/28/cisco-3560x-config-cheat</id>
    <content type="html"><![CDATA[<p>工作需要，学习了Cisco的路由器配置，记一下:</p>

<ul>
<li>查看所有信息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show run</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看span</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show span</span></code></pre></td></tr></table></div></figure>


<ul>
<li>为某个vlan id建立spanning-tree</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spanning-tree vlan 15</span></code></pre></td></tr></table></div></figure>


<ul>
<li>取消某个vlan id的spanning-tree</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>no spanning-tree vlan 15</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将某个端口加入vlan中</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh run init gi 0/39
</span><span class='line'>config t
</span><span class='line'>switchport access vlan 14</span></code></pre></td></tr></table></div></figure>


<ul>
<li>保存配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>do wr
</span><span class='line'>copy running-config startup-config</span></code></pre></td></tr></table></div></figure>


<p>顺便记一下cisco catalyst交换机配置</p>

<ul>
<li>登陆交换机</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh admin@10.1.0.2</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看现有配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show running-config</span></code></pre></td></tr></table></div></figure>


<ul>
<li>批量修改vlan：端口37-39改成vlan15。端口41-46改成trunk</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#conf t
</span><span class='line'>(config)#int ra g0/37 -39
</span><span class='line'>(config-if-range)#sw mo acc
</span><span class='line'>(config-if-range)#sw acc vl 15
</span><span class='line'>(config-if-range)#exit
</span><span class='line'>(config)#int ra g0/41 -46
</span><span class='line'>(config-if-range)#sw tr e d
</span><span class='line'>(config-if-range)#sw mo tr
</span><span class='line'>(config-if-range)#end
</span><span class='line'>#wr</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启/关闭端口</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TEST3#conf t
</span><span class='line'>Enter configuration commands, one per line.  End with CNTL/Z.
</span><span class='line'>TEST3(config)#int g0/41
</span><span class='line'>TEST3(config-if)#sh
</span><span class='line'>TEST3(config-if)#shutdown
</span><span class='line'>TEST3(config-if)#no shutdown
</span><span class='line'>TEST3(config-if)#end
</span><span class='line'>TEST3#</span></code></pre></td></tr></table></div></figure>


<p>例如 配置vlan15 和 trunk:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface GigabitEthernet0/39
</span><span class='line'> switchport access vlan 15
</span><span class='line'>  switchport mode access
</span><span class='line'>
</span><span class='line'>interface GigabitEthernet0/46
</span><span class='line'> switchport trunk encapsulation dot1q
</span><span class='line'>  switchport mode trunk
</span></code></pre></td></tr></table></div></figure>


<p>去掉</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>no switchport access vlan 15</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Change Systemd Service Timeout Value]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/07/05/how-to-change-systemd-service-timeout-value/"/>
    <updated>2016-07-05T17:56:04+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/07/05/how-to-change-systemd-service-timeout-value</id>
    <content type="html"><![CDATA[<h1>show value</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl show SERVICE_NAME.service -p TimeoutStopUSec</span></code></pre></td></tr></table></div></figure>


<h1>change value</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /usr/lib/systemd/system/node.service</span></code></pre></td></tr></table></div></figure>


<p>TimeoutStopUSec = 900</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl daemon-reexec</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql Cheat]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/07/05/mysql-cheat/"/>
    <updated>2016-07-05T08:23:00+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/07/05/mysql-cheat</id>
    <content type="html"><![CDATA[<p>整理一下经常忘记的mysql命令</p>

<h1>连接</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysql -u root -p</span></code></pre></td></tr></table></div></figure>


<h1>list</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ show DATABASES;
</span><span class='line'>$ show TABLES;</span></code></pre></td></tr></table></div></figure>


<h1>Error</h1>

<ul>
<li>ERROR 1045 (28000): Access denied for user &lsquo;root&rsquo;@&lsquo;localhost&rsquo; (using password: YES)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mysqld --skip-grant-tables
</span><span class='line'>$ mysql -u root mysql
</span><span class='line'>$ mysql&gt; UPDATE user SET Password=PASSWORD('my_password') where USER='root';
</span><span class='line'>$ mysql&gt; FLUSH PRIVILEGES;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[商业逻辑]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/07/03/shang-ye-luo-ji/"/>
    <updated>2016-07-03T16:50:41+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/07/03/shang-ye-luo-ji</id>
    <content type="html"><![CDATA[<h1>如何识别战略点</h1>

<p>贝佐斯:</p>

<p>我常被问一个问题：“在接下来的10年里，会有什么样的变化？”&hellip;但我很少被问到“在接下来的10年里，什么是不变的？”。我认为第二个问题比第一个问题更加重要，因为你需要将你的战略建立在不变的事物上。</p>

<p>在亚马逊的零售业务中，我们知道消费者会想要更低价格的产品，10年后仍然如此。他们想要更快的物流，更多的选择。很难想像，会有顾客在10年后跑来和我说：“Jeff，我喜欢亚马逊，但你们的价格能不能贵一点，或者到货时间再慢一点。”</p>

<p>所以我们将精力放到这些不变的事物上，我们知道现在在上面投入的精力，会在10年里和10年后持续不断的让我们获益。当你发现了一个对的事情，甚至10年后依然如一，那么它就值得你将大量的精力倾注于此。</p>

<h1>如何判断行业前景</h1>

<p>所以，要判断一个行业的前景，最简单的办法是看这个行业的龙头在干什么——他们才是最聪明、最敏锐的观察家。</p>

<h1>合适的商业谈判环境是什么样的</h1>

<p>接待供应商，不谈价格、不谈技术的话，都会在空旷的接洽室。透明落地玻璃接受路人监督，几张小圆桌配着椅子，还有几张长桌长椅。</p>

<h1>什么是合适的管理</h1>

<p>形势一片大好的公司，严格点很不错。但弱小的公司，过于严苛会导致离心离德。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比较实惠的二手机器]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/06/15/bi-jiao-shi-hui-de-er-shou-ji-qi/"/>
    <updated>2016-06-15T17:42:12+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/06/15/bi-jiao-shi-hui-de-er-shou-ji-qi</id>
    <content type="html"><![CDATA[<p>公司里采购了一批二手服务器，用了一段时间很实惠，记录之:</p>

<ul>
<li><p>IBM x3550M4服务器E5&mdash;2670<em>2 192G(8G</em>24) 无硬盘，8个硬盘架， M5110阵列卡 单电 ￥7680</p></li>
<li><p>IBM x3550m4服务器硬盘背板 扩展板 81Y6657 ￥450</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Difference of E1000 and VMXENT in Vmware Exsi]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/06/14/difference-of-e1000-and-vmxent-in-vmware-exsi/"/>
    <updated>2016-06-14T15:18:55+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/06/14/difference-of-e1000-and-vmxent-in-vmware-exsi</id>
    <content type="html"><![CDATA[<p>Exsi中新建虚拟机网卡，可以选择四种网卡：E1000; 可变; VMXNET 2(增加型)；VMXENT 3</p>

<p>Vmware官网解释了区别:</p>

<p>要想兼容性好，就是用E1000,基本上所有的OS的带了E1000的驱动。</p>

<p>要想性能好(降低CPU的使用率)，那就用VMXNET 3，他是准虚拟化(ParaVirtualized)，需要在VM里面安装vmware的驱动(包含在vmware tools)，并且有一些限制，例如，虚拟机硬件版本必须是7以上，只有一些特定的操作系统被支持，</p>

<p>参考:</p>

<p><a href="https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1001805">https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1001805</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP Illustrated Note2]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/06/11/tcp-slash-ip-illustrated-note2/"/>
    <updated>2016-06-11T22:26:09+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/06/11/tcp-slash-ip-illustrated-note2</id>
    <content type="html"><![CDATA[<h2>traceroute</h2>

<h4>原理</h4>

<p>开始时发送一个TTL字段为1的UDP数据报，然后将TTL字段每次加一，以确定路径中的每个路由器。每个路由器在丢弃UDP数据报时都返回一个ICMP超时报文2，而最终目的的主机则产生一个ICMP端口不可达的报文。</p>

<h4>IP源站选路选项</h4>

<ul>
<li>严格的源路由选择</li>
</ul>


<p>发送端指明IP数据包所必须采用的确切路由。如果一个路由器发现源路由所指定的下一个路由不在其直接连接的网络上，那么它会返回一个“源站路由失败”的ICMP差错报文。</p>

<ul>
<li>宽松的源站选路</li>
</ul>


<p>发送端指明了一个数据报经过的IP地址清单，但是数据报在清单上指明的任意两个地址之间可以通过其它路由器。</p>

<h2>IP选路</h2>

<p>一个简单的路由表</p>

<pre><code>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         192.168.159.2   0.0.0.0         UG    0      0        0 eth0
192.168.159.0   *               255.255.255.0   U     0      0        0 eth0
192.168.159.0   *               255.255.255.0   U     0      0        0 eth1
</code></pre>

<p>注意Flags一列，它有5种不同的标志:</p>

<ul>
<li>U (route is up) 路由启用</li>
<li>H (target is a host) 目标是主机</li>
<li>G (use gateway) 使用网关</li>
<li>R (reinstate route for dynamic routing)</li>
<li>D (dynamically installed by daemon or redirect)</li>
<li>M (modified from routing daemon or redirect)</li>
</ul>


<p>主机表项比网络表项具有更高的优先级，而网络表项比默认项具有更高的优先级。</p>

<h2>UDP</h2>

<p>UDP长度字段指的是UDP首部和UDP数据的总长度</p>

<p>UDP校验和覆盖UDP首部和数据，而IP首部校验和只覆盖IP首部</p>

<p>永远不要完全相信数据链路的CRC校验，应该始终打开端到端的校验和功能。另外，即使是打开了，也要小心，UDP和TCP的校验和也不是可以百分百信赖的。</p>

<p>注意两个ICMP报文和UDP的交互：ICMP不可达报文和ICMP源站抑制差错报文</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Learn123]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/06/06/bootstrap-learn123/"/>
    <updated>2016-06-06T08:22:45+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/06/06/bootstrap-learn123</id>
    <content type="html"><![CDATA[<h1>Caption1 startUp</h1>

<ul>
<li>ARIA: Accessible Rich Internet Applications</li>
</ul>


<p>简单说来，就是指<a href="http://www.zhangxinxu.com/wordpress/2012/03/wai-aria-%E6%97%A0%E9%9A%9C%E7%A2%8D%E9%98%85%E8%AF%BB/">无障碍网页应用</a>。主要针对的是视觉缺陷，失聪，行动不便的残疾人以及假装残疾的测试人员。尤其像盲人，眼睛看不到，其浏览网页则需要借助辅助设备，如屏幕阅读器，屏幕阅读机可以大声朗读或者输出盲文。</p>

<p>而ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！</p>

<p>参考:</p>

<p><a href="https://www.sitepoint.com/html5-main-element/">https://www.sitepoint.com/html5-main-element/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP Illustrated Note1]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/06/05/tcp-slash-ip-illustrated-note1/"/>
    <updated>2016-06-05T21:59:52+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/06/05/tcp-slash-ip-illustrated-note1</id>
    <content type="html"><![CDATA[<p>又开始重读&lt;TCP/IP详解>。发现真的是年纪大了&hellip;.T_T，看了就忘，做笔记也用处不大。</p>

<p>打算每天读完一部分，在这里捡一些重要的地方记一下。</p>

<h2>ARP</h2>

<p>习得技能:</p>

<ul>
<li><code>tcpdump -e</code> 可以显示硬件层地址</li>
</ul>


<h2>IP</h2>

<p>重要提示:</p>

<ul>
<li>传输之前需要把首部转换成网络字节序。注意，仅仅是首部就可以。</li>
</ul>


<h2>ICMP</h2>

<p>重要提示:</p>

<ul>
<li><p>在对ICMP差错报文响应时，永远不会生成另一份ICMP差错报文</p></li>
<li><p>当发放一份ICMP差错报文时，始终包含IP首部和产生ICMP差错报文的IP数据包的前8个字节。这样就可以精准知道谁产生的ICMP差错</p></li>
<li><p>ICMP的典型应用:</p>

<ul>
<li><p>掩码请求和应答 (大多数主机在收到请求后都会产生应答，而不是指定的主机应答，这其实是实现上的冗余)</p></li>
<li><p>时间戳请求和应答</p></li>
</ul>
</li>
<li><p>多宿主机发送报文给自己的某个接口，其实都是给回环地址的，这样产生的ICMP应答其实搞不明白原始报文发给哪个接口</p></li>
</ul>


<h2>Ping</h2>

<p>习得技能:</p>

<ul>
<li><p><code>Ping -S</code> 每秒一个往返请求</p></li>
<li><p><code>Ping -R</code> 记录路由，但是有限制，最大只能存放9个IP地址，而且只记录路由出口</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Keep Environment Variables and PATH When Using SUDO]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/06/02/how-to-keep-environment-variables-and-path-when-using-sudo/"/>
    <updated>2016-06-02T09:15:19+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/06/02/how-to-keep-environment-variables-and-path-when-using-sudo</id>
    <content type="html"><![CDATA[<h2>sudo tips</h2>

<h4>How to keep Environment Variables when Using SUDO</h4>

<p>The trick is to add environment variables to sudoers file via sudo visudo command and add these lines:</p>

<pre><code>Defaults env_keep += "HOME"
</code></pre>

<p>or and pay attention to the -E flag. This works:</p>

<pre><code>export HOME=/home/users/memorybox
sudo -E bash -c 'echo $HOME'
</code></pre>

<h4>How to keep PATH Variables when Using SUDO</h4>

<pre><code>vim /etc/sudoers
sed -i 's#Defaults    secure_path =.*#Defaults    secure_path =/usr/java/latest/bin/.....:#g' /etc/sudoers
</code></pre>

<h4>How to change root env</h4>

<pre><code>sudo -i
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Ldap on Centos]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/05/25/enable-ldap-on-centos/"/>
    <updated>2016-05-25T08:24:04+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/05/25/enable-ldap-on-centos</id>
    <content type="html"><![CDATA[<h2>Dockerfile</h2>

<pre><code>FROM docker-registry.dev.netis.com.cn:5000/autobuild/centos6

# Maintainer: docker_user &lt;docker_user at email.com&gt; (@docker_user)
MAINTAINER memoryboxes memoryboxes@gmail.com

# Commands to add ldap to image
RUN mkdir -p /etc/openldap/cacerts/ &amp;&amp; \
    rpm --rebuilddb &amp;&amp; \
    yum clean all  &amp;&amp; \
    wget http://xxxxxx/ca.cert -O /etc/openldap/cacerts/ca.cert &amp;&amp; \
    wget http://xxxxxx/sshd_config -O /etc/ssh/sshd_config &amp;&amp; \
    chmod 600 /etc/ssh/sshd_config &amp;&amp; \
    sed -i  's/#PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config &amp;&amp; \
    echo "xxxxxxx" | passwd --stdin root &amp;&amp; \
    yum -y install pam_ldap.so authconfig nscd openldap-clients nss-pam-ldapd &amp;&amp; \
    yum -y install sudo &amp;&amp; \
    yum clean all

ADD nscd /etc/dockerservices/nscd
ADD nslcd /etc/dockerservices/nslcd
COPY docker_entrypoint.sh /

# Commands when creating a new container
ENTRYPOINT ["/docker_entrypoint.sh"]
CMD ["/usr/bin/svscan", "/etc/dockerservices"]
</code></pre>

<h2>docker_entrypoint.sh</h2>

<pre><code>#!/bin/bash

set -e

echo "x.x.x.x ldap.xxx.com.cn" &gt;&gt;/etc/hosts
authconfig --enableldap --enableldapauth --ldapserver=ldap.xxx.com.cn --ldapbasedn="dc=xxx,dc=com,dc=cn" --enablemkhomedir --enableldaptls --enablecache

exec "$@"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈以太网帧格式]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/05/23/zai-tan-yi-tai-wang-zheng-ge-shi/"/>
    <updated>2016-05-23T21:59:43+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/05/23/zai-tan-yi-tai-wang-zheng-ge-shi</id>
    <content type="html"><![CDATA[<p>又重新读了一遍《tcp/ip详解》，又重温了一遍万年知识以太网，为了不能忘却的回忆，我决定原文摘抄一遍。</p>

<p>以太网这个术语是指DEC、Intel和Xerox公司在1982年联合公布的一个标准。它是当今TCP/IP采用的主要局域网技术。
几年后，IEEE802委员会公布了一个稍有不同的标准集，其中802.3针对整个CSMA/CD网络，802.4针对令牌总线网络，
802.5针对令牌环网络，这三者的共同特性由802.2标准来定义，那就是802网络共有的逻辑链路控制（LLC）。不幸的
是，802.3定义了一个与以太网不同的帧格式。</p>

<p>下图定义了两种不同形式的封装格式：</p>

<p><img src="https://raw.githubusercontent.com/memoryboxes/memoryboxes.github.io/source/images/802_3.jpg" alt="802.3" /></p>

<p>在以太网帧格式中，类型字段之后就是数据，而在802帧格式中，跟随在后面的3字节的802.2LLC和5字节的802.2SNAP。</p>

<p>目的服务访问（DSAP）和源服务访问点（SSAP）的值都设为0xaa。ctrl字段的值设为3.随后的3个字节org code都设置为0。</p>

<p>再接下来的2个字节类型字段和以以太网帧格式一样。</p>

<p>CRC字段用于帧内后续字节差错的循环冗余码检验。</p>

<p>802.3标准定义的帧和以太网的帧都有最小长度要求。802.3规定数据部分必须至少为38字节，而对于以太网，则要求最少要有46字节。为了保证这一点，必须在不足的空间插入填充字节。</p>

<p>最后注意一下，mtu的大小只是指帧内容的大小，不包括帧头。所以mtu是1500时，QinQ又额外的四个字节，加上帧头共1522个字节，会丢包，最小要把mtu设置为1504。</p>
]]></content>
  </entry>
  
</feed>
