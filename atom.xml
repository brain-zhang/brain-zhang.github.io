<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Living a Simple Life is a Happy Life]]></title>
  <link href="https://happy123.me/atom.xml" rel="self"/>
  <link href="https://happy123.me/"/>
  <updated>2020-08-07T16:13:49+08:00</updated>
  <id>https://happy123.me/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Do Logging on Solidity Contract With Truffle Suite]]></title>
    <link href="https://happy123.me/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite/"/>
    <updated>2020-07-17T17:33:45+08:00</updated>
    <id>https://happy123.me/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite</id>
    <content type="html"><![CDATA[<p>Ethereum的智能合约调试起来很麻烦，到目前为止还是没有一个方便的类似于console.log()或printf的调用；</p>

<p>一般都是通过Event的方法来打印log；这种办法在写单元测试的时候很麻烦；</p>

<p>目前最接近于官方的手段是构造一个公用的Console库合约，然后链接到主合约里面来用；</p>

<p>https://github.com/trufflesuite/truffle-logger-example</p>

<p>这个PR一直没有Merge到TruffleSuite的新版本中，我们只能先临时手工Copy下代码来Monkey Patch一下；</p>

<p>步骤如下：</p>

<ul>
  <li>首先在主合约的同级目录添加Console.sol合约:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget https://raw.githubusercontent.com/trufflesuite/truffle/truffleLogger/packages/core/lib/logging/Console.sol</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>然后在部署脚本里面增加这个库的链接(以官方示例MetaCoin为例)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim migrations/2_deploy_contracts.js</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const Console = artifacts.require("Console");
</span><span class="line">const MetaCoin = artifacts.require("MetaCoin");
</span><span class="line">
</span><span class="line">module.exports = function(deployer) {
</span><span class="line">      deployer.deploy(Console);
</span><span class="line">        deployer.link(Console, MetaCoin);
</span><span class="line">          deployer.deploy(MetaCoin);
</span><span class="line">          };
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>在需要打印log的单元测试中引入Console.sol</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim test/TestMetaCoin.sol</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import "../contracts/Console.sol";
</span><span class="line">
</span><span class="line">.....
</span><span class="line">    console.log("xxxxxx");</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十行代码挑战世界金融体系]]></title>
    <link href="https://happy123.me/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi/"/>
    <updated>2020-04-23T15:47:39+08:00</updated>
    <id>https://happy123.me/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi</id>
    <content type="html"><![CDATA[<p>这个有点标题党了，但实话说许多”高科技”项目也是这种浮夸的宣传手段，且听我慢慢道来；</p>

<p>最近央行将推出数字货币（DCEP）的消息沸沸扬扬，在没有实际用过之前，我无意对其做过多揣测；</p>

<p>不过这个消息激起了我另一方面的兴趣，就是写一写那些在以太坊上面发行的各种山寨Token；</p>

<p>众所周知，自从Ethereum的ERC20、ERC223、ERC777等Token合约标准诞生以来，在Ethereum上面发行一种货币的成本低的令人发指，我测算，按照现在的ETH汇率，大概10块人民币就能让你发行一个具有发行、转账、增发、销毁等基本功能的电子货币，如果导入OpenZeppelin程序库，在部署合约的时候多出100块钱左右，就可以拥有一个具有融资上限、拍卖、行权计划和其他更复杂的功能的货币。</p>

<p>先知Andreas M. Antonopoulos 曾经在2014年加拿大关于比特币的听证会上表示，未来的货币发行市场可能会超出所有人的想象，一个十几岁的屁大小子，用10行代码足以创造最灵活最有信用的货币；借助区块链的技术，一个幼儿园的童星创造的货币，可能比历史上最有权力的君王创造的货币用户更多；</p>

<p>虽然比特币发明以来，把它的代码Folk一份，修改两个参数就出来”颠覆世界”的山寨币已经数不胜数，但真正把”造币”这件事情变成无门槛，像吃棒棒糖一样容易的，还是得说以太坊的ERC20的横空出世；</p>

<p>那么，就先让我们体验一下，如何10行代码创造我们自己的棒棒糖币吧~~~</p>

<!-- more -->

<h3 id="section">前置技能</h3>

<p>虽然夸张的宣传是只需要十行代码，但是我们得懂一些前置技能:</p>

<ol>
  <li>会翻墙</li>
  <li>了解<a href="https://ethereum.org/">Ethereum</a>的基本原理，最好能把白皮书读明白</li>
  <li>学会<a href="https://github.com/ethereum/solidity/">solidity语言</a></li>
  <li>搞明白<a href="trufflesuite.com/">Truffle开发环境的使用</a></li>
  <li>会用Nodejs</li>
  <li>会用Npm安装包，因为相关代码迭代速度很快，有时候需要你自己解决一些依赖问题</li>
  <li>会一些基本的Linux命令</li>
</ol>

<p>好啦，相信老码农对于以上小门槛根本不屑一顾；</p>

<p>我们假设你满足了上面的前置条件，在一台能翻墙的Linux机器上部署了Nodejs, Geth, Truffle，让我们开干吧；</p>

<h3 id="section-1">初版</h3>

<ol>
  <li>
    <p>首先我们要完成Truffle的搭建，与我们本地运行的Geth联动，保证你的地址里面有一点ETH能支付Gas费用，这部分操作可以参考官方文档</p>
  </li>
  <li>
    <p>然后我们用Truffle命令建立一个简单的模板项目</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir CakeCoin
</span><span class="line">$ cd CakeCoin
</span><span class="line">$ truffle init</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>开始编辑我们的棒棒糖Token合约</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim contracts/CakeCoin.sol
</span><span class="line">
</span><span class="line">pragma solidity ^0.5.0;
</span><span class="line">contract CakeCoin {
</span><span class="line">    mapping (address =&gt; uint256) public balanceOf;
</span><span class="line">    constructor(uint256 initialSupply) public {
</span><span class="line">        balanceOf[msg.sender] = initialSupply;
</span><span class="line">    }
</span><span class="line">    function transfer(address _to, uint256 _value) public {
</span><span class="line">        require(balanceOf[msg.sender] &gt;= _value);
</span><span class="line">        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
</span><span class="line">        balanceOf[msg.sender] -= _value;
</span><span class="line">        balanceOf[_to] += _value;
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>编写一个部署脚本</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim migrations/2_deploy_contact.js
</span><span class="line">
</span><span class="line">var CakeCoin = artifacts.require("CakeCoin");
</span><span class="line">module.exports = function(deployer) {
</span><span class="line">  deployer.deploy(CakeCoin);
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>编译部署上链</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ truffle migrate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>大功告成，在付出大概0.001ETH的Gas费用之后，你的私人货币就发行成功了，此时你有两项权力：</p>

<ul>
  <li>可以在部署的时候指定货币的总体供应量</li>
  <li>可以执行央行的角色，把货币分发给其他人；至于分发的方式，就看你的心情了
    <ul>
      <li>可以像以太坊众筹一样，为某个时间点的所有比特币持有者做个快照，然后按照比特币的持有量给所有持有人发币</li>
      <li>可以搞宣传诈骗，先创建一个美轮美奂的高大上的网站，然后引那些不明真相的群众花钱来买你成本只有0.001ETH的棒棒糖币</li>
      <li>纯粹为了玩，发行1000万亿货币随机分发给所有以太坊玩家；这也是大多数山寨Token的初始发行办法–先把场子热起来；</li>
    </ul>
  </li>
</ul>

<p>这个合虽然简单，但是已经完成了货币的基本功能：贮存和转移，而且是一个全球通用的，不需要任何组织背书，完全依赖于以太坊的数学体系运转的电子货币；</p>

<p>不要小看这10行代码哦，在所谓的“区块链技术”纷纷攘攘的日子里，很多所谓的金融创新就是靠着这样的代码，大肆圈钱；甚至有个国家，咱就不指明了，发行个啥石油币，本质上一样的套路；</p>

<h3 id="section-2">第二版</h3>

<p>虽然这个CakeCoin已经具备了最简单的发行和转账的功能，但是查询总发行量，账户持有量等等操作只能通过与合约交互来实现，对于非码农人士太困难了，我们需要增加必要的接口:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.5.0;
</span><span class="line">
</span><span class="line">contract CakeCoin {
</span><span class="line">/* This creates an array with all balances */
</span><span class="line">    mapping (address =&gt; uint256) public balanceOf;
</span><span class="line">    uint256 public totalSupply;
</span><span class="line">
</span><span class="line">    event TransferEvent(address indexed _from, address indexed _to, uint256 _value);
</span><span class="line">
</span><span class="line">    /* Initializes contract with initial supply tokens to the creator of the contract */
</span><span class="line">    constructor(uint256 initialSupply) public {
</span><span class="line">        balanceOf[msg.sender] = initialSupply;
</span><span class="line">        totalSupply = initialSupply;
</span><span class="line">        // Give the creator all initial tokens
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    /* Send coins */
</span><span class="line">    function transfer(address _to, uint256 _value) public {
</span><span class="line">        require(balanceOf[msg.sender] &gt;= _value);
</span><span class="line">        // Check if the sender has enough
</span><span class="line">        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
</span><span class="line">        // Check for overflows
</span><span class="line">        balanceOf[msg.sender] -= _value;
</span><span class="line">        // Subtract from the sender
</span><span class="line">        balanceOf[_to] += _value;
</span><span class="line">        // Add the same to the recipient
</span><span class="line">        emit TransferEvent(msg.sender, _to, _value);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">        function getBalance(address addr) public view returns(uint) {
</span><span class="line">                return balanceOf[addr];
</span><span class="line">        }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后提供一个web UI操作界面，具体代码可以参考：</p>

<p>https://github.com/brain-zhang/CakeCoin/tree/branches/1.2/src</p>

<h3 id="section-3">第三版</h3>

<p>上面的货币虽然简单好用，但是有一些缺陷：</p>

<ul>
  <li>初始发行量定了就不能改了，以后不能再增发货币</li>
  <li>发行出去的货币无法注销</li>
  <li>初始发行者的权利不能转让</li>
  <li>无法开展融资等活动</li>
  <li>…..</li>
</ul>

<p>为了解决这些问题，我们想要一个更高级一点的糖果货币；毕竟，金融就是一件把事情越做越复杂的活儿，这样才好浑水摸鱼嘛^_^；</p>

<p>这么搞下来10行代码肯定不止了，但是程序员最大的特长就是造轮子，早就有人把这些东西封装成现成的库合约了,比如这个项目：</p>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts</p>

<p>我们引入一下，代码量反而更少了；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.4.0;
</span><span class="line">
</span><span class="line">import 'openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
</span><span class="line">
</span><span class="line">contract CakeCoin is StandardToken {
</span><span class="line">    string public constant name = 'CakeCoin';
</span><span class="line">    string public constant symbol = 'CAKECOIN';
</span><span class="line">    uint8 public constant decimals = 2;
</span><span class="line">    uint constant _initial_supply = 10000;
</span><span class="line">
</span><span class="line">    function CakeCoin() public {
</span><span class="line">        totalSupply_ = _initial_supply;
</span><span class="line">        balances[msg.sender] = _initial_supply;
</span><span class="line">        emit Transfer(address(0), msg.sender, _initial_supply);
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上的合约相比我们第二版，可以一眼看出有几个变化:</p>

<ol>
  <li>有了个正式的名字 <code>CakeCoin</code>, 这是ERC20的规范</li>
  <li>有了个正式的货币符号 <code>CAKECOIN</code>, 这是ERC20的规范</li>
  <li>有了精度限制, 这是ERC20的规范</li>
  <li>有了初始发行量, 这是ERC20的规范</li>
  <li>有了以上这些明文约定的东西，就很容易被第三方的交易所解析，可以直接上架交易</li>
</ol>

<p><code>openzeppelin-contracts</code> 项目发展非常快，为了便于演示，我们先采用其早期版本作为基础库；其truffle-config.js配置如下：</p>

<p>https://github.com/brain-zhang/CakeCoin/blob/branches/1.3/truffle-config.js&#8220;</p>

<p>执行下面命令重新部署:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle migrate --reset</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如此一来我们就有了一个完整的符合<a href="https://docs.openzeppelin.com/contracts/3.x/erc20">ERC20</a>规范的代币；让我们先在命令行里面体验一下其能力：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ truffle console
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.address
</span><span class="line">
</span><span class="line">'0xb634675Ea3B3aDBb2B72A975cD7Ed04Be79c4873'
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到了合约的部署地址，然后我们执行下列命令看一下货币发行总量:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let supply = await CakeCoin.deployed().then(instance =&gt; instance.totalSupply())
</span><span class="line">truffle(development)&gt; supply.toString()
</span><span class="line">
</span><span class="line">'10000'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接着，我们用本地的测试区块链上创建的账户进行一笔转账，并验证其余额:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let accounts;
</span><span class="line">truffle(development)&gt; web3.eth.getAccounts((err,res) =&gt; { accounts = res });
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 10000
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.transfer(accounts[1], 100) })
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 9900
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[1]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 100
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK，验证完毕，这样我们创造了一个符合ERC20规范，可以直接上架交易所，具备基本的发行、转账功能的代币；但是我们得到的还不止于此~~~</p>

<p>ERC20最大的功能创新是使用了approve和transferFrom的两步式交易。这个流程允许代币的持有人授权其他地址操纵他们的代币。这通常用于授权给某一个合约地址，进行代币的分发，但也可以用于交易所的场景。</p>

<p>例如，某个公司正在销售ICO的代币，他们使用授权某个众筹合约的地址进行一定数量的代币分发。这个众筹合约就可以使用transferFrom把代币从持有人的余额中转账给ICO代币的买方;</p>

<p>下面我们就演示如何创建一个众筹合约来配合我们的CakeCoin实现一个自动化的代币分发</p>

<p>~~~ 填坑中</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -3]]></title>
    <link href="https://happy123.me/blog/2019/11/30/hello-lightning-network-3/"/>
    <updated>2019-11-30T09:12:24+08:00</updated>
    <id>https://happy123.me/blog/2019/11/30/hello-lightning-network-3</id>
    <content type="html"><![CDATA[<p>在前面几篇文章中我们评论道：闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>为了理解这个问题，我们对于闪电网络的原理做了详细的探讨，现在是谈谈社区的一些解决方案的时候了；</p>

<p>我们这篇文章就来探讨为了解决Inbound Capacity问题，目前lightningLab的一个实验项目：</p>

<p><a href="https://github.com/lightninglabs/loop">loop</a></p>

<!-- more -->

<h4 id="inbound-capacity">再次回忆Inbound Capacity</h4>

<p>想一下，我们什么时候需要注入Inbound Capacity；简单来说，有两种典型的场景：</p>

<ol>
  <li>商家收款，Inbound Capacity消耗殆尽</li>
  <li>小白初次体验闪电钱包，向朋友收款，需要开辟第一个收款通道</li>
</ol>

<p>在一个人人都使用闪电的理想未来中，这个系统是自平衡的。你付给别人的钱和你从他们那里得到的钱一样多，而资金只是不停地来回流动。然而，在今天的闪电网络状态下，这并不符合实际情况。例如，一个商人通过闪电销售产品，但通过另一种支付方式支付其供应商可能会积累越来越多的平衡在其闪电渠道，直到客户不能再支付。所有的资金都移到了商人那边。</p>

<p>现在最普遍的解决办法就是向三方服务商购买通道服务。这就造成了一个让比特币老手匪夷所思的疑问：不是说闪电网络好用吗？怎么收个款这么折腾？难道我要收款，还得先求别人来给我铺路？</p>

<p>为什么我不能自己动手，丰衣足食呢？还有，假如我是商家，收款的时候还得时时操心额度够不够，这不是折腾吗？</p>

<p>这是非常正常的质疑，因此我们一再说闪电网络还处于发展期，有很多基础设施不够完善；</p>

<h2 id="loop">LOOP</h2>

<ul>
  <li>在我们的想象中，闪电网络应该提供这样一种服务：</li>
</ul>

<p>让用户能够用来自钱包或交易所的链上比特币来填充他们的闪电通道。当用户通过闪电网络进行一系列支付时，她的Inbound 余额就会下降。然后，她可以使用这个服务从一个普通的比特币链上钱包或通过一个交易所账户，在闪电通道上重新注入资金，并在必要时继续增加额外的资金。</p>

<p>这项服务还应该允许用户使用非托管的比特币合约，安全地将资金从闪电网络中转移到其他地方。有了LOOP，用户、企业和路由节点运营商就能够无限期地保持闪电通道的开放，从而使网络更高效、更稳定、使用更便宜。</p>

<p>在这个场景中，不论是用户的链上钱包，还是闪电通道，只要还有余额，就能没有感知的继续付款和收款，直到余额消费完毕为止；</p>

<p>用户的体验应该是打开钱包，即可完成每一笔支付和收款交易，而不用去操心通道余额，Inbound Capacity这些烦心问题；</p>

<p>要做到这些，Loop的解决方案是利用闪电通道付款(把资金从你这边推出)，然后在一个链上地址收到钱。你有效地将支付循环回你自己，因此得名闪电循环(Loop)。</p>

<p>任何通道都可以反复循环。不需要打开新的通道，用户可以选择他们想要循环出去的对等点。这是与“销售”服务和用户之间的通道的现有服务相比的一个优势。</p>

<p>有了这些服务，任何支付给用户的收入将支付路由费用。它们绑定到目标服务的路由策略。除此之外，许多用户使用相同的服务打开通道会造成单点故障。客户端Lightning Loop软件和协议是开源的，并且是经过mit许可的，而服务器端则可以通过使用比特币合约来完全验证。</p>

<p>我们当然可以成立一个托管方来完成一切操作，但是，在去中心化的背景下，为每一个用户提供这样的能力也是非常重要的；让我们看看Loop是如何做到这一切的；</p>

<h4 id="loop-1">一个最基本的LOOP循环</h4>

<p>一个最基本的LOOP循环包含下面这几个步骤：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191130/bg1.jpg" alt="img" /></p>

<p>我们假设商家的名字叫Bob，他想用自己的链上钱包充值一个闪电通道，他连接到了一个LOOP服务，这个LOOP服务可以是Bob自己架设，也可以是不需要信任的第三方假设的；</p>

<ol>
  <li>Bob生成一个秘密散列预原像值R，以及散列结果H</li>
  <li>Bob将与此散列H绑定的付款发送到Lightning Loop服务器。服务器还不能消费这笔款项，因为它还不知道R。相反，它会一直持有这笔支付交易，直到它得到原像R。此部分使用hodl发票实现。</li>
  <li>服务器将一个链上事务发布到一个输出(交易C1a)，该输出可以通过公开原像R(一笔P2SH交易)来消费，这是一笔链上的HTLC交易</li>
  <li>Bob将监控到这笔交易，他提供了R值消费了这笔交易(称为sweep tx)，此时R值成为一个公共知识</li>
  <li>服务器同样监控到这笔交易的消费，它从其中提取R值，并使用它来处理它仍然持有的闪电支付。最后一步完成交换。</li>
</ol>

<p>如果服务器保留闪电支付，并且从不发布链上事务，那么支付将超时，资金将返回给用户。这构成了服务的非托管性质。在超时的情况下，用户会受到轻微的惩罚，因为Loop将锁定他们的资金直到超时。</p>

<h4 id="section">预付款</h4>

<p>LOOP服务器需要花钱构造一个HTLC 链上交易。如果Bob不消费这笔交易，LOOP服务器将失去这笔钱。如果不进行检查，这可能会引入一个DoS攻击方法，将循环系统的空闲UTXOs消耗一空。</p>

<p>为了防止这种情况发生，Bob需要在交换付款的同时进行第二次闪电付款，称为预付款(prepayment)。这个想法是，如果交换没有成功，但是服务器发布了链上 HTLC(C1a)，服务器保留预付款作为对矿商费用损失的补偿。</p>

<h4 id="bobhtlc">Bob消费链上HTLC</h4>

<p>当Bob的消费HTLC(C1a)的交易进入mempool(上面的步骤4)时，就会显示原像R值。从那时起，原像R将被视为公共知识，Bob应该期待他们的闪电付款尽快成功确认。正是出于这个原因，Bob需要确保消费交易得到确认。有一件事可能会延迟确认，那就是以过低的矿商费发布消费交易。但是，用户可以使用诸如RBF和CPFP等费用提升工具来确保及时的确认。</p>

<p>在Lightning Loop中，通过启用RBF并尝试用基于最新费用估计的新交易替换每个块中的sweep交易来处理未确认的交易风险。交易费用的上限是用户在开始交换时指定的最大矿商费用，以避免在链上支付过高的费用。</p>

<h4 id="section-1">时间压力</h4>

<p>不幸的是，对于用户Bob来说，确认扫描交易的时间是有限的。LOOP服务器需要一种方法，如果Bob没有发布R值来消费这笔链上交易C1a，服务器也可以收回资金。因此，链上交换输出同时被一个散列和一个时间锁定，这使得它成为一个类似于常规闪电支付中使用的HTLC的hashtime locked contract (HTLC)。</p>

<p>当交换被启动时，服务器会选择HTLC的实际到期高度，并根据循环客户端实现可接受的最小值进行检查。如果服务器建议的到期时间太短，将不会构造C1a，并且交换将终止。这样做的原因是，用户需要有一个合理的机会来确认C1a的消费交易。</p>

<p>当用户通过在内存池中插入消费交易来公开原像R时，计时器开始计时。用户需要在达到到期高度并打开服务器回收路径之前确认交易。</p>

<p>当Bob公布了R值，但他的消费交易却因为费用太低而迟迟无法确认，当接近到期高度时，Bob可能需要更积极地提高收费。他甚至可能想要超过设定的最大矿商费，因为另一种选择可能是失去全部掉期金额。</p>

<h4 id="section-2">服务器如何保证公正</h4>

<p>LOOP的目标是以一种不考虑服务器行为的方式实现它。它应该考虑服务器作恶的情况。例如，从服务器接收到的所有值和on-chain HTLC的参数都由客户机在本地进行检查。如果任何操作超出了可接受的范围，则LOOP交换将中止。</p>

<p>尽管做了这些准备，但Loop还实现了一个“公平”的服务器。只要对方可以选择不同的行为，LOOP Server就会选择对用户最有利的行为。相对的，有些对手服务器会抓住任何机会来最大化利润。由于掉期是非托管性的，幸运的是，这样的机会并不多。它们大多出现在用户不愉快的流程和错误方面。</p>

<p>取消掉期支付就是一个例证。当链上的HTLC过期且超时交易得到充分确认后，服务器需要收回资金时，将立即取消所持有的通道中的付款。它本来可以持有它更久，希望由于某种原因，原像R仍然会出现在mempool当中，但公平的服务器不会这样做。</p>

<h4 id="section-3">递归循环</h4>

<p>有了LOOP，就有可能使用一定数量的资金X来获得比X大得多的流入流动性。用收到的链上基金，可以注入到打开的另一个通道中去，这个通道的资金也可以循环出去。只要还有资金，这个过程就可以继续下去，因为每一步都需要向矿工、路由节点和循环服务支付费用。这个方法称为“环回”。</p>

<p>这样做的最终结果是，路由节点会向用户的节点提交大量资金。对他们来说，希望他们能从中赚取一些路由费用。</p>

<p>这也强调了路由节点监视它们的通道并关闭不产生任何返回的通道的必要性。</p>

<p>将链上资金注入闪电通道的行为我们称之为 LoopIn，将闪电通道的资金支付回链上钱包的行为我们称之为LoopOut。</p>

<p>Bob的LoopIn只可以为自己的通道注资，来源资金可以来自自己的钱包，也可以通过指定一笔外部的on-chain HTLC交易给通道注资；如果某个交易所支持这种Loop方式，也许将来你可以直接从交易所托管的在线钱包中提取资金到你的闪电通道中；</p>

<p>而LoopOut既可以付款给自己，也可以指定一个三方钱包地址，这在发工资的时候可能很有用；</p>

<h4 id="section-4">缺陷</h4>

<p>为了防止DoS攻击，使用LOOP服务需要一笔预付款。预付款数额是名义上的，最多是几千satoshis。在API和CLI中，执行交换的用户可以预先看到他们同意的预付金额。</p>

<p>除此之外，还需要使用HTLCs对传入和传出的CLTV输出进行标准超时处理。这与Lightning中所需的时间锁管理级别没有什么不同。然而，良好的费用选择启发式的影响可以降低到最低。</p>

<h4 id="section-5">结论</h4>

<p>可以看到，与循环输出提供的独特优势相比，上述几点缺陷微不足道。它为用户提供了从任何人获得流入流动性的灵活性。它不会推动集中式的网络拓扑结构，并提供了重用现有通道的方法，从而延长了通道的生存期。</p>

<h2 id="section-6">实践</h2>

<h4 id="loop-2">架设一个LOOP服务</h4>

<p>Loop目前只能跟lnd搭配使用，我们在同一台机器上，模拟Bob商户，在不需要别人帮助的情况下为自己的闪电通道Inbound注资；</p>

<ul>
  <li>lnd的编译需要特殊开关才能支持loop:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/lightningnetwork/lnd.git
</span><span class="line">cd lnd
</span><span class="line">make install tags="signrpc walletrpc chainrpc invoicesrpc routerrpc"</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动lnd</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nohup ./lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=xxxxx --bitcoind.rpcpass='xxxxx' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=x.x.x.x 2&gt;&amp;1 &gt; lndtest.log &amp;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>启动之后你会发现多了几个macaroon验证文件，关于macaroon，我们以后会写文章介绍；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ls ~/.lnd/data/chain/bitcoin/testnet/
</span><span class="line">admin.macaroon  chainnotifier.macaroon  channel.backup  invoice.macaroon  invoices.macaroon  macaroons.db  readonly.macaroon  router.macaroon  signer.macaroon  wallet.db  walletkit.macaroon</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>如果没有闪电通道的话，建立一个闪电通道，此步骤参考之前的文章</p>
  </li>
  <li>
    <p>编译loop</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/lightninglabs/loop.git
</span><span class="line">cd loop/cmd
</span><span class="line">go install ./...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译之后会得到两个可执行文件，服务程序loopd，以及命令行cli交互工具loop;</p>

<ul>
  <li>启动loopd</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nohup loopd &gt;&gt; loopd.log 2&gt;&amp;1 &amp;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>将链上钱包的钱注入到已有的闪电网络通道中</li>
</ul>

<p>因为我们是自助服务，所以我们使用loop out提取一部分链下的资金，回收到自己的链上钱包中，同时为自己的通道注入流动性</p>

<p>在注入之前，我们已经建立了一个持有1000000 satoshi的通道，不过这1000000 satoshi都在我们自己<code>local_balance</code>一端，我们的<code>remote_balance</code>此时是0；</p>

<p>我们执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./loop out 500000 tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx
</span><span class="line">./loop monitor</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>持续监控log输出，我们发现此时通道状态变成了这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class=""><span class="line">channel:
</span><span class="line">    "channels": [
</span><span class="line">        {
</span><span class="line">            "active": true,
</span><span class="line">            "remote_pubkey": "xxxxx",
</span><span class="line">            "channel_point": "zzzzzz:1",
</span><span class="line">            "chan_id": "111111111111",
</span><span class="line">            "capacity": "1000000",
</span><span class="line">            "local_balance": "498627",
</span><span class="line">            "remote_balance": "0",
</span><span class="line">            "commit_fee": "271",
</span><span class="line">            "commit_weight": "944",
</span><span class="line">            "fee_per_kw": "253",
</span><span class="line">            "unsettled_balance": "501102",
</span><span class="line">            "total_satoshis_sent": "0",
</span><span class="line">            "total_satoshis_received": "0",
</span><span class="line">            "num_updates": "21",
</span><span class="line">            "pending_htlcs": [
</span><span class="line">                {
</span><span class="line">                    "incoming": false,
</span><span class="line">                    "amount": "1338",
</span><span class="line">                    "hash_lock": "eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=",
</span><span class="line">                    "expiration_height": 1609844
</span><span class="line">                },
</span><span class="line">                {
</span><span class="line">                    "incoming": false,
</span><span class="line">                    "amount": "1338",
</span><span class="line">                    "hash_lock": "eO+/AlX7HUR5UblpmTPh8JzU6Uq7LN5026k8TAebFx8=",
</span><span class="line">                    "expiration_height": 1609844
</span><span class="line">                },
</span><span class="line">                {
</span><span class="line">                    "incoming": false,
</span><span class="line">                    "amount": "499764",
</span><span class="line">                    "hash_lock": "+xsofcSn9Y+Wx94vkx66rl5rgQoDthVBI4Pvhp6lhX4=",
</span><span class="line">                    "expiration_height": 1609988
</span><span class="line">                }
</span><span class="line">            ],
</span><span class="line">            "csv_delay": 144,
</span><span class="line">            "private": false,
</span><span class="line">            "initiator": true,
</span><span class="line">            "chan_status_flags": "ChanStatusDefault",
</span><span class="line">            "local_chan_reserve_sat": "10000",
</span><span class="line">            "remote_chan_reserve_sat": "10000",
</span><span class="line">            "static_remote_key": false
</span><span class="line">        }
</span><span class="line">    ]
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通道中现在有了htlc交易，并设定了一个过期块高度;</p>

<p>此时loopd的输出如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2019-11-24 10:58:48.403 [INF] LOOP: Offchain swap destination: xxxxxxxxxxxxxxxxxxxxxxxxxx
</span><span class="line">2019-11-24 10:58:53.073 [INF] LOOPD: Loop out request received
</span><span class="line">2019-11-24 10:58:53.073 [INF] LOOP: LoopOut 0.005 BTC to tb1q3d8l6wgqprl7xxxxxxxxxxxxxxxxxxx (channel: &lt;nil&gt;)
</span><span class="line">2019-11-24 10:58:53.078 [INF] LOOP: Initiating swap request at height 1609561
</span><span class="line">2019-11-24 10:58:53.423 [INF] LOOP: fb1b28 Htlc address: tb1qku40cmlsrmdtyqp6vgpjw9vpe8jkcp3ullxa9u5yphpdequc6f4qa60ts8
</span><span class="line">2019-11-24 10:58:53.424 [INF] LOOP: fb1b28 state Initiated
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending swap payment lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm (id:fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e)
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Sending prepayment lntb13370n1pwanu0dpp50rhm7qj4lvw5g723h95ejvlp7zwdf622hvkduaxm4y7ycpumzu0sdq2wpex2urp0ycqzxgxq97zvuqkhdq3yvlvljdkz2h3u5s37q2h6mxt4w3ynucnf6psckwpc80l3y944h09ruj2m2zacyshuch7hdwzl86n6nva0lan8lyg3rhshqsn0qprgdyel (id:78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f )
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Register conf ntfn for swap script on chain (hh=1609561)
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609561)
</span><span class="line">2019-11-24 10:58:53.425 [INF] LOOP: fb1b28 Waiting for either htlc on-chain confirmation or  off-chain payment failure
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意，这里产生了两笔闪电支付，分别是注入通道的资金(swap payment)，以及预付款(prepayment)；Loop服务端立即发布了链上交易，期待得到swap payment的原像R值；</p>

<p>然后我们等待链上交易的确认:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2019-11-24 10:59:02.029 [INF] LOOPD: Monitor request received
</span><span class="line">2019-11-24 11:10:41.583 [INF] LOOP: Received block 1609562
</span><span class="line">2019-11-24 11:10:41.585 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609562)
</span><span class="line">2019-11-24 11:28:10.032 [INF] LOOPD: Loop out terms request received
</span><span class="line">2019-11-24 11:28:10.091 [INF] LOOPD: Loop in terms request received
</span><span class="line">2019-11-24 11:28:53.934 [INF] LNDC: Payment 78efbf0255fb1d447951b9699933e1f09cd4e94abb2cde74dba93c4c079b171f completed
</span><span class="line">2019-11-24 11:29:36.256 [INF] LOOPD: Monitor request received
</span><span class="line">2019-11-24 11:30:27.928 [INF] LOOP: Received block 1609563
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Checking preimage reveal height 1609641 exceeded (height 1609563)
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Swap script confirmed on chain
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc tx eac746dd4c7f28edd277a39aa4771b651f0faf1d11f82bacf03e668b35a5658b at height 1609563
</span><span class="line">2019-11-24 11:30:27.929 [INF] LOOP: fb1b28 Htlc value: 0.005 BTC
</span><span class="line">2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 state PreimageRevealed
</span><span class="line">2019-11-24 11:30:37.939 [INF] LOOP: fb1b28 Sweep on chain HTLC to address tb1q3d8l6wgqprl7tgtgwlqcxq8fts8vf5cwezww9s with fee 0.00000138 BTC (tx 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc)
</span><span class="line">2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Htlc spend by tx: 2edcbe792641e4e6aff8dd83b8a5d8ee3cf4cba158b2ee05b3111ccadbbe13fc
</span><span class="line">2019-11-24 11:45:01.137 [INF] LOOP: fb1b28 Wait for server pulling off-chain payment(s)
</span><span class="line">2019-11-24 11:45:01.841 [INF] LNDC: Payment fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e completed
</span><span class="line">2019-11-24 11:45:01.841 [INF] LOOP: fb1b28 Swap completed: Success (final cost: server 0.000006 BTC, onchain 0.00000138 BTC, offchain 0.00000502 BTC)
</span><span class="line">2019-11-24 11:45:01.842 [INF] LOOP: fb1b28 state Success</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>客户端迅速消费了链上交易，一个区块确认之后，整个交换过程完成：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">success swap payment:
</span><span class="line">
</span><span class="line">        {
</span><span class="line">            "payment_hash": "fb1b287dc4a7f58f96c7de2f931ebaae5e6b810a03b615412383ef869ea5857e",
</span><span class="line">            "value": "499263",
</span><span class="line">            "creation_date": "1574564333",
</span><span class="line">            "path": [
</span><span class="line">                "03052ae5c77d75264a13ab0d34520bd8260de9542e7d930cbe6bc5137485f065f3",
</span><span class="line">                "03d5e17a3c213fe490e1b0c389f8cfcfcea08a29717d50a9f453735e0ab2a7c003",
</span><span class="line">                "03fe1c271da46da5cf632beb84551c4100064d830b89dc46f8975123803cc93ff3",
</span><span class="line">                "0223acffd7f363b4591ce860eda870fea352e981212d8a25e96a0ebea37faae288"
</span><span class="line">            ],
</span><span class="line">            "fee": "501",
</span><span class="line">            "payment_preimage": "b975dc85897b707865dcff54b96511568f86622c89020a2678171e083001717a",
</span><span class="line">            "value_sat": "499263",
</span><span class="line">            "value_msat": "499263000",
</span><span class="line">            "payment_request": "lntb4992630n1pwanu0dpp5lvdjslwy5l6cl9k8mchex8464e0xhqg2qwmp2sfrs0hcd849s4lqdq8wdmkzuqcqzxgxq97zvuqv0cxf7zfatl4tx5jqkvlxrv8rz8jkjcynm0rezjq5swdvrnh8fs4znp256uxy3rdvdtgvgd9sfj8gz9jaghw82stu06xf94ph3nt5xcqw5sugm",
</span><span class="line">            "status": "SUCCEEDED",
</span><span class="line">            "fee_sat": "501",
</span><span class="line">            "fee_msat": "501762"
</span><span class="line">        }
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时的通道状态:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">    "channels": [
</span><span class="line">        {
</span><span class="line">            "active": true,
</span><span class="line">            "remote_pubkey": "xxxxx",
</span><span class="line">            "channel_point": "zzzzzz:1",
</span><span class="line">            "chan_id": "111111111111",
</span><span class="line">            "capacity": "1000000",
</span><span class="line">            "local_balance": "498714",
</span><span class="line">            "remote_balance": "501102",
</span><span class="line">            "commit_fee": "184",
</span><span class="line">            "commit_weight": "724",
</span><span class="line">            "fee_per_kw": "253",
</span><span class="line">            "unsettled_balance": "0",
</span><span class="line">            "total_satoshis_sent": "501102",
</span><span class="line">            "total_satoshis_received": "0",
</span><span class="line">            "num_updates": "23",
</span><span class="line">            "pending_htlcs": [
</span><span class="line">            ],
</span><span class="line">            "csv_delay": 144,
</span><span class="line">            "private": false,
</span><span class="line">            "initiator": true,
</span><span class="line">            "chan_status_flags": "ChanStatusDefault",
</span><span class="line">            "local_chan_reserve_sat": "10000",
</span><span class="line">            "remote_chan_reserve_sat": "10000",
</span><span class="line">            "static_remote_key": false
</span><span class="line">        }
</span><span class="line">    ]
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们loop循环出通道的一半资金返回到我们的链上钱包，同时在通道另一端注入了流动性；总体花费：</p>

<ol>
  <li>pre payment 费用</li>
  <li>on-chain HTLC 矿工费</li>
  <li>on-chain HTLC 花费交易(sweep tx)的矿工费</li>
</ol>

<p>最后，我们自立更生，为一个通道注入的Inbound流动性。</p>

<h2 id="section-7">小结</h2>

<p>与比特币刚出现时的情况一样，整个过程漫长而枯燥，批评者会说：哦，太麻烦了，太糟糕了；我不能想象会有人用这种东西！！</p>

<p>不要着急，LOOP技术为闪电网络通道的资金管理提供了无限的可能性；个人运行一个LOOP Server的成本非常低，并且可以想象，在闪电网络的极大繁荣期，并不是只有大公司才能以极大的资金量提供闪电通道的服务，小商家通过精细的运营和筹划，在安全保证本金的前提下，运营一个 LOOP节点来获得手续费用，其性价比会超过运营一个超大规模的闪电节点；就像换汇一样，如果开放自由市场，国家控制的大银行无疑在换汇服务中有极大的优势，但能提供更低廉、更方便的换汇服务的，往往是街头不起眼的小商小贩；</p>

<p>不要因为它现在只是一棵幼苗而轻视它，也许二十年后，它会成长为一棵参天大树。</p>

<h4 id="stay-hungry-stay-foolish">饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</h4>

<h4 id="section-8">引用</h4>

<p>https://blog.lightning.engineering/posts/2019/03/20/loop.html</p>

<p>https://blog.lightning.engineering/technical/posts/2019/04/15/loop-out-in-depth.html</p>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>

<p>https://blog.lightning.engineering/posts/2018/05/30/routing.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -2]]></title>
    <link href="https://happy123.me/blog/2019/11/26/hello-lightning-network-2/"/>
    <updated>2019-11-26T17:14:16+08:00</updated>
    <id>https://happy123.me/blog/2019/11/26/hello-lightning-network-2</id>
    <content type="html"><![CDATA[<p>在上一篇文章中我们评论道：闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>为了研究如何解决Inbound Capacity的问题，我们还需要复习并深化闪电网络的一些基础知识；即RSMC 和HTLC；这些基础我们曾在<a href="https://happy123.me/blog/2019/01/06/bi-te-bi-de-jiao-yi-7/">之前的文章中</a>简要介绍过，但只是对网上的资料做了一番整理，人云亦云而已，实在是辜负了闪电网络；</p>

<p>如果把闪电网络比作一支跌宕起伏的乐章，那RSMC和HTLC就是其中最华彩的两个小节，围绕这两个基础技术所衍生的种种细节Tooltips就是其中的伴奏，整个乐章美不胜收。那么，让我们沉下心来仔细体味吧；</p>

<!-- more -->

<h2 id="rsmc-recoverable-sequence-maturity-contract----rsmc">RSMC (Recoverable Sequence Maturity Contract) – 序列到期可撤销合约RSMC</h2>

<h4 id="funding-tx">Funding Tx</h4>

<p>让我们再回忆一下链下(off-chain)交易的双方要解决的信任问题：Alice和Bob想要实现公正的，双方都无法作弊的多次交易，他们需要做什么；</p>

<p>首先他们需要向对方展示一下自己有支付的能力，放到现实世界里面做个类比，我们买房摇号时要冻结一笔保证金，这样双方能够放心；</p>

<p>买房者的保证金放到银行账户上，银行来确保开发商不会挪用，但在去中心化的世界里面，如何向对方证明自己的资金实力呢？毕竟，比特币世界里面，可没有中心化的银行；</p>

<p>这需要双方各自将一笔保证金打到一个2-2 多重签名地址当中，这样只要这笔资金不被挪用，就会在这段时间内表明双方的资金实力；</p>

<p>这笔交易被称之为Funding Tx，一般翻译为保证金交易；Funding Tx交易输出的资金需要Alice和Bob两个人的签名同意才能动用；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg0-1.jpg" alt="img" /></p>

<p>Funding Tx构造之后，最终资金如何花费需要取得双方的同意，当双方产生分歧时，这笔钱就有可能冻结在这个地址永远无法花费，所以此时还不能广播上链；所以支付通道建立初期， 状况是这样的：</p>

<ol>
  <li>Alice和Bob 通过协商，构造了Funding Tx交易；双方都需要将自己的资金打入一个2-2多重签名地址；</li>
  <li>Funding Tx交易的UTXO需要两人签名才能花费，而此时Alice没有Bob的签名，Bob也没有Alice的签名，只算个口头协议而已</li>
  <li>由于担心之后存在的分歧，Funding Tx交易还不能广播到链上</li>
</ol>

<h4 id="commitment-tx">Commitment Tx</h4>

<p>Funding Tx需要解决几个问题，才能让人放心大胆的广播出去：</p>

<ol>
  <li>需要防止某一方 <code>损人不利己</code> – 永远不同意释放这笔资金，然后这笔钱就一直冻结在这里了；</li>
  <li>相互签名之后，需要防止某一方全部提款走人，每一方只能花费自己应得资金；在上图中，要保证当前状态下，Alice和Bob各自只能花费0.5BTC</li>
</ol>

<p>于是我们产生了一个初步的方案：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg0-2.jpg" alt="img" /></p>

<p>Alice构造了C1a交易，这笔交易的Input是Funing Tx的output，但是输出上做了限制，它将资金分配到了两个output:</p>

<ul>
  <li>需要Alice2和Bob的签名才能花费 (0.5BTC)</li>
  <li>直接还给Bob 0.5BTC</li>
</ul>

<p>这样的交易输出保证Bob不会吃亏，在任何情况下，Alice解约，Bob会立即收到自己的0.5BTC；</p>

<p>但是Alice呢？Alice的0.5BTC怎么办呢？ Alice会对Bob说：我够意思吧，任何情况下，你都能拿回自己的0.5BTC，那么，你如果能对 Alice2&amp;Bob的Output提供签名，那就太好了，这样我们就能达成交易了，这样任何时候都不会让你吃亏；</p>

<p>同样的，Bob也会构造C1b交易，他会说：好吧，Alice，你确实是个诚信的人；你的做法启发了我，为了能随时解约，我也同样构造了一笔交易，无论何时，你都能拿回自己应得的0.5个BTC，而这笔交易也需要你签署一下；</p>

<p>双方的这两笔交易我们称之为 Commitment Tx(承诺交易)；</p>

<p>我们可以想象，Alice和Bob两个人高高兴兴的互相为对方的交易签名，并为合作双方不用依靠别人就达成了如此巧妙而公平的交易而洋洋自得；</p>

<p>此时，无论是Funding TX，还是双方的Commitment Tx，都还没有广播出去; 但是似乎在达成了Commitment Tx之后，可以广播Funding Tx了；</p>

<p>但是且慢!！ 我们建立资金通道的目的是什么？</p>

<p>当然是为了解决资金的链下双向流通问题，目前双方在不依靠第三方公证人的前提下，成功冻结了一笔保证金，可是怎么让这笔保证金流动起来呢？</p>

<h4 id="rsmc">RSMC</h4>

<p>聪明的Alice和Bob再次对他们的通道交易做了升级，现在通道里面的交易变成了这样：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg1.jpg" alt="img" /></p>

<p>在Alice一方， 又增加了一笔交易， 即RD1a；</p>

<p>RD1a消费了C1a的第一个输出，即 <code>Alice2 &amp; Bob 0.5btc</code>， 而RD1a直接输出给Alice，但是这笔交易有一个限制条件，即seq=1000，即如果广播C1a的话，要等1000个block之后，RD1a才会生效；</p>

<p>C1a, C1b两笔交易花费的是同一个输出，故他们两个交易只有一个能进块。若Alice广播C1a，则Bob立即拿到0.5BTC（C1a的第二个输出），而Alice需要等C1a得到1000个确认，才能通过RD1a的输出拿到0.5BTC。另一方，若Bob广播C1b，则Alice立即拿到0.5BTC，Bob等待C1b得到1000个确认，才能通过RD1b拿到0.5BTC。也就是说，单方广播交易终止合约的那一方会延迟拿到币，而另一放则立即拿币。</p>

<p>上述过程以及结构图的描述，就是创建RSMC的全部过程。</p>

<h4 id="section">交易更新</h4>

<p>Alice和Bob各自0.5BTC的余额，此时Alice从Bob处购买了一件商品，价格为0.1BTC，那么余额应该变为Alice 0.4BTC，Bob 0.6BTC。</p>

<p>于是创建新的Commitment Tx，对于Alice来说是C2a 和RD2a，对于Bob来说是C2b和RD2b，过程与上面类似。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg2.jpg" alt="img" /></p>

<p>交易更新时的交易结构–此时两个状态均是有效的，那么最核心的问题来了，如何才能彻底废弃掉C1a和C1b呢？</p>

<p>RSMC采用了一个非常巧妙的方法，在C1a的第一个输出中，采用了Alice2和Bob的多重签名，Alice将Alice2 的私钥交给Bob，即表示Alice放弃C1a，承认C2a。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg3.jpg" alt="img" /></p>

<p>Alice交出Alice2的私钥给Bob，那么Bob就可以修改RD1a的输出给他自己，形成新的交易BR1a。</p>

<p>若Alice破坏合约存在C2a的情况下依然广播出C1a，那么Alice的惩罚就是失去她全部的币。</p>

<p>Alice交出Alice2的私钥，或者对交易BR1a进行签名，两者是等同的，都是对C1a的放弃。反之亦然，Bob交出Bob2的私钥给Alice即意味放弃C1b，而仅能认可C2b。</p>

<p>引入sequence的目的是，阻止后续交易进块（RD1a），给出一个实施惩罚窗口期，当发现对方破坏合约时，可以有1000个块确认的时间去实施惩罚交易，即广播BR1a代替RD1a。若错过1000个块时间窗口，则无法再实施惩罚了（RD1a进块了）。</p>

<h4 id="section-1">小结</h4>

<p>Alice和Bob两人通过不断的协商和推敲，最终建立了这样一个通道：</p>

<ol>
  <li>两人各自拿出一笔资金来放入这个通道中</li>
  <li>每个人都可以随时随地自由解约，同时任何情况下两人的资金都不会有损失</li>
  <li>通道的资金可以在两方协商同意的情况下任意分配，而不需要交易广播上链</li>
</ol>

<p>在达成了Funding Tx、C1a, C2a, RD1a, RD2a 这些交易之后，Alice和Bob两人就可以广播Funding Tx了，这是唯一需要广播的交易，建立通道后，双方所有的交易就是更新Commitment Tx的过程了，这些更新都可以通过链下完成，交易速度理论上只取决于Alice及Bob两方的网络和机器性能，可以很轻易的提升至数千TPS；</p>

<h2 id="htlc-hashed-timelock-contract---htlc">HTLC (Hashed Timelock Contract) –哈希时间锁定合约HTLC</h2>

<h4 id="section-2">交易中转</h4>

<p>RSMC要求交易的双方一定要都缴纳一笔保证金，我每天都跟不同的商家打交道，不能跟每个人都去建立RSMC，存入一笔资金吧。而且通道的建立和关闭都是需要链上广播的，如果要建立多个支付通道，交易费用也不容小觑，这有点本末倒置了吧。</p>

<p>为了解决这个问题，闪电网络又引入了HTLC ( Hashed Timelock Contract )，中文意思是“哈希的带时钟的合约”。这个其实就是限时转账。理解起来也很简单，通过智能合约，双方约定转账方先冻结一笔钱，并提供一个哈希值，如果在一定时间内有人能提出一个字符串，使得它哈希后的值跟已知值匹配（实际上意味着转账方授权了接收方来提现），则这笔钱转给接收方。</p>

<p>推广一步，甲想转账给丙，丙先发给甲一个哈希值。甲可以先跟乙签订一个合同，如果你在一定时间内能告诉我一个暗语，我就给你多少钱。乙于是跑去跟丙签订一个合同，如果你告诉我那个暗语，我就给你多少钱。丙于是告诉乙暗语，拿到乙的钱，乙又从甲拿到钱。最终达到结果是甲转账给丙。这样甲和丙之间似乎构成了一条完整的虚拟的“支付通道”。而乙就做了中转节点。</p>

<p>Alice想要支付0.5BTC给Bob，但她并没有一个渠道来和他进行交易。幸运的是，她和Charlie有一个交易渠道，而Charlie正好和Bob有一个交易渠道。这样Alice就能借助Charlie的交易渠道，通过哈希时间锁定合约（HTLC）来和Bob进行交易了。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190106/bg4.png" alt="img" /></p>

<p>为了完成这次交易，Alice就会给Bob发短信说：“嘿！我要给你付笔款。”这时Bob自己将收到一个随机数字（R），接着Bob便会回一个被哈希的数字（H）（你可以认为被哈希的数字R是随机数字的一种加密形式）给Alice。</p>

<p>然后Alice的钱包紧接着就会联系Charlie说：“嘿，Charlie。如果你给我生成（H）的未加密值（R），那么我就同意更新我们渠道的支付分配，这样你就可以得到的就会比0.5BTC多一点，我得的比0.5少一点。”</p>

<p>尽管Charlie并不知道R，但他也会同意。之后Charlie便会去找Bob说：“嘿，Bob。如果你给我那个能生成H的未加密的值R，我将同意更新我们渠道的支付分配，这样你就可以得到的会比0.5BTC多一点，我得到的比0.5少一点。”因为R就是从Bob这里生成的，所以他肯定知道。接着他马上将R告诉Charlie，并更新了其渠道的支付分配。然后Charlie将R告诉给了Alice之后也更新他们的渠道，最后交易完成，Alice以脱链的形式付给Bob0.5BTC。</p>

<p>交易中转说起来很简单，但它也要解决一些工程细节问题：</p>

<ol>
  <li>如何构造一笔交易，保证Charlie 只有收到R值的时候才能花费</li>
  <li>如果交易由于超时或者网络原因中断，如何回退交易</li>
  <li>这笔交易其实是Alice和Bob之间的事情，形成一条交易路径时却要通知所有参与转发交易的节点，如何保护隐私？</li>
</ol>

<p>让我们用一个更复杂的例子来好好理清这个交易过程吧！</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg1-0.jpg" alt="img" /></p>

<p>在这个例子中，我们有五个参与者：Alice、Bob、Carol、Diana和Eric。这五名参与者彼此之间已经开设了支付通道。Alice和Bob有支付通道。Bob连接Carol，Carol连接到Diana，Diana连接Eric。为了简单起见，我们假设每个通道每个参与者都注资2个比特币资金，每个通道的总容量为4个比特币。</p>

<p>现在Alice想要给Eric支付1个比特币，通过我们的交易中转机制，她发现了一条支付通道：Alice-&gt;Bob-&gt;Carol-&gt;Diana-&gt;Eric；然后支付步骤如下：</p>

<ol>
  <li>Alice向Eric发出支付请求，Eric的LN节点使用随机数生成器创建一个密钥R。Eric的节点没有向任何人泄露这个秘密。相反，Eric的节点计算密钥R对应的散列H，并将此散列值H发送到Alice的节点</li>
  <li>Alice的节点构造一个HTLC，支付到散列H(P2SH交易)，并具有10个区块时间锁用于（当前块+10）退款，数量为1.003比特币。额外的0.003比特币将用于补偿参与此支付路由的中间节点。Alice将此HTLC提供给Bob，从和Bob之间的通道余额中扣除1.003比特币，并将其提交给HTLC。该HTLC具有以下含义：“如果Bob知道密钥，Alice将其通道余额的1.003比特币支付给Bob，或者如果超过10个区块时间后，则退还到Alice的账号”。Alice和Bob之间的通道余额现在由Commitment Tx表示，其中有三个输出：Bob的2比特币余额，Alice的0.997比特币余额，Alice的HTLC中承诺的1.003比特币。承诺交易再从Alice的余额中减去HTLC中的金额。</li>
  <li>Bob现在有一个承诺，如果他能够在接下来的10个区块生产时间内获得密钥R，他可以获取Alice锁定的1.003。手上有了这一承诺，Bob的节点在和Carol的支付通道上构建了一个HTLC。Bob的HTLC提交一笔HTLC（这是一笔P2SH交易，输出1.002比特币及9个区块时间锁），如果Carol拥有密钥R，她就可以兑换这个HTLC。Bob知道，如果Carol要获取他的HTLC，她必须出示密钥R。如果Bob在9个区块的时间内有R，他可以用它给自己兑换Alice的HTLC。通过承诺自己的通道余额9个区块的时间，他也赚了0.001比特币。如果Carol无法获取他的HTLC，并且他也无法获取Alice的HTLC，那么一切都将恢复到之前的通道余额，没有人会亏损。Bob和Carol之间的通道余额现在是：2比特币给Carol，0.998比特币给Bob，1.002比特币由Bob承诺给HTLC。</li>
  <li>Carol现在有一个承诺，如果她在接下来的9个区块时间内获得R，她可以获取Bob的锁定1.002比特币。现在她可以在她与Diana的通道上构建HTLC承诺。她提交了一个1.001比特币的HTLC（一笔P2SH交易，输出1.001比特币及8个区块时间锁），如果Diana有密钥R，她就可以兑换。从Carol的角度来看，如果能够实现，她就可以获得0.001比特币，否则也没有失去任何东西。她提交给Diana的HTLC，只有在R是已知的情况下才可行，到那时候她可以从Bob那里索取HTLC。Carol和Diana之间的通道余额现在是：2比特币给Diana，0.999比特币给Carol，1.001比特币由Carol承诺给HTLC。</li>
  <li>最后，Diana可以提供给Eric一个HTLC，1比特币到散列H及7个区块时间锁。Diana与Eric之间的通道余额现在是：2比特币给Eric，1比特币给Diana，1比特币由Diana承诺给HTLC。</li>
  <li>Eric拥有密钥R，他可以获取Diana提供的HTLC。他将R发送给Diana，并获取1比特币，添加到他的通道余额中。通道余额现在是：1比特币给Diana，3比特币给Eric。</li>
  <li>现在，Diana有密钥R，因此，她现在可以获取来自Carol的HTLC。Diana将R发送给Carol，并将1.001比特币添加到其通道余额中。现在Carol与Diana之间的通道余额是：0.999比特币给Carol，3.001比特币给Diana。Diana已经“赚了”参与这个付款路线0.001比特币。</li>
  <li>Carol 拿到密钥R，重复了同样的事情，他获取了来自Bob的HTLC的1.002个比特币，将他们的通道余额设为：0.998比特币给Bob，3.002比特币给Carol</li>
  <li>最后，Bob获取来自Alice的HTLC）。他们的通道余额更新为：0.997比特币给Alice，3.003比特币给Bob。</li>
</ol>

<p>在没有向Eric打开支付通道的情况下，Alice已经支付给Eric 1比特币。付款路线中的中间方无须互相信任。在他们的通道内做一个短时间的资金承诺，他们就可以赚取一小笔费用，唯一的风险是，如果通道关闭或路由付款失败，退款有段短的延迟时间。</p>

<h4 id="section-3">路由加密</h4>

<p>LN节点之间的所有通信都是点对点加密的。另外，节点有一个长期公钥，它们用作标识符并且彼此认证对方；</p>

<p>在前面的例子中，Alice的节点使用这些路由发现机制之一来查找将她的节点连接到Eric的节点的一个或多个路径。一旦Alice的节点构建了路径，她将通过网络初始化该路径，传播一系列加密和嵌套的指令来连接每个相邻的支付通道。</p>

<p>重要的是，这个路径只有Alice的节点才知道。付款路线上的所有其他参与者只能看到相邻的节点。从Carol的角度来看，这看起来像是从Bob到Diana的付款。Carol不知道Bob实际上是中继转发Alice的汇款。她也不知道Diana将会向Eric中继转发付款。</p>

<p>这是闪电网络的一个重要特征，因为它确保了付款的隐私，并且使得很难对其应用监控、审查以及黑名单机制。但是，Alice如何建立这种付款路径，而不向中间节点透露任何内容呢？</p>

<p>闪电网络实现了一种基于<a href="https://cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf">Sphinx</a> 方案的洋葱路由协议。该路由协议确保支付发送者可以通过闪电网络构建和通信路径，使得：</p>

<ul>
  <li>
    <p>中间节点可以验证和解密其部分路由信息，并找到下一跳。</p>
  </li>
  <li>
    <p>除了上一跳和下一跳，他们不能获取路径上任何其他节点。</p>
  </li>
  <li>
    <p>他们无法识别支付路径的长度，或者他们自己在该路径中的位置。</p>
  </li>
  <li>
    <p>路径的每个部分都被加密，使得网络级别的攻击者不能将来自路径的不同部分的数据包相互关联。</p>
  </li>
</ul>

<p>使用这种洋葱路由协议，Alice将路径的每个节点信息封装在一层加密中，从尾端开始倒过来运算。她用Eric的公钥加密了Eric的消息。该消息封装在加密到Diana的消息中，并将Eric标识为下一个收件人。给Diana的消息封装在加密到Carol的公钥的消息中，并将Diana识别为下一个收件人。对Carol的消息被Bob的密钥加密。这样一来，Alice已经构建了这个加密的多层“洋葱”的消息。她发送给Bob，他只能解密和解开外层。在里面，Bob发现了一封给Carol的消息，他可以转发给Carol，但不能自己破译。按照路径，消息被转发、解密、转发等，一路到Eric那里。每个参与者只知道各自这一跳的前一个和下一个节点。</p>

<p>路径中的每个节点都包含有关HTLC必须扩展到下一个跳的信息，HTLC中的要发送的数量，要包括的费用以及CLTV锁定到期时间（以块为单位）。随着路由信息的传播，节点将HTLC承诺转发到下一跳。</p>

<p>此时，你可能想知道节点如何不知道路径的长度及其在该路径中的位置。毕竟，它们收到一个消息，并将其转发到下一跳。难道它不会将路径缩短，或者允许他们推断出路径长短和位置？为了防止这种情况，路径总是固定在20跳，并用随机数据填充。每个节点都会看到下一跳和一个要转发的固定长度的加密消息。只有最终的收件人看得到没有下一跳。对于其他人来说，似乎总是有20多跳要走。</p>

<h4 id="section-4">总览</h4>

<p>中转交易和路由加密技术解决了回退交易以及隐私保护的问题；</p>

<p>那么，剩下的就是最重要的问题，就是如何在双方的支付通道中，在Commitment Tx的基础上，构造HTLC交易，同时不会影响原有Commitment Tx的所有功能？</p>

<p>我们即将探究闪电网络最后的，也是最精细的一个部分，就是HTLC的细节实现，堪称这支交响乐中最细腻的部分；</p>

<h4 id="htlc">HTLC细节</h4>

<p>让我们再从头想想吧， HTLC本质上也是一个双方资金分配的问题，只不过这笔资金的解锁需要一个符合散列H值的原像R值，这就是一笔P2SH交易而已；</p>

<p>但普通的P2SH交易并不能满足这个场景的所有需求，因为我们还需要在交易失败的时候设置回退机制，资金还要能回退回来；</p>

<p>回到我们上图的例子中，在路由的第一跳，我们想象中的Alice付给Bob的HTLC交易逻辑是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">OP IF
</span><span class="line">OP HASH160 &lt;Hash160（R）&gt; OP EQUALVERIFY
</span><span class="line">2 &lt;Alice2&gt; &lt;Bob2&gt; OP CHECKMULTISIG
</span><span class="line">OP ELSE
</span><span class="line">2 &lt; Alice1&gt; &lt;Bob1&gt; OP CHECKMULTISIG
</span><span class="line">OP ENDIF</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个脚本从单一的 HTLC 输出花费有两种可能的路径:</p>

<ul>
  <li>在第一个路径（定义为 OP IF）将资金发送给 Bob，如果 Bob 可以产生R。这个UTXO是可以立即花费的；</li>
  <li>第二条路径是交易失败，被赎回的时候触发的， 它需要设置一个10 Block的时间锁定，当它被赎回时，需要10个block的时间才能上链，这段时间为支付路径上的每一个中转节点提供了回退的时间窗口；</li>
</ul>

<p>那么让我们再次继续RSMC中的例子，假设Alice和Bob已经在Funding Tx的基础上建立了Commitment Tx，并且每个人都注入了0.5BTC，现在Alice想要为Bob构造一个输出为0.1BTC的HTLC，细节是这样的：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/htlc2-1.jpg" alt="img" /></p>

<p>这个图跟我们在更新Commitment Tx的时候没有多大区别，最大的不同就是我们多了一个Output: 即C2a,C2b中的Output2;</p>

<p>这个输出就代表着0.1BTC的HTLC的完整逻辑；要花费它可以有两种方式，就是我们上面所定义的两种路径：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/htlc2-2.jpg" alt="img" /></p>

<p>我们以Alice的视角，来观察C2a交易中的HTLC输出，拆分为HT1a和HED1a；</p>

<p>HED1a的输出很简单，就是只需要Bob2签名以及原像R，Bob就能立即得到0.1BTC；</p>

<p>HT1a就复杂了，它解决了交易失败时，如何交易回退的问题：</p>

<p>让我们仔细再想想，支付通道更新的过程中，C1a,C2a, C1b, C2b等等交易完全是不上链的，如果Bob没有在指定时间内提供原像R，Alice如何收回自己的0.1BTC呢？</p>

<p>等等，这个问题好熟悉的感觉！！ 没错，这个问题其实与我们如何花费Funding Tx如出一辙！ 对于HTLC交易的处理跟Funding Tx的处理可以采取一样的方法：</p>

<h5 id="htlcrsmc-">就是将HTLC交易放到一个RSMC 当中去！！</h5>

<p>经历了漫长的探索，我们最终得到了闪电网络白皮书中这样一张大图：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191126/bg1-1.png" alt="img" /></p>

<ul>
  <li>当我们以Alice视角来看待HT1a交易时： </li>
</ul>

<p>对于付款人（Alice），“中转”交易作为 HTLC 执行交付交易（HED1a）被发送，其不受阻于 RSMC。假定支付路径成立，而且 Alice 证明公布的承诺交易C2a是最近的话。如果 Bob 可以产生原像 R，他将能够在该承诺交易C2a在 blockchain 上公布之后赎回资金。当然只有 Alice 给 Bob她的 HED1a 签名Alice2，Bob 才可以公布 HED1a。</p>

<p>如果交易失败， Alice 公布她的承诺交易HT1a，本次交易需要multisig（Alice1，Bob1）。但是，需要三天的锁定期，Alice才可以公布HTLC Timeout交易（HT1a）。这项交易是一个 RSMC。HT1a的输出HTRD1a需要Alice3和Bob3的 multisig，并且1000个block之后才能入块； 这样为后面的再次调整HTLC金额留出了余地，即本次交易可以撤销，当另一个使用
multisig（PAlice4，PBob4）的交易取代 HTRD1a，它没有对任何区块的成熟度要求。所以Bob也可以放心的签署HTRD1a；</p>

<ul>
  <li>当我们以Bob视角来看待HE1b交易时： </li>
</ul>

<p>对于收款者（Bob），收到的“Timeout” 作为 HTLC Timeout 交付交易（HTD1b）被退还。本次交易直接返还资金给原始发件人（Alice），并不受 RSMC 的阻碍。假定该 HTLC从未被 Off-chain 终止，因为 Bob 证明公布的承诺交易（C2b）是最新的。如果 3 天已经过去，Alice 可以公布 HTD1b 并拿到退款。如果 Bob 公布 C2b，本次交易需要 multisig（PAlice5，PAlice5）。只有 Alice 可以公布 HTD1b，因为 Bob 给了 Alice 他 HTD1b 交易的签名。</p>

<p>但是，如果 HTD1b 没有被公布（没有经过 3 天时间）并且 Bob 知道原像 R，如果他能产生R，则 Bob 将能够公布 HTLC 执行交易（HE1b）。这项交易是一个 RSMC。如果 Bob 公布C2b，它需要输出 multisig（Alice6，Bob6），并要求披露 R。此交易的输出是一个有 1000个区块相对成熟的 multisig（Alice7，Bob7）的 RSMC，和不需要区块确认成熟的 multisig（Alice8，Bob8）。只有 Alice 给 Bob 她 HT1a 的签名，Bob 才可以公布 HT1a。HT1A 进入 blockchain 并且 1000 次确认完成后，一个 HTLC Timeout 撤销交付交易（HERD1b）可以由 Bob 通过消耗 multisig（Alice7，Bob7）公布。只有 Alice 给 Bob 他 HERD1b 的签名，Bob 可以在公布 HE1b 1000 区块后公布 HERD1b。本次交易可以撤销，当另一个使用multisig（Alice8，Bob8）的交易取代 HERD1b，它没有对任何区块的成熟度要求。</p>

<ul>
  <li>交易终止</li>
</ul>

<p>HTLC 构造之后，为了终止 HTLC Off-chain 需要双方同意渠道的状态。如果收件人可以向对方证明 R 的信息，证明他们能够立即关闭比特币 blockchain 上的渠道并且接收资金。在这一点上，如果双方都希望保持渠道打开，就应终止 HTLC Off-chain，并创建一个新的承诺交易反应新的平衡。</p>

<p>由于 Bob 向 Alice 证明，以告诉 Alice R 的有关信息来告诉 Alice，Alice 愿意用新的承诺交易更新平衡。此时不管公布 C2 或 C3，支付将是相同的。</p>

<p>同样，如果收件人不能够通过公开 R 来证明 R 的信息，双方应同意终止 HTLC 并创建一个新的承诺交易， HTLC 中的余额退还给发件人。</p>

<p>如果交易对手不能达成协议或不回应，他们应该通过在比特币 blockchain 公布必需的渠道交易来关闭渠道。</p>

<p>但是，如果他们合作，他们可以通过首先生成具有新的平衡的承诺交易，然后通过交换违约补救交易（BR2a / BR2b）使先前承诺失效。此外，如果他们终止特定的 HTLC，也要交换一些在 HTLC 交易中使用的自己的私钥。</p>

<h2 id="section-5">总结</h2>

<p>为了研究解决Inbound Capacity的问题，我们不可避免的又把闪电网络的细节回顾了一遍；我们需要理解HTLC；但文章也因此拉长了，我们把解决方案的探讨留给下一篇文章。</p>

<h4 id="stay-hungry-stay-foolish">最后，让我们再次自我鞭策：饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</h4>

<h4 id="section-6">引用</h4>

<p>https://github.com/lightningnetwork/paper</p>

<p>https://blog.lightning.engineering/posts/2018/05/30/routing.html</p>

<p>https://blog.lightning.engineering/technical/posts/2019/04/15/loop-out-in-depth.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx配置多端口多域名访问]]></title>
    <link href="https://happy123.me/blog/2019/11/18/nginxpei-zhi-duo-duan-kou-duo-yu-ming-fang-wen/"/>
    <updated>2019-11-18T15:52:07+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/nginxpei-zhi-duo-duan-kou-duo-yu-ming-fang-wen</id>
    <content type="html"><![CDATA[<p>在一个服务器上部署多个站点，需要开放多个端口来访问不同的站点，流程很简单，调试花了2小时，记录一下：</p>

<!-- more -->

<h2 id="section">主域名多端口访问</h2>

<h4 id="dns-nameservera">在DNS NameServer设置A记录</h4>

<p>将 www.xxx.com 指向服务器ip</p>

<h4 id="nginx">开放所需端口，修改nginx配置文件</h4>

<p>比如我们有两个服务分别开放在80端口和8080端口</p>

<p>如果有iptable，先开放端口：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">iptables -A INPUT -ptcp --dport 80 -j ACCEPT
</span><span class="line">iptables -A INPUT -ptcp --dport 8080 -j ACCEPT</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改配置文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#path: /usr/local/nginx/conf/nginx.conf
</span><span class="line">
</span><span class="line">server {
</span><span class="line">listen 80;
</span><span class="line">server_name www.xxx.com;
</span><span class="line">access_log /data/www/log/33.33.33.33_nginx.log combined;
</span><span class="line">index index.html index.htm index.php;
</span><span class="line">include /usr/local/nginx/conf/rewrite/none.conf;
</span><span class="line">root /data/www/website/33.33.33.33:80;
</span><span class="line">
</span><span class="line">
</span><span class="line">location ~ [^/]\.php(/|$) {
</span><span class="line">    fastcgi_pass unix:/dev/shm/php-cgi.sock;
</span><span class="line">    fastcgi_index index.php;
</span><span class="line">    include fastcgi.conf;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {
</span><span class="line">    expires 30d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(js|css)?$ {
</span><span class="line">    expires 7d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">server {
</span><span class="line">listen 8080;
</span><span class="line">server_name A.xxx.com;
</span><span class="line">access_log /data/www/log/33.33.33.33:8080_nginx.log combined;
</span><span class="line">index index.html index.htm index.php;
</span><span class="line">include /usr/local/nginx/conf/rewrite/none.conf;
</span><span class="line">root /data/www/website/33.33.33.33:8080;
</span><span class="line">
</span><span class="line">
</span><span class="line">location ~ [^/]\.php(/|$) {
</span><span class="line">    fastcgi_pass unix:/dev/shm/php-cgi.sock;
</span><span class="line">    fastcgi_index index.php;
</span><span class="line">    include fastcgi.conf;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {
</span><span class="line">    expires 30d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">location ~ .*\.(js|css)?$ {
</span><span class="line">    expires 7d;
</span><span class="line">    access_log off;
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关键就是两个<code>server</code>段配置，你也可以把这两段拆成两个配置文件，放到</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/etc/nginx/conf.d/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>目录下面；</p>

<h2 id="section-1">子域名多端口访问</h2>

<p>这种访问比较傻，因为你的8080端口的访问需要 http://xxx.com:8080 这样的格式；</p>

<p>而且如果有两个不同的cgi，比如80端口对应一个php web服务， 8080端口对应一个nodejs web服务；而我们的nodejs自带web服务，已经在8080端口监听了，这怎么办？</p>

<p>这个时候我们需要Nginx的反向代理功能，并在DNS Server上面增加一条A记录，最终实现</p>

<ul>
  <li>www.xxx.com 访问80端口</li>
  <li>A.xxx.com 通过nginx转发访问8080端口服务</li>
</ul>

<h5 id="a">增加一条A记录</h5>

<p>将 A.xxx.com 指向服务器ip</p>

<h5 id="nginx-1">Nginx配置模板如下：</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#path: /usr/local/nginx/conf/nginx.conf
</span><span class="line">
</span><span class="line">server {
</span><span class="line">    listen 80;
</span><span class="line">    server_name www.xxx.com;
</span><span class="line">    access_log /data/www/log/33.33.33.33_nginx.log combined;
</span><span class="line">    index index.html index.htm index.php;
</span><span class="line">    include /usr/local/nginx/conf/rewrite/none.conf;
</span><span class="line">    root /data/www/website/33.33.33.33:80;
</span><span class="line">
</span><span class="line">
</span><span class="line">    location ~ [^/]\.php(/|$) {
</span><span class="line">        fastcgi_pass unix:/dev/shm/php-cgi.sock;
</span><span class="line">        fastcgi_index index.php;
</span><span class="line">        include fastcgi.conf;
</span><span class="line">        }
</span><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {
</span><span class="line">        expires 30d;
</span><span class="line">        access_log off;
</span><span class="line">        }
</span><span class="line">    location ~ .*\.(js|css)?$ {
</span><span class="line">        expires 7d;
</span><span class="line">        access_log off;
</span><span class="line">        }
</span><span class="line">}
</span><span class="line">
</span><span class="line">server {
</span><span class="line">    listen 80;
</span><span class="line">    listen [::]:80;
</span><span class="line">
</span><span class="line">    server_name A.XXX.com;
</span><span class="line">
</span><span class="line">    proxy_connect_timeout  300s;
</span><span class="line">    proxy_send_timeout  300s;
</span><span class="line">    proxy_read_timeout  300s;
</span><span class="line">    fastcgi_send_timeout 300s;
</span><span class="line">    fastcgi_read_timeout 300s;
</span><span class="line">
</span><span class="line">    location / {
</span><span class="line">        proxy_pass    http://127.0.0.1:3000;
</span><span class="line">        proxy_http_version 1.1;
</span><span class="line">        proxy_set_header Upgrade $http_upgrade;
</span><span class="line">        proxy_set_header Connection 'upgrade';
</span><span class="line">        proxy_set_header Host $host;
</span><span class="line">        proxy_cache_bypass $http_upgrade;
</span><span class="line">        try_files $uri $uri/ =404;
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="nginx-2">nginx重新载入配置文件</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nginx -s reload</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Lightning Node Cheat Sheet]]></title>
    <link href="https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet/"/>
    <updated>2019-11-18T15:14:19+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/setup-lightning-node-cheat-sheet</id>
    <content type="html"><![CDATA[<p>运营一个闪电节点的基本命令速查；</p>

<!-- more -->

<h2 id="bitcoin-core">Bitcoin Core</h2>

<h4 id="section">启动</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果需要一些老接口</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bitcoind --conf=/opt/bitcoin/blockdata/bitcoin.conf --datadir=/opt/bitcoin/blockdata/ --deprecatedrpc=signrawtransaction</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="bitcoinconf">bitcoin.conf</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rpcuser=user
</span><span class="line">rpcpassword=password
</span><span class="line">#rpcallowip=127.0.0.1/16
</span><span class="line">rpcallowip=0.0.0.0/0
</span><span class="line">rpcport=8332
</span><span class="line">test.rpcport=8332
</span><span class="line">rpcthreads=10
</span><span class="line">server=1
</span><span class="line">rest=1
</span><span class="line">testnet=0
</span><span class="line">zmqpubrawblock=tcp://127.0.0.1:28332
</span><span class="line">zmqpubrawtx=tcp://127.0.0.1:28333
</span><span class="line">
</span><span class="line">#walletnotify=/usr/bin/echo "hello"</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="lnd">Lnd</h2>

<p>接口丰富，自带rpc和restapi接口，迭代速度快；</p>

<p>https://github.com/lightningnetwork/lnd</p>

<h4 id="section-1">部署</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lnd --bitcoin.active --bitcoin.testnet --debuglevel=debug --bitcoin.node=bitcoind --bitcoind.rpcuser=user --bitcoind.rpcpass='password' --bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332 --bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333 --listen=0.0.0.0:9736 --externalip=207.246.105.100 --no-macaroons 2&gt;&amp;1 &gt;&gt; lndtest.log</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">常用命令</h4>

<ul>
  <li>解锁钱包</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet unlock
</span><span class="line">lncli  --network=testnet newaddr</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看余额</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet walletbalance
</span><span class="line">lncli  --network=testnet listunspent</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>连接到一个闪电节点</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet connect "027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8@3.13.29.161:9735"</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>打开一个通道</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet openchannel --node_key 027455aef8453d92f4706b560b61527cc217ddf14da41770e8ed6607190a1851b8 100000</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>支付</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet sendpayment --pay_req "lntb10n1pw6gf60pp5jxwg30u3k7qw2lzef7cnpy6tmnd80q2v5ytglf5tdaalrejhprzsdqhvf6xxmt9ypkxuepqw3jhxaqcqzpg9jsccqelkelayq89ydgrhxwf0hv2ffkdu2y6l27vtpmscszxj3pjsh..."</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>接收付款</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet addinvoice --memo "invoice for lnd.fun test3" --amt 100000</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>关闭通道</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet closechannel "1243f60a54c4c6b8ab5d124a0c701792e085ab13a68da135ca3ffbabb461f1cc"</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>链上发送全部余额</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli  --network=testnet sendcoins tbxxxxxx  --sweepall</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="c-lightning">C-lightning</h2>

<p>接口简洁，能直接集成lightning-charge；</p>

<p>https://github.com/ElementsProject/lightning</p>

<h4 id="section-3">部署</h4>

<ul>
  <li>c-lightning提供了systemctl 服务脚本:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cat /etc/systemd/system/lightning.service
</span><span class="line">
</span><span class="line">
</span><span class="line">[Unit]
</span><span class="line">Description=c-Lightning daemon
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">ExecStart=/usr/bin/lightningd --pid-file=/root/.lightning/lightning.pid --daemon
</span><span class="line">PIDFile=/root/.lightning/lightning.pid
</span><span class="line">User=root
</span><span class="line">Type=forking
</span><span class="line">Restart=always
</span><span class="line">RestartSec=10
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>配置文件:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">~/.lightning/config
</span><span class="line">
</span><span class="line">alias=brain_zhang_lightning_testnode
</span><span class="line">log-level=debug
</span><span class="line">#network=bitcoin
</span><span class="line">network=testnet
</span><span class="line">bitcoin-rpcuser=user
</span><span class="line">bitcoin-rpcpassword=password
</span><span class="line">bitcoin-rpcconnect=127.0.0.1
</span><span class="line">bitcoin-rpcport=18332
</span><span class="line">log-file=/var/log/lightning.log
</span><span class="line">bind-addr=
</span><span class="line">announce-addr=x.x.x.x:9735</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>注册、启动服务</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl enable lightning
</span><span class="line">systemctl start lightning</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">常用命令</h4>

<ul>
  <li>建立一个新地址</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli newaddr</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看线上钱包地址</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli dev-listaddrs</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>连接node (1ml.com node)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli connect 02312627fdf07fbdd7e5ddb136611bdde9b00d26821d14d94891395452f67af248@23.237.77.12:9735</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>建立通道</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli fundchannel id satoshi [feerate] [announce] [minconf]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看链上和链下余额</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli listfunds</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>支付</li>
</ul>

<p>Send payment specified by {bolt11} with {amount}</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli pay bolt11 [msatoshi] [label] [riskfactor] [maxfeepercent] [retry_for] [maxdelay] [exemptfee]</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>收款</li>
</ul>

<p>Create an invoice for {msatoshi} with {label} and {description} with optional {expiry} seconds (default 1 hour), optional {fallbacks} address list(default empty list) and optional {preimage}</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lightning-cli invoice msatoshi label description [expiry] [fallbacks] [preimage] [exposeprivatechannels]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="c-lightning--lightning-charge">C-lightning &amp;&amp; lightning-charge</h2>

<p>https://github.com/btcme/lightning-charge</p>

<h4 id="section-5">部署</h4>

<p>lightning-charge最好用docker直接集成c-lightning一把启动，比如我已经运行了一个bitcoin core全节点，可以直接下面的命令启动:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">docker run -d -u `id -u` -v `pwd`/data:/data -p 9735:9735 -p 9112:9112 \
</span><span class="line">             -e API_TOKEN=mySecretToken \
</span><span class="line">             -e NETWORK=testnet  \
</span><span class="line">             -e BITCOIND_URI="http://user:password@172.18.0.1:18332" \
</span><span class="line">             shesek/lightning-charge</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意BITCOIND_URL的IP是docker容器内向外连接的，如果不是用net的方式启动，要填docker的网桥地址；</p>

<ul>
  <li>查询运行状况</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl http://api-token:mySecretToken@localhost:9112/info</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSL环境备份恢复]]></title>
    <link href="https://happy123.me/blog/2019/11/18/wslhuan-jing-bei-fen-hui-fu/"/>
    <updated>2019-11-18T11:04:27+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/wslhuan-jing-bei-fen-hui-fu</id>
    <content type="html"><![CDATA[<p>WSL环境是可以单独备份还原的，有个工具名为LxRunOffline:</p>

<p>https://github.com/DDoSolitary/LxRunOffline</p>

<p>release版本下载下来之后直接使用就可以；记录一下操作命令:</p>

<!-- more -->

<h4 id="wsl">备份wsl</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LxRunOffline.exe export -n Ubuntu-18.04 -f ubuntu18.04.backup.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>-n ：wsl的别名，就是之前用list查看的其中一个</p>

<p>-f ：备份的路径，我这直接备份到当前路径backup.tar.gz</p>

<h4 id="wsl-1">还原wsl</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LxRunOffline.exe install -n Ubuntu-18.04 -d C:\wsl -f D:\temp\ubuntu18.04.backup.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>-n ：起个名字</p>

<p>-d ：wsl安装目录</p>

<p>-f ：备份文件目录</p>

<h4 id="wsl-2">删除WSL环境</h4>

<p>可以直接用wsl原生的命令：wslconfig</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wslconfig /u Ubuntu-18.04</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSL权限管理]]></title>
    <link href="https://happy123.me/blog/2019/11/18/wslquan-xian-guan-li/"/>
    <updated>2019-11-18T10:45:54+08:00</updated>
    <id>https://happy123.me/blog/2019/11/18/wslquan-xian-guan-li</id>
    <content type="html"><![CDATA[<p>重装系统，又折腾了一遍WSL环境，记录一下:</p>

<p>WSL (Win­dows Sub­sys­tem for Linux) 通过 /mnt 目录下的 c、d、e 等目录可分别访问本地的 C、D、E 等盘，虽然可以直接访问 Win­dows 下的文件内容，但输入 ls -al 查看文件你会发现文件权限全都是 777。这会导致一些问题出现，比如 Git会保留这些文件的执行权限，如果你之前在 Win­dows 下使用过 Git Bash ，那么在 WSL 中使用 <code>git status</code>查看本地仓库的文件状态时你会发现它们全部被标记成了 modified。</p>

<!-- more -->

<h3 id="section">分析问题</h3>

<p>首先要了解 WSL 中的两种文件系统：</p>

<h4 id="volfs">VolFs</h4>
<p>着力于在 Win­dows 文件系统上提供完整的 Linux 文件系统特性，通过各种手段实现了对 In­odes、Di­rec­tory en­tries、File ob­jects、File de­scrip­tors、Spe­cial file types 的支持。比如为了支持 Win­dows 上没有的 In­odes，VolFs 会把文件权限等信息保存在文件的 NTFS Ex­tended At­trib­utes 中。</p>

<p>WSL 中的 / 使用的就是 VolFs 文件系统。</p>

<h4 id="drvfs">DrvFs</h4>
<p>着力于提供与 Win­dows 文件系统的互操作性。与 VolFs 不同，为了提供最大的互操作性，DrvFs 不会在文件的 NTFS Ex­tended At­trib­utes 中储存附加信息，而是从 Win­dows 的文件权限（Ac­cess Con­trol Lists，就是你右键文件 &gt; 属性 &gt; 安全选项卡中的那些权限配置）推断出该文件对应的的 Linux 文件权限。</p>

<p>所有 Win­dows 盘符挂载至 WSL 下的 /mnt 时都是使用的 DrvFs 文件系统。</p>

<p>简单来说就是 WSL 对 / 目录下的文件拥有完整的控制权，而 /mnt 目录中的文件无法被 WSL 完全控制（可修改数据，无法真实的修改权限）。WSL 对 /mnt 目录中权限的修改不会直接记录到文件本身，而在 Win­dows 下对文件权限的修改直接可作用到 WSL 。关于权限在<a href="https://p3terx.com/go/aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL2NvbW1hbmRsaW5lL2NobW9kLWNob3duLXdzbC1pbXByb3ZlbWVudHMv">微软开发者博客中</a>有更详细的说明。</p>

<h3 id="section-1">解决方案</h3>

<p>这只是让文件在 WSL 中的权限看起来正常（目录 755，文件 644），实际并不会作用到 Win­dows 文件系统下的文件本身。</p>

<p>在 /etc/wsl.conf 中添加以下配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[automount]
</span><span class="line">enabled = true
</span><span class="line">root = /mnt/
</span><span class="line">options = "metadata,umask=22,fmask=111"
</span><span class="line">mountFsTab = true</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的方法对所有盘符都有效，如果你想在 WSL 中调用 Win­dows 下的应用程序（比如 explorer.exe . 调用资源管理器打开当前路径）就需要对 C 盘进行单独设置，否则会提示没有权限。首先确认 wsl.conf 中的 mountFsTab 没有被设置为 false，然后编辑 /etc/fstab，添加如下内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">C:\ /mnt/c drvfs rw,noatime,uid=1000,gid=1000,metadata,umask=22,fmask=11 0 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时执行<code>mkdir</code>等命令的时候，会发现新建的目录权限依然是 777。</p>

<p>目前民间解决方案是在.profile、.bashrc、.zshrc 或者其他 shell 配置文件中添加如下命令，重新设置 umask</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[filesystem]
</span><span class="line">umask = 022</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>全部设置完成之后，最好重启一遍Windows系统。</p>

<h4 id="section-2">参考:</h4>

<p>https://segmentfault.com/a/1190000016677670</p>

<p>https://p3terx.com/archives/problems-and-solutions-encountered-in-wsl-use-2.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Should You Do if Windows 10 Freezes Randomly]]></title>
    <link href="https://happy123.me/blog/2019/11/13/what-should-you-do-if-windows-10-freezes-randomly/"/>
    <updated>2019-11-13T11:45:32+08:00</updated>
    <id>https://happy123.me/blog/2019/11/13/what-should-you-do-if-windows-10-freezes-randomly</id>
    <content type="html"><![CDATA[<p>是的，作为一名码农，日常最主要的工作就是修电脑；</p>

<p>有一台装Win10的Thinkpad T440 笔记本会随机冻结，表现就是所有操作没有反应，鼠标键盘没有响应，画面不动，然后等待1分钟后自我恢复； 每天随机发生&gt;5次；</p>

<!-- more -->

<p>在Google了N多<code>What Should You Do If Windows 10 Freezes Randomly</code>的帖子之后，发现有这个问题的人可以组成一个军团，可谓是苦大仇深；</p>

<p>至少这下面所有的方法我都试了一遍：</p>

<p>https://www.partitionwizard.com/partitionmagic/win10-freezes-randomly.html</p>

<p>最后无奈之下挂载winGDB，是的，就是这么无聊，追到了Chrome里面；</p>

<p>我发现，只要关闭Chrome的 “设置-&gt;高级-&gt;使用硬件加速模式”，问题概率就会大大降低；</p>

<p>这是什么原理，一番探究后，我发现这台笔记本是自动切换核显和独立显卡的；而Intel核显有个选项： “Intel Graphics Control Panel -&gt; Energy management -&gt; Panel Self Refresh”关闭之后就OK了；</p>

<p>好吧，归根到底还是驱动的问题；Intel的这个显卡其实官方没有支持Win10的驱动，这是Win10自己瞎支持的，出现问题再所难免；</p>

<p>以后遇到Win10冻结的情况，你的检查清单上还需要多加两项：</p>

<ol>
  <li>
    <p>Chrome的硬件加速关闭试一试</p>
  </li>
  <li>
    <p>如果有Intel的核显，关闭<code>Panel Self Refresh</code>试一试</p>
  </li>
</ol>

<blockquote>
  <p>Apparently, disabling Panel Self Refresh (PSR) in the Intel HD Graphics Control Panel application fixed the issue.
On Lenovo notebook right click on desktop -&gt; Intel Graphics Control Panel -&gt; Energy management -&gt; Panel Self Refresh -&gt; set to Disabled.
I also set the display to max performance, but I don’t think this is relevant.
Once disabled, I’ve no more experienced any freeze for several days.</p>
</blockquote>

<p>参考：</p>

<p>https://forums.lenovo.com/t5/ThinkPad-X-Series-Laptops/X270-generic-freeze/td-p/3927475/page/5</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FRP内网穿透]]></title>
    <link href="https://happy123.me/blog/2019/11/11/frpnei-wang-chuan-tou/"/>
    <updated>2019-11-11T10:45:34+08:00</updated>
    <id>https://happy123.me/blog/2019/11/11/frpnei-wang-chuan-tou</id>
    <content type="html"><![CDATA[<p>对于没有公网 IP 的内网用户来说，远程管理或在外网访问内网机器上的服务是一个问题。之前一直用最简单的nc做反代，折腾了几次之后迁移到FRP上面了；记录一下ABC;</p>

<!-- more -->

<p>内网穿透工具 FRP，FRP 全名：Fast Reverse Proxy。</p>

<p>项目地址: https://github.com/fatedier/frp</p>

<h4 id="frp-">FRP 的作用</h4>

<ul>
  <li>
    <p>利用处于内网或防火墙后的机器，对外网环境提供 HTTP 或 HTTPS 服务。</p>
  </li>
  <li>
    <p>对于 HTTP, HTTPS 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 80 端口。</p>
  </li>
  <li>
    <p>利用处于内网或防火墙后的机器，对外网环境提供 TCP 和 UDP 服务，例如在家里通过 SSH 访问处于公司内网环境内的主机。</p>
  </li>
</ul>

<h4 id="frp--1">FRP 安装</h4>
<p>FRP 采用 Go 语言开发，支持 Windows、Linux、MacOS、ARM等多平台部署。FRP 安装非常容易，只需下载对应系统平台的软件包，并解压就可用。</p>

<p>这里以 Linux 为例，为了方便管理我们把解压后的目录重命名为 frp ：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> wget https://github.com/fatedier/frp/releases/download/v0.29.1/frp_0.29.1_linux_amd64.tar.gz
</span><span class="line"> tar xzvf frp_0.29.1_linux_amd64.tar.gz
</span><span class="line"> mv frp_0.29.1_linux_amd64 frp
</span><span class="line"> cp frp/frpc frp/frps /usr/bin/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="frp">FRP服务端配置</h4>

<ul>
  <li>首先建立配置文件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir /etc/frp
</span><span class="line">vim /etc/frp/frps.ini</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是模板，根据修改一下token，dashboard_user, dashboard_pwd，默认开了6000端口作为对外ssh端口， 7000作为frpc和frps通讯端口，7500端口作为web管理界面端口；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># [common] is integral section
</span><span class="line">[common]
</span><span class="line"># A literal address or host name for IPv6 must be enclosed
</span><span class="line"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"
</span><span class="line">bind_addr = 0.0.0.0
</span><span class="line">bind_port = 7000
</span><span class="line">
</span><span class="line"># udp port to help make udp hole to penetrate nat
</span><span class="line">bind_udp_port = 7001
</span><span class="line">
</span><span class="line"># udp port used for kcp protocol, it can be same with 'bind_port'
</span><span class="line"># if not set, kcp is disabled in frps
</span><span class="line">kcp_bind_port = 7000
</span><span class="line">
</span><span class="line"># specify which address proxy will listen for, default value is same with bind_addr
</span><span class="line"># proxy_bind_addr = 127.0.0.1
</span><span class="line">
</span><span class="line"># if you want to support virtual host, you must set the http port for listening (optional)
</span><span class="line"># Note: http port and https port can be same with bind_port
</span><span class="line">vhost_http_port = 80
</span><span class="line">vhost_https_port = 443
</span><span class="line">
</span><span class="line"># response header timeout(seconds) for vhost http server, default is 60s
</span><span class="line"># vhost_http_timeout = 60
</span><span class="line">
</span><span class="line"># set dashboard_addr and dashboard_port to view dashboard of frps
</span><span class="line"># dashboard_addr's default value is same with bind_addr
</span><span class="line"># dashboard is available only if dashboard_port is set
</span><span class="line">dashboard_addr = 0.0.0.0
</span><span class="line">dashboard_port = 7500
</span><span class="line">
</span><span class="line"># dashboard user and passwd for basic auth protect, if not set, both default value is admin
</span><span class="line">dashboard_user = user
</span><span class="line">dashboard_pwd = user
</span><span class="line">
</span><span class="line"># dashboard assets directory(only for debug mode)
</span><span class="line"># assets_dir = ./static
</span><span class="line"># console or real logFile path like ./frps.log
</span><span class="line">log_file = /var/log/frps.log
</span><span class="line">
</span><span class="line"># trace, debug, info, warn, error
</span><span class="line">log_level = info
</span><span class="line">
</span><span class="line">log_max_days = 3
</span><span class="line">
</span><span class="line"># disable log colors when log_file is console, default is false
</span><span class="line">disable_log_color = false
</span><span class="line">
</span><span class="line"># auth token
</span><span class="line">token = 123456frp
</span><span class="line">
</span><span class="line"># heartbeat configure, it's not recommended to modify the default value
</span><span class="line"># the default value of heartbeat_timeout is 90
</span><span class="line"># heartbeat_timeout = 90
</span><span class="line">
</span><span class="line"># only allow frpc to bind ports you list, if you set nothing, there won't be any limit
</span><span class="line">#allow_ports = 2000-3000,3001,3003,4000-50000
</span><span class="line">allow_ports = 80,6000,8080,18332,18333,28332,28333,60000-60010
</span><span class="line">
</span><span class="line"># pool_count in each proxy will change to max_pool_count if they exceed the maximum value
</span><span class="line">max_pool_count = 5
</span><span class="line">
</span><span class="line"># if subdomain_host is not empty, you can set subdomain when type is http or https in frpc's configure file
</span><span class="line"># when subdomain is test, the host used by routing is test.frps.com
</span><span class="line">subdomain_host = frps.com
</span><span class="line">
</span><span class="line"># if tcp stream multiplexing is used, default is true
</span><span class="line">tcp_mux = true
</span><span class="line">
</span><span class="line"># custom 404 page for HTTP requests
</span><span class="line"># custom_404_page = /path/to/404.html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>再建立systemd 启动脚本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /lib/systemd/system/frps.service
</span><span class="line">
</span><span class="line">[Unit]
</span><span class="line">Description=Frp Server Service
</span><span class="line">After=network.target
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">Type=simple
</span><span class="line">User=root
</span><span class="line">Restart=on-failure
</span><span class="line">RestartSec=5s
</span><span class="line">ExecStart=/usr/bin/frps -c /etc/frp/frps.ini
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动服务，再设置为开机启动</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl start frps
</span><span class="line">systemctl enable frps</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="frp-1">FRP客户端配置</h4>

<ul>
  <li>首先建立配置文件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir /etc/frp
</span><span class="line">vim /etc/frp/frpc.ini</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是模板，根据修改server_addr、admin_user, admin_pwd字段; token要设置的跟服务端的token相同；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># [common] is integral section
</span><span class="line">[common]
</span><span class="line"># A literal address or host name for IPv6 must be enclosed
</span><span class="line"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"
</span><span class="line">server_addr = x.x.x.x
</span><span class="line">server_port = 7000
</span><span class="line">
</span><span class="line"># if you want to connect frps by http proxy or socks5 proxy, you can set http_proxy here or in global environment variables
</span><span class="line"># it only works when protocol is tcp
</span><span class="line"># http_proxy = http://user:passwd@192.168.1.128:8080
</span><span class="line"># http_proxy = socks5://user:passwd@192.168.1.128:1080
</span><span class="line">
</span><span class="line"># console or real logFile path like ./frpc.log
</span><span class="line">log_file = /var/log/frpc.log
</span><span class="line">
</span><span class="line"># trace, debug, info, warn, error
</span><span class="line">log_level = info
</span><span class="line">
</span><span class="line">log_max_days = 3
</span><span class="line">
</span><span class="line"># disable log colors when log_file is console, default is false
</span><span class="line">disable_log_color = false
</span><span class="line">
</span><span class="line"># for authentication
</span><span class="line">token = 123456frp
</span><span class="line">
</span><span class="line"># set admin address for control frpc's action by http api such as reload
</span><span class="line">admin_addr = 127.0.0.1
</span><span class="line">admin_port = 7400
</span><span class="line">admin_user = user
</span><span class="line">admin_pwd = user
</span><span class="line"># Admin assets directory. By default, these assets are bundled with frpc.
</span><span class="line"># assets_dir = ./static
</span><span class="line">
</span><span class="line"># connections will be established in advance, default value is zero
</span><span class="line">pool_count = 5
</span><span class="line">
</span><span class="line"># if tcp stream multiplexing is used, default is true, it must be same with frps
</span><span class="line">tcp_mux = true
</span><span class="line">
</span><span class="line"># your proxy name will be changed to {user}.{proxy}
</span><span class="line">user = brainzhang.bitcoin.testnet
</span><span class="line">
</span><span class="line"># decide if exit program when first login failed, otherwise continuous relogin to frps
</span><span class="line"># default is true
</span><span class="line">login_fail_exit = true
</span><span class="line">
</span><span class="line"># communication protocol used to connect to server
</span><span class="line"># now it supports tcp and kcp and websocket, default is tcp
</span><span class="line">protocol = tcp
</span><span class="line">
</span><span class="line"># if tls_enable is true, frpc will connect frps by tls
</span><span class="line">tls_enable = true
</span><span class="line">
</span><span class="line"># specify a dns server, so frpc will use this instead of default one
</span><span class="line"># dns_server = 8.8.8.8
</span><span class="line">
</span><span class="line"># proxy names you want to start seperated by ','
</span><span class="line"># default is empty, means all proxies
</span><span class="line"># start = ssh,dns
</span><span class="line">
</span><span class="line"># heartbeat configure, it's not recommended to modify the default value
</span><span class="line"># the default value of heartbeat_interval is 10 and heartbeat_timeout is 90
</span><span class="line"># heartbeat_interval = 30
</span><span class="line"># heartbeat_timeout = 90
</span><span class="line">
</span><span class="line"># 'ssh' is the unique proxy name
</span><span class="line"># if user in [common] section is not empty, it will be changed to {user}.{proxy} such as 'your_name.ssh'
</span><span class="line">[ssh]
</span><span class="line"># tcp | udp | http | https | stcp | xtcp, default is tcp
</span><span class="line">type = tcp
</span><span class="line">local_ip = 127.0.0.1
</span><span class="line">local_port = 22
</span><span class="line"># true or false, if true, messages between frps and frpc will be encrypted, default is false
</span><span class="line">use_encryption = false
</span><span class="line"># if true, message will be compressed
</span><span class="line">use_compression = true
</span><span class="line"># remote port listen by frps
</span><span class="line">remote_port = 6000
</span><span class="line"># frps will load balancing connections for proxies in same group
</span><span class="line">#group = test_group
</span><span class="line">## group should have same group key
</span><span class="line">#group_key = 123456
</span><span class="line">## enable health check for the backend service, it support 'tcp' and 'http' now
</span><span class="line">## frpc will connect local service's port to detect it's healthy status
</span><span class="line">#health_check_type = tcp
</span><span class="line">## health check connection timeout
</span><span class="line">#health_check_timeout_s = 3
</span><span class="line">## if continuous failed in 3 times, the proxy will be removed from frps
</span><span class="line">#health_check_max_failed = 3
</span><span class="line">## every 10 seconds will do a health check
</span><span class="line">#health_check_interval_s = 10
</span><span class="line">
</span><span class="line">#[ssh_random]
</span><span class="line">#type = tcp
</span><span class="line">#local_ip = 127.0.0.1
</span><span class="line">#local_port = 22
</span><span class="line">## if remote_port is 0, frps will assign a random port for you
</span><span class="line">#remote_port = 0
</span><span class="line">
</span><span class="line"># if you want to expose multiple ports, add 'range:' prefix to the section name
</span><span class="line"># frpc will generate multiple proxies such as 'tcp_port_6010', 'tcp_port_6011' and so on.
</span><span class="line">[range:tcp_port]
</span><span class="line">type = tcp
</span><span class="line">local_ip = 127.0.0.1
</span><span class="line">#local_port = 6010-6020,6022,6024-6028,
</span><span class="line">#remote_port = 6010-6020,6022,6024-6028
</span><span class="line">local_port = 8080,18332,18333,28332,28333,60000-60010
</span><span class="line">remote_port = 8080,18332,18333,28332,28333,60000-60010
</span><span class="line">use_encryption = false
</span><span class="line">use_compression = false
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>再建立systemd 启动脚本</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /lib/systemd/system/frpc.service
</span><span class="line">
</span><span class="line">[Unit]
</span><span class="line">Description=Frp Client Service
</span><span class="line">After=network.target
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">Type=simple
</span><span class="line">User=root
</span><span class="line">Restart=on-failure
</span><span class="line">RestartSec=5s
</span><span class="line">ExecStart=/usr/bin/frpc -c /etc/frp/frpc.ini
</span><span class="line">ExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.ini
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动服务，再设置为开机启动</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl start frpc
</span><span class="line">systemctl enable frpc</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section">测试</h4>

<p>现在可以从外网通过 frps服务端的ip(比如x.x.x.x)中转，访问内网了；比如ssh:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh -oPort=6000 root@x.x.x.x</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也可以直接用一条scp命令直接通过跳板机拷贝文件到内网机器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">scp -P 6000 -r xxx root@xxxxxxx:/opt/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样的，如果内网开通了某些服务，比如我们的配置模板里面已经映射出了8080,18332,18333,28332,28333,60000-60010这些端口，这些端口同样的映射到服务端了；</p>

<p>比如，我们在内网运行一个简单的web服务:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">python -m SimpleHTTPServer 8080</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以通过frps服务端的ip(比如x.x.x.x)访问这个服务：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl http://x.x.x.x:8080</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们也可以在内网运行一个bitcoin全节点+lnd，然后关闭不必要的服务，再运行一个轻量的vps，在vps上部署Tor服务，这样我们就可以通过多重跳板把闪电网络热钱包隐藏到Tor网络里面了，保证了安全性；</p>

<h4 id="section-1">管理</h4>

<p>可以通过下面的地址进入web管理界面，用户名和密码就是frps.ini中配置的dashboard_user、dashboard_pwd；</p>

<p>http://x.x.x.x:7500</p>

<h4 id="section-2">扩展</h4>

<p>FRP还有非常多的功能，比如虚拟主机、多路复用、负载均衡、点对点内网穿透等等，请参考官方文档：</p>

<p>https://github.com/fatedier/frp/blob/master/README_zh.md</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Lightning Network -1]]></title>
    <link href="https://happy123.me/blog/2019/11/05/hello-lightning-network-1/"/>
    <updated>2019-11-05T17:17:48+08:00</updated>
    <id>https://happy123.me/blog/2019/11/05/hello-lightning-network-1</id>
    <content type="html"><![CDATA[<p class="info">有许多比特币社区的先行者们面对小白的提问时，总是真诚的说：“去看看比特币的白皮书吧，把它真正弄明白吧，你就会理解一切的。” —–如今，我想对许多质疑闪电网络的比特币先驱们说：“去看看闪电网络的白皮书吧，把它真正弄明白吧，你就会理解一切的。”</p>

<p>我们之前写文章评价道，闪电网络是次世代的支付技术，它不仅仅是一个支付技术，更是建立在比特币主网上的二层网络协议，将来会有许许多多新奇的应用建立在上面，它会为比特币开启下一个十年；</p>

<p>但是闪电网络还在实现的早期阶段，能耐心去读懂它的白皮书的人已经非常少了，更不用提现在飞速发展的<a href="https://github.com/lightningnetwork/lightning-rfc/">BOLT规范</a>了；这其实跟比特币刚诞生时是一样的，在动辄就大谈“区块链技术改变未来”的那一群人中，有几人会真正花时间，去把已经发表11年的比特币8页白皮书弄个明白呢？</p>

<p>闪电网络的基本原理其实非常简单，在我们之前的文章中已经花费了大量篇幅去介绍；但是在实现过程中，还有数不清的工程细节上的权衡；由于现在的实现还只是一个雏形，我们实操闪电网络交易的时候会有各种各样的“？”，我打算写一个系列文章，把一些有趣或者让人困惑的地方抽丝剥茧，记录一下自己的学习过程，也把这项迷人的技术介绍给更多人。</p>

<p>我们将在这篇文章中讨论闪电网络的通道入站容量(Inbound Capacity)问题。</p>

<!-- more -->

<p>凡是亲身体验闪电网络钱包的人，都是这样一个过程:</p>

<ol>
  <li>发送小额的比特币给钱包链上地址</li>
  <li>连接到一个闪电网络节点，创建一个通道，并放置一些币到通道中；</li>
  <li>通过闪电网络发送一笔支付交易</li>
</ol>

<p>到目前为止，一切顺利(当然，对于技术小白来讲，这三个步骤已经足够艰辛了)；然后他会立即遇到闪电网络中第一个令人困惑的问题：</p>

<ul>
  <li>我如何收款？</li>
</ul>

<p>在解决这个问题之前，我们需要复习一些基础知识；你会惊奇的发现，我们前文所说的<code>工程上的细节</code>到底是多么细节的东西；</p>

<h4 id="local-balance-and-remote-balance">本地余额与远程余额 (local balance and remote balance)</h4>

<p>当我们初次建立一个支付通道时，用<code>lncli listchannels</code>探测，一般必要信息是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class=""><span class="line">    {
</span><span class="line">        "active": true,
</span><span class="line">        "remote_pubkey": "xxxxxxxxxx",
</span><span class="line">        "channel_point": "zzzzzzzzzz:0",
</span><span class="line">        "chan_id": "17405554940800000000",
</span><span class="line">        "capacity": "279359",
</span><span class="line">        "local_balance": "279176",
</span><span class="line">        "remote_balance": "0",
</span><span class="line">        "commit_fee": "183",
</span><span class="line">        "commit_weight": "600",
</span><span class="line">        "fee_per_kw": "253",
</span><span class="line">        "unsettled_balance": "0",
</span><span class="line">        "total_satoshis_sent": "0",
</span><span class="line">        "total_satoshis_received": "0",
</span><span class="line">        "num_updates": "48",
</span><span class="line">        "pending_htlcs": [
</span><span class="line">        ],
</span><span class="line">        "csv_delay": 144,
</span><span class="line">        "private": false,
</span><span class="line">        "initiator": true,
</span><span class="line">        "chan_status_flags": "ChanStatusDefault",
</span><span class="line">        "local_chan_reserve_sat": "2793",
</span><span class="line">        "remote_chan_reserve_sat": "2793",
</span><span class="line">        "static_remote_key": false
</span><span class="line">    },</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们先来关注一下 <code>local_balance</code>和<code>remote_balance</code>这两个参数；</p>

<p>如果还记得我们之前的<a href="https://happy123.me/blog/2019/01/06/bi-te-bi-de-jiao-yi-7/">科普文章</a>的话；构建闪电通道的第一个步骤是建立一笔Funding TX；
这需要双方拿出一定量的比特币放入通道中，这样就会有固定数量的比特币被锁定到通道中，称为通道容量(capacity); 通道发起方投入的金额称为本地余额(local_balance)，对端投入的金额称为远程余额(remote_balance)；</p>

<p>在上面这个例子中，我们看到作为通道发起方，local_balance是279176 satoshi，remote_balance是0，代表对端仅仅是跟我们建立通道链接，并没有放币进来；</p>

<p>local_balance和remote_balance可以在不关闭通道的情况下多次更新，但是如果不关闭或者拼接通道，通道容量无法更改；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg0.png" alt="img" /></p>

<blockquote>
  <p>我们可以把它想象成一个沙漏，虽然沙子的总量是固定的，但是我们可以在沙漏的上下部之间移动啥子，如果想要改变沙子的总量，就需要打破沙漏；</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg1.png" alt="img" /></p>

<blockquote>
  <p>如图：以你的视角来看，你和ROBERT的通道容量是8 btc, local_balance是5btc，remote_balance是3btc; 以ROBERT的视角来看，他的local_balance是3btc，remote_balance是5btc</p>
</blockquote>

<p>每次你付款时，都会把local_balance的部分余额推给对端的ROBERT。 同样的，当收到一笔付款时，local_balance也会增加，remote_balance会减少；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg2.png" alt="img" /></p>

<blockquote>
  <p>如图：当你支付ROBERT 1BTC时，你的local_balance减少1BTC，而remote_balance增加1BTC;</p>
</blockquote>

<p>回到我们最初的例子，因为remote_balance的余额是0 satoshi，所以在只有这一个通道的情况下，你最多发送279176 satoshi，却无法接受付款；</p>

<p>可能聪明的你已经想到了，作为主动发起通道连接的一方，在通道中放入资金是天经地义的，但是对方却没有义务配合你放入资金；为了能获得remote_balance，你需要给对方一点好处才行，目前请求remote_balance的通道连接已经变成了一种服务，你需要<code>购买</code>这样的服务，以便在建立支付通道的时候能有remote_balance余额；</p>

<p>比如这个服务商：</p>

<p>https://yalls.org/about/</p>

<p>那么，购买这种服务，保证自己的支付通道中拥有remote_balance，有什么作用呢？为什么我们收款必须要依赖于它呢？</p>

<h4 id="inbound-and-outbound-capacity">进出容量(Inbound and Outbound Capacity)</h4>

<p>现在，我们已经更清楚的了解了是什么决定了通道的容量以及local_balance和remote_balance 平衡更新的方式，接下来我们考虑一下，如果你是连接节点网络的一部分，会发生什么情况？</p>

<p>两个对等点不需要直接建立支付通道来互相支付。相反，他们可以通过路由节点中转支付。在路由的每一跳，都会发生对应通道内local_balance和remote_balance余额的更新。</p>

<p>假设你想要通过闪电网络出售一个披萨。你至少需要连接到一个闪电网络节点。你会仔细的选择人气尽可能高的节点，为你的顾客–SOPHIE和ANGELA提供收款服务；</p>

<p>这个时候的闪电网络拓扑是这样的：</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg3.png" alt="img" /></p>

<blockquote>
  <p>你打开了一个连接到LNTOP的支付通道，并在其中放入2个BTC，你的local_balance是2BTC，remote_balance为0BTC</p>
</blockquote>

<p>现在，ANGELA想要买个披萨，并通过LNTOP支付给你。但是，你与LNTOP的支付通道里，remote_balance为0，所以LNTOP无法付款给你；</p>

<p>在某个特定时刻，你可以接收到的金额或者入站容量(Inbound Capacity)受到remote_balance的限制。你不能收到比你的邻接节点能发送给你的更多的金额。</p>

<p>类似的，你可以发送的金额，或者说出站容量(Outbound Capacity)也同样受到local_balance的限制。</p>

<p>当你用LNTOP打开一个通道时，你决定想要锁定多少比特币，即你的local_balance；类似的，如果LNTOP与你打开一个通道，他们将确定你的初始remote_balance。这具有重要意义。虽然选择local_balance允许你决定初始Outbound Capacity，但你无法控制remote_balance和Inbound Capacity。</p>

<p>如果你今天启动你的闪电节点，并简单的打开一个通道到你选择的另一个节点，你可能会惊奇的发现，自己没有Inbound Capacity，从而无法通过闪电网络接收付款；这对于一个商家来说绝对是大问题；</p>

<p>幸运的是，有好几种方法来获得Inboound Capacity，包括上面提到的，花钱给一些商家，让他们来为你提供一些remote_balance；</p>

<p>…TODO  方法待另一篇文章介绍</p>

<h4 id="section">这样就解决问题了吗？</h4>

<p>嗯……，当然不会这么简单……在一个复杂的网络中，即使你在直接相连的通道中有足够的remote_balance，但你不能保证支付路径上的每一个节点都有充足的remote_balance； 让我们揭示网络中所有节点的local_balance和remote_balance，来更好的理解资金如何流动。</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg4.png" alt="img" /></p>

<blockquote>
  <p>如图: LNTOP是一个大的中转节点，与他相邻的每个节点都有LNTOP提供的remote_balance</p>
</blockquote>

<p>这样你与LNTOP的支付通道中，你的remote_balance为3BTC， 而LNTOP与ANGELA的支付渠道中，LNTOP的remote_balance为2BTC，这样ANGELA最多能发送给你2BTC；</p>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20191106/bg5.gif" alt="img" /></p>

<blockquote>
  <p>如图：ANGELA为你发送了1BTC</p>
</blockquote>

<p>但是在这个网络中，SOPHIE甚至不能发送1BTC给你。如果你看一下SOPHIE和你之间的支付路线，就会发现LNTOP没有接收SOPHIE付款的能力；</p>

<p>对于收款，要求每个路由节点与你(接收方)之间都需要与前一个相邻的节点具有足够的Inbound Capacity；因此，即使你可能通过相邻节点获得了Inbound Capacity，但是整个支付路径上的某些节点可能并没有足够的Inbound Capacity；这样你仍然不能完成收款；</p>

<p>最致命的一点是，这种”显示所有节点的remote_balance和local_balance”的事情在闪电网络中是做不到的；作为网络的一个节点，我们只能知道其他支付通道的容量，而不知道它是如何在相连的两个节点之间分配资金的；</p>

<h4 id="section-1">谁会受影响</h4>

<p>在闪电网络中，并不是所有的节点都有同等的需求。查看我们的示例，全网至少会有三种类型的节点：</p>

<h5 id="section-2">商人节点</h5>

<p>商人节点主要需求是收款，因此，他需要Inbound Capacity，并且从客户到商人节点之间的支付路径上每一个节点，都要有足够的Inbound Capacity;</p>

<h5 id="section-3">用户节点</h5>

<p>用户主要通过闪电网络发送资金，偶尔也会从朋友那里收到一些钱； 对于这些用户，他们的关键是要连接到的节点具有足够的资金能路由给商家；这些用户需要保有少量的remote_balance即可；</p>

<h5 id="section-4">路由节点</h5>

<p>这些节点通过网络路由支付并为此收费。LNTOP就是这样的例子；</p>

<p>他们的工作是探测可用的支付路径。所以他们需要上游与终端用户的Inbound Capacity，以及下游与商家的Outbound Capacity；此外，它们的收费必须与市场上其他的公司竞争，他们还需要确保可靠性、充裕的流动性；这是一项艰难的工作，不是吗？</p>

<p>有很多攻击闪电网络的言论是：只有那些资金充裕的大公司才能有足够的精力和财力运行路由节点，根据马太效应，用户也会倾向于选择这些公司运营的节点服务；这样就会慢慢造成寡头垄断，最终比特币变成一个中心化的东西，变成一个大公司的玩物；</p>

<p>真的是这样的吗？</p>

<h4 id="section-5">结论</h4>

<p>我们讨论了一个支付通道具有的特性，其通道容量、local_balance、remote_balance、Inbound Capacity, Outbound Capacity； 我们看到，闪电网络是一个丰富的生态，将来里面会有各种各样的角色参与其中；目前来看，如何注入足够Inbound Capacity，保持闪电网络有充裕的流动性似乎是个棘手问题；而且不少人攻击这最终会导致比特币运营中心化；</p>

<p>但我得说，这些批评者过于心急了；就像比特币诞生初期，很多传统的经济学家批评比特币的<code>通缩</code>特性一样；</p>

<p>为了解决这些问题，社区以一个惊人的创新速度不断提出解决方法，包括WIP、Lightning Loop、多路径余额合并平衡等等；我们也将会在后面的文章中一一介绍；</p>

<p>最后，数字货币世界还是处于蛮荒狂野时代，不是那么多事情都是理所当然的; 每个人的言论都需要批判吸收； </p>

<p>乔帮主的训诫还是需要时时温习：饥渴求知，虚怀若愚(Stay Hungry, Stay Foolish)</p>

<h4 id="section-6">引用</h4>

<p>https://blog.muun.com/the-inbound-capacity-problem-in-the-lightning-network/</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run Tmux Service Scripts on Ubuntu Start Up]]></title>
    <link href="https://happy123.me/blog/2019/10/30/how-to-run-tmux-service-scripts-on-ubuntu-start-up/"/>
    <updated>2019-10-30T10:11:38+08:00</updated>
    <id>https://happy123.me/blog/2019/10/30/how-to-run-tmux-service-scripts-on-ubuntu-start-up</id>
    <content type="html"><![CDATA[<p>是的，做了无数遍还是不长记性，昨天又在这上面踩坑了；在ubuntu上写的启动脚本不执行，仅仅是可执行权限和用户权限的问题，又浪费了一上午；</p>

<!-- more -->

<p>在unbuntu启动时自动做一些工作，最佳实践是：</p>

<h4 id="section">你想要执行一个服务</h4>

<ul>
  <li>如果是比较老的ubuntu (version&lt;=14.04LTS);</li>
</ul>

<p>这个时候你需要利用ubuntu的<a href="http://upstart.ubuntu.com/">upstart机制</a></p>

<p>简单说来，就是将一个这样的脚本:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">start on startup
</span><span class="line">task
</span><span class="line">exec /path/to/command</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>存为taskxxx.conf文件，放到/etc/init 目录下面(这将会在开机时用root用户权限启动)；</p>

<p>或者存为 ~/.config/upstart(这将会在开机时用当前用户权限启动)</p>

<ul>
  <li>如果你是比较现代的ubuntu (version&gt;=16.04LTS)</li>
</ul>

<p>你需要利用 <a href="https://github.com/systemd/systemd">systemd</a> 服务，这个我们之前写文章科普过：</p>

<p>https://happy123.me/blog/2016/08/22/how-to-write-standard-startup-script/</p>

<h4 id="section-1">仅仅想执行一条简单的命令</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo nano /etc/rc.local</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>加入执行的命令，不要忘了最后加exit</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/opt/tmux.sh
</span><span class="line">exit 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>增加可执行权限</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo chmod +x /etc/rc.local</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意：</p>

<ul>
  <li>要有可执行权限，这个最容易踩坑，ubuntu安装完毕 /etc/rc.local 是没有可执行权限的</li>
  <li>注意执行命令的ENV变量，不确定的时候要在命令签名设定SHELL ENV Variable</li>
  <li>如果是执行一个脚本，注意脚本命令调用的shell (bash or sh or zsh)，以及ENV Variable</li>
  <li>注意执行脚本、执行命令的用户</li>
</ul>

<h4 id="section-2">如果是修改一个环境变量</h4>

<p>修改当前用户:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nano ~/.bashrc</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所有用户生效:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nano ~/etc/profile</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">最后，附赠最简单粗暴的开机执行任务方式</h4>

<p>就是在/etc/rc.local 里面启动一个tmux session，在里面执行想要运行的命令；简单粗暴有效</p>

<p>来个模板:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash
</span><span class="line"># description "Start Tmux"
</span><span class="line">
</span><span class="line"># Sleep for 5 seconds. If you are starting more than one tmux session
</span><span class="line">#   "at the same time", then make sure they all sleep for different periods
</span><span class="line">#   or you can experience problems
</span><span class="line">/bin/sleep 5
</span><span class="line"># Ensure the environment is available
</span><span class="line">source ~/.bashrc
</span><span class="line"># Create a new tmux session named newscrawler..
</span><span class="line">/usr/bin/tmux new-session -d -s bitcoin
</span><span class="line"># ...and control the tmux session (initially ensure the environment
</span><span class="line">#   is available, then run commands)
</span><span class="line">
</span><span class="line"># /usr/bin/tmux send-keys -t bitcoincash:0 "source ~/.bashrc" C-m
</span><span class="line">tmux new-window -n console -t bitcoin
</span><span class="line">/bin/sleep 3
</span><span class="line">/usr/bin/tmux send-keys -t bitcoin:0 "cd /opt/bitcoin &amp;&amp; ./startbitcoind.sh" C-m
</span><span class="line">/bin/sleep 3
</span><span class="line">/usr/bin/tmux send-keys -t bitcoin:1 "cd /opt/bitcoin &amp;&amp; ./checkwallet start" C-m
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吴恩达机器学习笔记-5]]></title>
    <link href="https://happy123.me/blog/2019/09/22/wu-en-da-ji-qi-xue-xi-bi-ji-5/"/>
    <updated>2019-09-22T18:01:34+08:00</updated>
    <id>https://happy123.me/blog/2019/09/22/wu-en-da-ji-qi-xue-xi-bi-ji-5</id>
    <content type="html"><![CDATA[<p class="info">降维，异常检测，推荐系统，大规模机器学习</p>

<!-- more -->

<h2 id="section">数据压缩</h2>

<h4 id="section-1">降维问题</h4>

<p>假设我们未知两个的特征： 𝑥1 :长度, 用厘米表示； 𝑥2：是用英寸表示同一物体的长度。</p>

<p>这给了我们高度冗余表示，也许不是两个分开的特征  𝑥1  和  𝑥2 ，这两个基本的长度度量，我们可以减少数据到一维。</p>

<p>假使我们有有关于许多不同国家的数据，每一个特征向量都有 50 个特征（如，GDP，人均GDP，平均寿命等）。如果要将这个 50 维的数据可视化是不可能的。使用降维的方法将其降至 2 维，我们便可以将其可视化了。</p>

<h4 id="pca-">PCA 降维算法</h4>

<p>在 PCA 中，我们要做的是找到一个方向向量（Vector direction），
当我们把所有的数据都投射到该向量上时，我们希望投射平均均方误差能尽可能地小。
方向向量是一个经过原点的向量，而投射误差是从特征向量向该方向向量作垂线的长度。</p>

<p>主成分分析与线性回归是两种不同的算法。
主成分分析最小化的是投射误差（Projected Error），而线性回归尝试的是最小化预测误差。
线性回归的目的是预测结果，而主成分分析不作任何预测。</p>

<p>过程：</p>

<ol>
  <li>均值归一化 (mean normalization)。计算出所有特征的均值，然后令 𝑥𝑗=𝑥𝑗−𝜇𝑗 。如果特征是在不同的数量级上，我们还需要将其除以标准差  𝜎2 。</li>
  <li>计算协方差矩阵（covariance matrix）Σ：</li>
  <li>是计算协方差矩阵 Σ 的特征向量（eigenvectors）: 可以利用奇异值分解（singular value decomposition 理解 SVD）来求解，[U, S, V]= svd(Σ)。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">
</span><span class="line">def covariance_matrix(X):
</span><span class="line">    """
</span><span class="line">    Args:
</span><span class="line">        X (ndarray) (m, n)
</span><span class="line">    Return:
</span><span class="line">        cov_mat (ndarray) (n, n):
</span><span class="line">            covariance matrix of X
</span><span class="line">    """
</span><span class="line">    m = X.shape[0]
</span><span class="line">
</span><span class="line">    return (X.T @ X) / m
</span><span class="line">
</span><span class="line">
</span><span class="line">def normalize(X):
</span><span class="line">    """
</span><span class="line">        for each column, X-mean / std
</span><span class="line">    """
</span><span class="line">    X_copy = X.copy()
</span><span class="line">    m, n = X_copy.shape
</span><span class="line">
</span><span class="line">    for col in range(n):
</span><span class="line">        X_copy[:, col] = (X_copy[:, col] - X_copy[:, col].mean()) / X_copy[:, col].std()
</span><span class="line">
</span><span class="line">    return X_copy
</span><span class="line">
</span><span class="line">def pca(x, keep_dims=None):
</span><span class="line">    if not keep_dims:
</span><span class="line">        keep_dims = x.shape[1] - 1
</span><span class="line">    # 进行归一化
</span><span class="line">    normalize_x = normalize(x)
</span><span class="line">    # 求出协方差矩阵
</span><span class="line">    cov_x = covariance_matrix(x)
</span><span class="line">    # 奇异值分解
</span><span class="line">    U, S, V = np.linalg.svd(cov_x)  # U: principle components (n, n)
</span><span class="line">    # 选取前 keep_dims 维特征
</span><span class="line">    reduction = U[:, :keep_dims]
</span><span class="line">    # 得到降维的结果
</span><span class="line">    return np.matmul(x, reduction)
</span><span class="line">
</span><span class="line">x = np.random.uniform(size=(10, 10))
</span><span class="line">pca(x).shape</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">异常检测</h2>

<p>用途:</p>

<ol>
  <li>
    <p>识别欺骗。特征：用户多久登录一次，访问过的页面，在论坛发布的帖子数量，甚至是打字速度等。构建模型来识别那些不符合该模式的用户,</p>
  </li>
  <li>
    <p>数据中心。特征：内存使用情况，被访问的磁盘数量，CPU 的负载，网络的通信量等。构建模型来判断某些计算机是不是有可能出错了。</p>
  </li>
</ol>

<h4 id="section-3">高斯分布</h4>

<p>如果变量 𝑥 符合高斯分布 𝑥 𝑁(𝜇,𝜎2) , 则其概率密度函数为：</p>

<script type="math/tex; mode=display">
p(x,\mu, \sigma^2) = \frac{1}{\sqrt{2\pi}\sigma}exp(-\frac{(x-\mu)^2}{2\sigma^2})
</script>

<h4 id="section-4">高斯分布的异常检测算法</h4>

<p>对于每一个样本值，计算特征，并以此估算高斯分布中的𝜇 和𝜎2的估计值;</p>

<p>以此来绘制一个估计函数，在这个估计函数之外的值即异常值；</p>

<p>模型计算  𝑝(𝑥) :</p>

<script type="math/tex; mode=display">
p(x)=\prod_{j=1}^n p(x_j;\mu_j,\sigma^2_j)=\prod_{j=1}^n \frac{1}{\sqrt{2\pi}\sigma_j}exp(-\frac{(x_j-\mu_j)^2}{2\sigma^2_j})
</script>

<script type="math/tex; mode=display">
p(x)=\prod_{j=1}^n p(x_j;\mu_j,\sigma^2_j)=\prod_{j=1}^n \frac{1}{\sqrt{2\pi}\sigma_j}exp(-\frac{(x_j-\mu_j)^2}{2\sigma^2_j})
</script>

<p>当  𝑝(𝑥)&lt;𝜀 时，为异常。</p>

<h4 id="section-5">开发和评价一个异常检测系统</h4>

<ol>
  <li>根据测试集数据，我们估计特征的平均值和方差并构建 𝑝(𝑥) 函数</li>
  <li>对交叉检验集，我们尝试使用不同的 𝜀 值作为阀值，并预测数据是否异常，根据F1值或者查准率与查全率的比例来选择 𝜀</li>
  <li>选出 𝜀 后，针对测试集进行预测，计算异常检验系统的 F1 值，或者查准率与查全率之比。</li>
</ol>

<h4 id="section-6">特征选择</h4>

<p>我们通常可以通过将一些相关的特征进行组合，来获得一些新的更好的特征（异常数据的该特征值异常地大或小），例如，在检测数据中心的计算机状况的例子中，我们可以用 CPU 负载与网络通信量的比例作为一个新的特征，如果该值异常地大，便有可能意味着该服务器是陷入了一些问题中。</p>

<h4 id="section-7">多元高斯分布</h4>

<p>TODO…</p>

<h2 id="section-8">推荐系统</h2>

<h4 id="section-9">协同过滤</h4>

<p>TODO….</p>

<h2 id="section-10">大规模机器学习</h2>

<h4 id="section-11">大型数据集的学习</h4>

<p>我们应该怎样应对一个有 100 万条记录的训练集？</p>

<p>以线性回归模型为例，每一次梯度下降迭代，我们都需要计算训练集的误差的平方和，如果我们的学习算法需要有 20 次迭代，这便已经是非常大的计算代价。</p>

<p>首先应该做的事是去检查一个这么大规模的训练集是否真的必要，也许我们只用 1000 个训练集也能获得较好的效果，我们可以绘制学习曲线来帮助判断。</p>

<h4 id="section-12">随机梯度下降</h4>

<p>随机梯度下降算法在每一次计算之后便更新参数 θ，而不需要首先将所有的训练集求和，在梯度下降算法还没有完成一次迭代时，随机梯度下降算法便已经走出了很远。但是这样的算法存在的问题是，不是每一步都是朝着”正确”的方向迈出的。因此算法虽然会逐渐走向全局最小值的位置，但是可能无法站到那个最小值的那一点，而是在最小值点附近徘徊。</p>

<h4 id="section-13">小批量梯度下降</h4>
<p>小批量梯度下降算法是介于批量梯度下降算法和随机梯度下降算法之间的算法，每计算常数 b 次训练实例，便更新一次参数 θ。</p>

<p>通常我们会令 b 在 2-100 之间。这样做的好处在于，我们可以用向量化的方式来循环 b 个训练实例，如果我们用的线性代数函数库比较好，能够支持平行处理，那么算法的总体表现将不受影响（与随机梯度下降相同）。</p>

<h4 id="map-reduce--">Map Reduce 和 数据并行</h4>

<p>Map Reduce和数据并行对于大规模机器学习问题而言是非常重要的概念。</p>

<p>之前提到，如果我们用批量梯度下降算法来求解大规模数据集的最优解，我们需要对整个训练集进行循环，计算偏导数和代价，再求和，计算代价非常大。如果我们能够将我们的数据集分配给多台计算机，让每一台计算机处理数据集的一个子集，然后我们将计算的结果汇总然后再求和。这样的方法叫做Map Reduce。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吴恩达机器学习笔记-4]]></title>
    <link href="https://happy123.me/blog/2019/09/18/wu-en-da-ji-qi-xue-xi-bi-ji-4/"/>
    <updated>2019-09-18T16:59:17+08:00</updated>
    <id>https://happy123.me/blog/2019/09/18/wu-en-da-ji-qi-xue-xi-bi-ji-4</id>
    <content type="html"><![CDATA[<p class="info">机器学习系统设计思路，向量机，聚类</p>

<!-- more -->

<h2 id="section">机器学习系统设计</h2>

<h4 id="section-1">确定优先级</h4>

<ul>
  <li>如何设计一个垃圾邮件分类器算法?</li>
</ul>

<ol>
  <li>
    <p>首先，决定如何选择并表达特征向量x：可以选择一个由 100 个最常出现在垃圾邮件中的词所构成的列表，根据这些词是否有在邮件中出现，来获得我们的特征向量（出现为 1，不出现为 0），尺寸为 100×1。</p>
  </li>
  <li>收集更多的数据，让我们有更多的垃圾邮件和非垃圾邮件的样本</li>
  <li>基于邮件的路由信息开发一系列复杂的特征</li>
  <li>基于邮件的正文信息开发一系列复杂的特征，包括考虑截词的处理</li>
  <li>为探测刻意的拼写错误（例如: 把 watch 写成 w4tch）开发复杂的算法</li>
</ol>

<h4 id="section-2">误差分析</h4>

<p>构建一个学习算法的推荐方法为：</p>

<ol>
  <li>从一个简单的能快速实现的算法开始，实现该算法并用交叉验证集数据测试这个算法</li>
  <li>绘制学习曲线，决定是增加更多数据，或者添加更多特征，还是其他选择</li>
  <li>进行误差分析：人工检查交叉验证集中我们算法中产生预测误差的实例，看看这些实例是否有某种系统化的趋势</li>
</ol>

<h4 id="section-3">不对称分类的误差</h4>

<p>偏斜类（skewed classes）问题，表现为训练集中有非常多的同一种类的实例，只有很少或没有其他类的实例。</p>

<ul>
  <li>
    <p>查准率（Precision） = TP/（TP+FP）。
例：肿瘤预测中，在所有预测有恶性肿瘤的病人中，实际上有恶性肿 瘤的病人的百分比，越高越好。</p>
  </li>
  <li>
    <p>查全率（Recall） = TP/（TP+FN）。
例：肿瘤预测中，在所有实际上有恶性肿瘤的病人中，成功预测有恶性肿瘤的病人的百分比，越高越好。</p>
  </li>
</ul>

<p>对于肿瘤预测来说, 查全率更重要</p>

<h4 id="section-4">精确率和召回率的权衡</h4>

<p>如果希望只在非常确信的情况下预测为真（肿瘤为恶性），即我们希望更高的查准率，我们可以使用比 0.5 更大的阀值，如 0.7，0.9。这样做我们会减少错误预测病人为恶性肿瘤的情况，同时却会增加未能成功预测肿瘤为恶性的情况。</p>

<p>如果我们希望提高查全率，尽可能地让所有有可能是恶性肿瘤的病人都得到进一步地检查、诊断，我们可以使用比 0.5 更小的阀值，如 0.3。</p>

<p>选择阈值的一种方法是是计算 F1 值（F1 Score），其计算公式为：</p>

<script type="math/tex; mode=display">
F_1Score = 2\frac{PR}{P+R}
</script>

<h4 id="section-5">机器学习数据</h4>

<p>关于机器学习数据与特征值的选取比较有效的检测方法：</p>

<ol>
  <li>
    <p>一个人类专家看到了特征值 x，能很有信心的预测出 y 值吗？因为这可以证明 y 可以根据特征值 x 被准确地预测出来。</p>
  </li>
  <li>
    <p>我们实际上能得到一组庞大的训练集，并且在这个训练集中训练一个有很多参数的学习算法吗？</p>
  </li>
</ol>

<h2 id="section-6">向量机</h2>

<h4 id="section-7">支持向量机</h4>

<p>简称 SVM，在学习复杂的非线性方程时提供了一种更为清晰，更加强大的方式。</p>

<p>老实说，向量机没有理解；它是作为一种分类器来使用的，他画出来的分类线比线性回归和逻辑回归的偏差更小；简称大间距分类器，意思是分类线的到每一个样本点的距离，都保持最大间隔，这样就跟具有鲁棒性，分的就明显；</p>

<h4 id="section-8">核函数</h4>

<p>TODO，待理解</p>

<h2 id="section-9">非监督学习</h2>

<h4 id="k-means">K-Means算法</h4>

<p>K-均值是最普及的聚类算法，算法接受一个未标记的数据集，然后将数据聚类成不同的组。假设我们想要将数据聚类成 n 个组，其方法为:</p>

<ol>
  <li>选择 k 个随机的点，称为聚类中心（cluster centroids）；</li>
  <li>对于数据集中的每一个数据，按照距离 K个中心点的距离，将其与距离最近的中心点关联起来，与同一个中心点关联的所有点聚成一类；</li>
  <li>计算每一个组的平均值，将该组所关联的中心点移动到平均值的位置；</li>
  <li>重复步骤 2-4 直至中心点不再变化。</li>
</ol>

<h4 id="section-10">优化</h4>

<p>𝜇𝑐(𝑖) 代表与𝑥(𝑖) 最近的聚类中心点。优化目标便是找出使得代价函数最小的𝑐(1),𝑐(2),…𝑐(𝑚)和 𝜇1,𝜇2,…,𝜇𝑘。</p>

<ul>
  <li>K-均值迭代算法</li>
</ul>

<ol>
  <li>第一个循环(cluster assignment)是用于减小 𝑐(𝑖) 引起的代价</li>
  <li>第二个循环(move centroid)则是用于减小 𝜇𝑖 引起的代价。</li>
</ol>

<h4 id="section-11">随机初始化</h4>

<p>随机初始化所有的聚类中心点的做法：</p>

<ol>
  <li>我们应该选择 K &lt; m，即聚类中心点的个数要小于所有训练集实例的数量</li>
  <li>随机选择 K 个训练实例，然后令 K 个聚类中心分别与这 K 个训练实例相等</li>
</ol>

<h4 id="section-12">选择聚类数目</h4>

<p>改变 聚类数k 值，运行K-均值聚类方法，然后计算成本 函数或者计算畸变函数 J。</p>

<p>我们可能会得到一条这样像肘部的曲线，这就是“肘部法则”所做的。
这种模式下，它的畸变值会迅速下降，从 1 到 2，从 2 到 3 之后，你会在 3 的时候达到一个肘点。
在此之后，畸变值就下降的非常慢，我们就选这个转折点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吴恩达机器学习笔记-3]]></title>
    <link href="https://happy123.me/blog/2019/09/16/wu-en-da-ji-qi-xue-xi-bi-ji-3/"/>
    <updated>2019-09-16T16:55:56+08:00</updated>
    <id>https://happy123.me/blog/2019/09/16/wu-en-da-ji-qi-xue-xi-bi-ji-3</id>
    <content type="html"><![CDATA[<p class="info">神经网络学习, 反向传播算法， 模型优化</p>

<!-- more -->

<h2 id="section">神经网络学习</h2>

<h4 id="section-1">为什么需要神经网络</h4>

<p>普通的逻辑回归模型，不能有效地处理大量的特征，这时候我们需要神经网络。</p>

<h4 id="section-2">神经元和大脑</h4>

<p>大脑是个通用处理机，同样的一部分大脑区域，可以处理声音、视觉、味觉等多种信号；</p>

<p>从某种意义上来说，如果我们能找出大脑的学习算法，然后在计算机上执 行大脑学习算法或与之相似的算法，也许这将是我们向人工智能迈进做出的最好的尝试。人工智能的梦想就是：有一天能制造出真正的智能机器。</p>

<h4 id="section-3">模型表示</h4>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190916/bg1.jpg" alt="" /></p>

<p>第一层称为输入层（Input Layer），最后一 层称为输出层（Output Layer），中间一层称为隐藏层（Hidden Layers）。在神经网络中，参数又可被称为权重（weight）。我们为每一层都增加一个偏差单位（bias unit）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">
</span><span class="line">def sigmoid(x):
</span><span class="line">    return 1/(1+np.exp(-x))
</span><span class="line">
</span><span class="line">def net():
</span><span class="line">    # todo 确定输入和权重的维度
</span><span class="line">    X = np.array([[1],[-2],[3],[-4]])
</span><span class="line">    theta1 = np.random.uniform(size=(3, 4))
</span><span class="line">    hidden_input = sigmoid(np.matmul(theta1,X))
</span><span class="line">    print('hidden_input',hidden_input)
</span><span class="line">    hidden_input = np.insert(hidden_input, 0, [1], axis=0)
</span><span class="line">    print('hidden_input',hidden_input)
</span><span class="line">    theta2 = np.random.uniform(size=(1, 4))
</span><span class="line">    output = sigmoid(np.matmul( theta2,hidden_input))
</span><span class="line">    return output</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">模型的表示实例</h4>

<p>从本质上讲，神经网络能够通过学习得出其自身的一系列特征。</p>

<p>在普通的逻辑回归中，我们被限制为使用数据中的原始特征 𝑥0,𝑥1,𝑥2,𝑥3 我们虽然可以使用一些二项式项来组合这些特征，但是我们仍然受到这些原始特征的限制。</p>

<p>在神经网络中，原始特征只是输入层，在我们上面三层的神经网络例子中，第三层也就是输出层做出的预测利用的是第二层的特征，而非输入层中的原始特征，我们可以认为第二层中的特征是神经网络通过学习后自己得出的一系列用于预测输出变量的新特征。</p>

<p>神经网络中，单层神经元（无中间层）的计算可用来表示逻辑运算，比如逻辑与（AND）、逻辑或（OR）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 实现AND函数
</span><span class="line">import numpy as np
</span><span class="line">
</span><span class="line">def sigmoid(x):
</span><span class="line">    return 1/(1+np.exp(-x))
</span><span class="line">
</span><span class="line">class Net():
</span><span class="line">    def __init__(self,theta):
</span><span class="line">        self.theta=theta
</span><span class="line">    def run(self,X):   
</span><span class="line">        output = sigmoid(np.matmul(self.theta,X))
</span><span class="line">        return output
</span><span class="line">
</span><span class="line">net = Net(np.array([[-30,20,20]]))</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-5">多分类任务</h4>

<p>one-hot的基本思想：将离散型特征的每一种取值都看成一种状态，若你的这一特征中有N个不相同的取值，那么我们就可以将该特征抽象成N种不同的状态，one-hot编码保证了每一个取值只会使得一种状态处于“激活态”，也就是说这N种状态中只有一个状态位值为1，其他状态位都是0。</p>

<p>如果分类问题有四个结果，
我们不会将y的取值为：0，1，2，3 而是会将y表示为一个1*4的向量</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">import tqdm
</span><span class="line">def onehot(x):
</span><span class="line">    unique_values = list(set(x))
</span><span class="line">    number_of_dimension = len(unique_values)
</span><span class="line">    onehot_features = np.zeros(shape=(len(x), number_of_dimension))
</span><span class="line">    for row in tqdm.tqdm(range(len(x))):
</span><span class="line">        onehot_features[row, unique_values.index(x[row])] = 1
</span><span class="line">    return onehot_features</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-6">反向传播算法</h2>

<h4 id="section-7">代价函数</h4>

<p><img src="https://raw.githubusercontent.com/brain-zhang/memoryboxes.github.io/source/images/20190916/bg2.jpg" alt="" /></p>

<p>通过代价函数来观察算法预测的结果与真实情况的误差有多大，与逻辑回归唯一不同的是，对于每一行特征，我们都会给出 K 个预测，基本上我们可以利用循环，对每一行特征都预测 K 个不同结果，然后在利用循环
在 K 个预测中选择可能性最高的一个，将其与 y 中的实际数据进行比较。 </p>

<h4 id="section-8">反向传播</h4>

<p>计算神经网络预测结果的时候我们采用了一种正向传播方法，我们从第一层开始正向一层一层进行计算，直到最后一层的 ℎ𝜃(𝑥) </p>

<p>计算代价函数的偏导数，我们需要采用一种反向传播算法，也就是首先计算最后一层的误差，然后再一层一层反向求出各层的误差，直到倒数第二层。</p>

<p>老实说，反向传播的原理推导一直没搞明白，留一个通俗版先不求甚解：</p>

<p>https://www.jefkine.com/general/2016/09/05/backpropagation-in-convolutional-neural-networks/</p>

<p>最后，反向传播是为了提升神经网络学习模型中梯度下降的训练速度；是一种快速计算导数的方法；</p>

<h4 id="section-9">梯度校验</h4>

<p>名词跟梯度下降很相似，但是作用不一样；</p>

<p>当我们对一个较为复杂的模型（例如神经网络）使用梯度下降算法时，可能会存在一些不容易察觉的错误，意味着，虽然代价看上去在不断减小，但最终的结果可能并不是最优解。</p>

<p>为了避免这样的问题，我们采取一种叫做梯度的数值检验（Numerical Gradient Checking）的方法。这种方法的思想是通过估计梯度值来检验我们计算的导数值是否真的是我们要求的。</p>

<p>对梯度的估计采用的方法是在代价函数上沿着切线的方向选择离两个非常近的点然后计算两个点的平均值用以估计梯度。即对于某个特定的 𝜃 ，我们计算出在  𝜃−𝜎 处和 𝜃+𝜎 的代价值（ 𝜎 是一个非常小的值，通常选取 0.001），然后求两个代价的平均，用以估计在 𝜃 处的代价值。</p>

<p>当 𝜃 是一个向量时，我们则需要对偏导数进行检验。因为代价函数的偏导数检验只针对一个参数的改变进行检验，下面是一个只针对 𝜃1 进行检验的示例：</p>

<script type="math/tex; mode=display">
\frac{\partial}{\partial\theta_1} = \frac{J(\theta_1+\sigma_1,\theta_2,\theta_3,...,\theta_n)-J(\theta_1-\sigma_1,\theta_2,\theta_3,...,\theta_n)}{2\sigma}
</script>

<h4 id="section-10">随机初始化</h4>

<p>任何优化算法都需要一些初始的参数。到目前为止我们都是初始所有参数为 0，这样的 初始方法对于逻辑回归来说是可行的，但是对于神经网络来说是不可行的。</p>

<p>如果我们令所有的初始参数都为 0，这将意味着我们第二层的所有激活单元都会有相同的值。同理，如果我们初始所有的参数都为一个非 0 的数，结果也是一样的。</p>

<p>我们通常初始参数为正负 ε 之间的随机值，假设我们要随机初始一个尺寸为 10×11 的参数矩阵，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">a= np.random.rand(10,11) # 机初始一个尺寸为 10×11 的参数矩阵
</span><span class="line">print(a)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-11">小结:</h4>

<ol>
  <li>参数的随机初始化</li>
  <li>利用正向传播方法计算所有的 hθ(x)</li>
  <li>编写计算代价函数 J 的代码</li>
  <li>利用反向传播方法计算所有偏导数</li>
  <li>利用数值检验方法检验这些偏导数</li>
  <li>使用优化算法来最小化代价函数</li>
</ol>

<h2 id="section-12">神经网络优化</h2>

<p>当我们建立一个神经网络学习模型之后，如何检验他到底好不好用？ 如果不好用，该怎样优化？</p>

<h4 id="section-13">假设检验</h4>

<p>为了检验算法是否过拟合，我们将数据分成训练集和测试集，通常用70%的数据作为训练集，用剩下30%的数据作为测试集。</p>

<ul>
  <li>线性回归模型，我们利用测试数据集计算代价函数J ；</li>
</ul>

<script type="math/tex; mode=display">
J_{test}(\theta)=\frac{1}{2m_{test}}\sum^{m_{test}}_{i=1}({h_\theta(x^{(i)}_{test})-y^{(i)}_{test}})^2
</script>

<ul>
  <li>逻辑回归模型，我们可以利用测试数据集来计算代价函数：</li>
</ul>

<script type="math/tex; mode=display">
J_{test}(\theta)=-\frac{1}{m_{test}}\sum^{m_{test}}_{i=1}(y^{(i)}_{test}\log{h_\theta(x^{(i)}_{test})}+(1-y^{(i)}_{test}）\log{(1-h_\theta(x^{(i)}_{test}))})
</script>

<h4 id="section-14">模型选择与训练集</h4>

<p>显然越高次数的多项式模型越能够适应我们的训练数据集，但是适应训练数据集并不代表着能推广至一般情况，我们应该选择一个更能适应一般情况的模型。我们需要使用交叉验证集来帮助选择模型。</p>

<p>交叉验证集：训练集（train）用60%的数据，交叉验证集（validation）用20%的数据，测试集(test)用20%的数据</p>

<p>模型选择的方法为：</p>

<ol>
  <li>使用训练集训练出 10 个模型</li>
  <li>用 10 个模型分别对交叉验证集计算得出交叉验证误差（代价函数的值）</li>
  <li>选取代价函数值最小的模型</li>
  <li>用步骤 3 中选出的模型对测试集计算得出推广误差（代价函数的值）</li>
</ol>

<h4 id="section-15">诊断偏差和方差</h4>

<p>诊断偏差或是方差，即判断欠拟合还是过拟合;</p>

<ul>
  <li>训练集误差和交叉验证集误差都很高时：高偏差(欠拟合)</li>
  <li>训练集误差很小, 且交叉验证集误差远大于训练集误差时：高方差(过拟合)</li>
</ul>

<h4 id="section-16">正则化，偏差和方差</h4>

<p>选择 𝜆 的方法为：</p>

<ol>
  <li>使用训练集训练出 12 个不同程度正则化的模型</li>
  <li>用 12 模型分别对交叉验证集计算的出交叉验证误差</li>
  <li>选择得出交叉验证误差最小的模型</li>
  <li>运用步骤 3 中选出模型对测试集计算得出推广误差，我们也可以同时将训练集和交叉验证集模型的代价函数误差与 𝜆 的值绘制在一张图表上：</li>
</ol>

<ul>
  <li>当 𝜆 较小时，训练集误差较小（过拟合）而交叉验证集误差较大</li>
  <li>随着 𝜆 的增加，训练集误差不断增加（欠拟合），而交叉验证集误差则是先减小后增加</li>
</ul>

<h4 id="section-17">学习曲线</h4>

<p>学习曲线是将训练集误差和交叉验证集误差作为训练集实例数量（m）的函数绘制的图表。</p>

<p>思想是：当训练较少行数据的时候，训练的模型将能够非常完美地适应较少的训练数据，但是训练出来的模型却不能很好地适应交叉验证集数据或测试集数据。</p>

<p>当交叉验证集误差远大于训练集误差时，往训练集增加更多数据可以提高模型的效果。</p>

<h4 id="section-18">小结</h4>

<ul>
  <li>获得更多的训练实例——解决高方差</li>
  <li>尝试减少特征的数量——解决高方差</li>
  <li>尝试获得更多的特征——解决高偏差</li>
  <li>尝试增加多项式特征——解决高偏差</li>
  <li>尝试减少正则化程度 λ——解决高偏差</li>
  <li>
    <p>尝试增加正则化程度 λ——解决高方差</p>
  </li>
  <li>使用较小的神经网络，类似于参数较少的情况，容易导致高偏差和欠拟合，但计算代价较小</li>
  <li>使用较大的神经网络，类似于参数较多的情况，容易导致高方差和过拟合，虽然计算代价比较大，但是可以通过正则化手段来调整而更加适应数据。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paste Fails When Using Bracketed-paste-magic on zsh5.1.1]]></title>
    <link href="https://happy123.me/blog/2019/09/13/paste-fails-when-using-bracketed-paste-magic-on-zsh5-dot-1-1/"/>
    <updated>2019-09-13T10:50:31+08:00</updated>
    <id>https://happy123.me/blog/2019/09/13/paste-fails-when-using-bracketed-paste-magic-on-zsh5-dot-1-1</id>
    <content type="html"><![CDATA[<p>突然碰到了zsh5.1.1的一个bug，粘贴中文的时候会把shell freeze；</p>

<p>不知道是不是on-my-zsh升级的时候搞坏的，一通搜索发现了这个:</p>

<p>https://github.com/zsh-users/zsh-autosuggestions/issues/102</p>

<p>没有升级zsh，我直接到配置文件里把那段自动转义的功能注释掉了，嗯，简单粗暴~~~这东西我也不想天天升级；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">~/.oh-my-zsh/lib/misc.zsh</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eltoo-闪电和离线契约更新机制]]></title>
    <link href="https://happy123.me/blog/2019/09/13/eltoo-shan-dian-he-chi-xian-qi-yue-geng-xin-ji-zhi/"/>
    <updated>2019-09-13T10:29:32+08:00</updated>
    <id>https://happy123.me/blog/2019/09/13/eltoo-shan-dian-he-chi-xian-qi-yue-geng-xin-ji-zhi</id>
    <content type="html"><![CDATA[<p class="info">在我们之前的文章中，对闪电网络的来龙去脉和原理做了详尽的分析；我们提出，相对于现在的传统支付技术，闪电网络技术有一个不可思议的跨越，用时髦一点的话来说，这是次世代的支付技术，假以时日，我相信它的未来不可限量；</p>

<p>闪电网络可以说是比特币二层网络技术的急先锋，它除了开拓比特币的支付愿景，还在很多层面对将来二层网络的发展提出了很多基础协议功能；这一切目前都收集在闪电网络基础技术规范，简称BOLT(Basis of Lightning Technology文档中；</p>

<p>https://github.com/lightningnetwork/lightning-rfc</p>

<!-- more -->

<p>仔细阅读BOLT就会发现，闪电网络并不是一个单一的协议，它是一整套协议，并且许多部分都被设计为可替代的；最典型的就是支付通道的部分；</p>

<p>为了保证支付通道双方不作弊，需要给作弊方施加足够的惩罚威慑，目前的支付通道采用的惩罚机制称为 “L2-penalty”机制；这是是JosephPoon和Thaddeus Dryja在原版Lightning Network白皮书中发明的协议;因此也被称为<code>Poon-Dryja通道</code>;</p>

<p>除了这种实现，其实还有另外一种双向支付通道协议，称为[双工小额支付渠道（DMC）]，由Decker和Wattenhofer [2015年]发明。Christian Decker是Blockstream的开发人员，后来blockstream将这个协议进一步完善，发展为Eltoo规范，并在2018年提出；</p>

<p>Eltoo简化了惩罚机制，效率更高，不仅能用于支付渠道当中，还有一个更广泛的应用，打开人任意多方(&lt;7)在二层网络上实现智能合约的可能性；</p>

<p>这个原理讲起来脑洞很大，我读它的论文的时候又一次感叹: 还有这种操作？</p>

<p>看来比特币社区的技术发展已经远远走到了时代的前面，你不能说比特币的技术是老旧的，以目前的发展来看，比特币的底层架构之稳健，足够支持更多的未来黑科技运行在上面；</p>

<p>…….TODO 需要填坑</p>

<p>Eltoo的实施需要一个软分叉，需要现有的比特币主网支持名为<code>SIGHASH_NOINPUT</code>的操作符，结合Schnorr 签名技术，将来会实现许多非常有意思的功能；</p>

<p>最后再强调一遍，闪电网络不仅仅是一个支付的技术，他为比特币二层网络的各种应用构建提供了基础，相信在未来，会出现很多神奇的应用，有多神奇我无法想象；但这个技术绝不是一时的噱头，现在种种迹象表明，它会为比特币开启下一个十年；</p>

<p>引用资料:</p>

<p>https://blockstream.com/2018/04/30/en-eltoo-next-lightning/</p>

<p>https://blockstream.com/eltoo.pdf</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吴恩达机器学习笔记-2]]></title>
    <link href="https://happy123.me/blog/2019/09/11/wu-en-da-ji-qi-xue-xi-2/"/>
    <updated>2019-09-11T10:53:38+08:00</updated>
    <id>https://happy123.me/blog/2019/09/11/wu-en-da-ji-qi-xue-xi-2</id>
    <content type="html"><![CDATA[<p class="info">Logistic回归， 正则化</p>

<!-- more -->

<h2 id="logistic">1-Logistic回归</h2>

<h4 id="section">分类</h4>

<p>逻辑回归 (Logistic Regression)是分类问题的一个代表算法，这是目前最流行使用最广泛的一种学习算法。</p>

<p>我们将因变量(dependant variable)可能属于的两个类分别称为负向类（negative class）和 正向类（positive class），则因变量  𝑦∈0,1 ，其中 0 表示负向类，1 表示正向类。</p>

<p>分类问题下，可以采用逻辑回归的分类算法，这个算法的性质是：它的输出值永远在 0 到 1 之间。 它适用于标签 y 取值离散的情况，如：1 0 0 1。</p>

<h4 id="section-1">假设陈述</h4>

<p>分类问题，希望分类器的输出值在 0 和 1 之间，因此，假设函数需要满足预测值要在 0 和 1 之间。</p>

<p>回归模型的假设是：</p>

<script type="math/tex; mode=display">
h_\theta(x)=g(\theta^TX)
</script>

<p>其中：</p>

<ul>
  <li>
    <p>X 代表特征向量</p>
  </li>
  <li>
    <p>g 代表逻辑函数（logistic function）, 是一个常用的逻辑函数为 S形函数（Sigmoid function），公式为：</p>
  </li>
</ul>

<script type="math/tex; mode=display">
g(z) = \frac{1}{1+e^{-z}}
</script>

<ul>
  <li>python 代码实现sigmoid函数：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">def sigmoid(z):
</span><span class="line">    return 1 / (1 + np.exp(-z))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结合起来，获得逻辑回归的假设：</p>

<script type="math/tex; mode=display">
h_\theta(x) =  \frac{1}{1+e^{-\theta^TX}}
</script>

<table>
  <tbody>
    <tr>
      <td>𝜃(𝑥) 的作用是，对于给定的输入变量，根据选择的参数计算输出变量为1 的可能性 （estimated probablity），即  ℎ𝜃(𝑥)=𝑃(𝑦=1</td>
      <td>𝑥;𝜃) 。</td>
    </tr>
  </tbody>
</table>

<h4 id="section-2">代价函数</h4>

<p>逻辑回归的代价函数为：</p>

<script type="math/tex; mode=display">
J(\theta)= \frac{1}{m}\sum^m_{i=1}Cost(h_\theta(x^{(i)}), y^{(i)})
</script>

<p>其中:</p>

<script type="math/tex; mode=display">
Cost(h_\theta(x), y)=-y\times{log(h_\theta(x))}-(1-y)\times{log(1-h_\theta(x))}
</script>

<p>代入代价函数:</p>

<script type="math/tex; mode=display">
J(\theta) = -\frac{1}{m}\sum^m_{i=1}[y^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]
</script>

<ul>
  <li>逻辑回归代价函数的Python代码实现：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">def cost(theta, X, y):
</span><span class="line">    theta = np.matrix(theta)
</span><span class="line">    X = np.matrix(X)
</span><span class="line">    y = np.matrix(y)
</span><span class="line">    first = np.multiply(-y, np.log(sigmoid(X * theta.T)))
</span><span class="line">    second = np.multiply((1 - y), np.log(1 - sigmoid(X * theta.T)))
</span><span class="line">    return np.sum(first - second) / (len(X))</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">简化代价函数和梯度下降</h4>

<script type="math/tex; mode=display">
\theta_j := \theta_j - \alpha \frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}_j
</script>

<p>这个更新规则和之前用来做线性回归梯度下降的式子是一样的， 但是假设的定义发生了变化。即使更新参数的规则看起来基本相同，但由于假设的定义发生了变化，所以逻辑函数的梯度下降，跟线性回归的梯度下降实际上是两个完全不同的东西。</p>

<h4 id="section-4">多分类任务 一对多</h4>

<p>邮件归类， 假如说你现在需要一个学习算法能自动地将邮件归类到不同的文件夹里，区分开来自工作的邮件、来自朋友的邮件、来自家人的邮件或者是有关兴趣爱好的邮件，那么，就有了一个四分类问题：其类别有四个，分别用 y=1、y=2、y=3、y=4 来代表。</p>

<p>多分类的关键就是构建多个逻辑分类函数；具体：</p>

<p>我们将多个类中的一个类标记为正向类（y=1），然后将其他所有类都标记为负向类，这个模型记作 ℎ(1)𝜃(𝑥)。接着，类似地第我们选择另一个类标记为 正向类（y=2），再将其它类都标记为负向类，将这个模型记作  ℎ(2)𝜃(𝑥) ,依此类推。 最后我们得到一系列的模型简记为：</p>

<script type="math/tex; mode=display">
h^{(i)_\theta(x)} = p(y=i|x;\theta)
</script>

<p>最后，在我们需要做预测时，我们将所有的分类机都运行一遍，然后对每一个输入变量，都选择最高可能性的输出变量。 总之，我们已经把要做的做完了，现在要做的就是训练这个逻辑回归分类器： ℎ(𝑖)𝜃(𝑥) ， 其中 i对应每一个可能的y=i，最后，为了做出预测，我们给出输入一个新的 x 值做预测。我们要做的就是在我们三个分类器里面输入 x，然后我们选择一个让  ℎ(𝑖)𝜃(𝑥) 最大的 i，即</p>

<script type="math/tex; mode=display">
\max_ih^{(i)_\theta(x)}
</script>

<h2 id="section-5">2-正则化</h2>

<h4 id="section-6">过拟合问题</h4>

<p>就以多项式理解，x 的次数越高，拟合的越好，但相应的预测的能力就可能变差。</p>

<p>如何解决？</p>

<ul>
  <li>
    <p>丢弃一些不能帮助我们正确预测的特征。可以是手工选择保留哪些特征，或者使用一些模型选择的算法来帮忙（例如 PCA, LDA），缺点是丢弃特征的同时，也丢弃了这些相应的信息；</p>
  </li>
  <li>
    <p>正则化。 保留所有的特征，但是减少参数的大小（magnitude），当我们有大量的特征，每个特征都对目标值有一点贡献的时候，比较有效。</p>
  </li>
  <li>
    <p>还有一个解决方式就是增加数据集,因为过拟合导致的原因就过度拟合测试数据集, 那么增加数据集就很大程度提高了泛化性了.</p>
  </li>
</ul>

<h4 id="section-7">代价函数</h4>

<p>正则化的基本方法：对高次项添加惩罚值，让高次项的系数接近于0。</p>

<p>假如我们有非常多的特征，我们并不知道其中哪些特征我们要惩罚，我们将对所有的特征进行惩罚，并且让代价函数最优化的软件来选择这些惩罚的程度。这样的结果是得到了一个较为简单的能防止过拟合问题的假设：</p>

<script type="math/tex; mode=display">
J(\theta) = \frac{1}{2m} [ \sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^{2} + \lambda\sum_{j=1}^n\theta^2_j  ]
</script>

<p>其中 𝜆 又称为正则化参数（Regularization Parameter）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">def mseWithRegular(predict, y, w, lmd=0.1):
</span><span class="line">    '''
</span><span class="line">        predict: 模型输出
</span><span class="line">        y: 真实标签
</span><span class="line">        w: 模型权重
</span><span class="line">        lmd: 正则化参数
</span><span class="line">    '''
</span><span class="line">    constrct_loss = np.sum((predict - y) ** 2)
</span><span class="line">    experience_loss = lmd * np.sum(w ** 2)
</span><span class="line">    loss = (constrct_loss + experience_loss) / (2 * len(predict))
</span><span class="line">    return loss
</span><span class="line">
</span><span class="line">predict = np.array([1, 1.5, 2])
</span><span class="line">y = np.array([0.9, 1.4, 2.1])
</span><span class="line">w = np.array([[1], [1], [1]])
</span><span class="line">mseWithRegular(predict, y, w)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果选择的正则化参数 𝜆 过大，则会把所有的参数都最小化了，导致模型变成  ℎ𝜃(𝑥)=𝜃0 ，造成欠拟合。</p>

<p>所以对于正则化，我们要取一个合理的λ的值，这样才能更好的应用正则化。</p>

<h4 id="section-8">线性回归正则化</h4>
<p>对于线性回归的求解，我们之前推导了两种学习算法：一种基于梯度下降，一种基于正规方程</p>

<p>正则化线性回归的代价函数为：</p>

<script type="math/tex; mode=display">
J(\theta) = \frac{1}{2m} [ \sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^{2} + \lambda\sum_{j=1}^n\theta^2_j ]
</script>

<ul>
  <li>梯度下降使代价函数最小化</li>
</ul>

<script type="math/tex; mode=display">
\theta_j := \theta_j (1-a\frac{\lambda}{m})- \alpha \frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}_j
</script>

<ul>
  <li>正规方程来求解正则化线性回归模型</li>
</ul>

<p>TODO: 暂时没有理解</p>

<h4 id="section-9">逻辑回归正则化</h4>

<p>针对逻辑回归问题，我们在之前的课程已经学习过两种优化算法：梯度下降法，更高级的优化算法需要你自己设计代价函数 𝐽(𝜃) 。</p>

<p>给代价函数增加一个正则化的表达式，得到代价函数:</p>

<script type="math/tex; mode=display">
J(\theta) = \frac{1}{m}\sum^m_{i=1}[-y^{(i)}log(h_\theta(x^{(i)}))-(1-y^{(i)}log(1-h_\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^n\theta^2_j
</script>

<p>代码实现:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">def sigmoid(x, derivative=False):
</span><span class="line">    sigm = 1. / (1. + np.exp(-x))
</span><span class="line">    if derivative:
</span><span class="line">        return sigm * (1. - sigm)
</span><span class="line">    return sigm
</span><span class="line">
</span><span class="line">def costReg(theta, X, y, learningRate):
</span><span class="line">    theta = np.matrix(theta)
</span><span class="line">    X = np.matrix(X)
</span><span class="line">    y = np.matrix(y)
</span><span class="line">    first = np.multiply(-y, np.log(sigmoid(X * theta.T)))
</span><span class="line">    second = np.multiply((1 - y), np.log(1 - sigmoid(X * theta.T)))
</span><span class="line">    reg = (learningRate / 2 * len(X)) * np.sum(np.power(theta[:,1:theta.shape[1]], 2))
</span><span class="line">    return np.sum(first - second) / (len(X)) + reg</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，它的梯度下降看上去同正则化的线性回归一样，但是由于假设ℎ𝜃(𝑥)=𝑔(𝜃𝑇𝑋) ，所以与线性回归不同。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode String Parse With Python and Fileinput]]></title>
    <link href="https://happy123.me/blog/2019/09/06/unicode-string-parse-with-python-and-fileinput/"/>
    <updated>2019-09-06T11:41:03+08:00</updated>
    <id>https://happy123.me/blog/2019/09/06/unicode-string-parse-with-python-and-fileinput</id>
    <content type="html"><![CDATA[<p>用fileinput模块parse数据很方便:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import fileinput
</span><span class="line">
</span><span class="line">if __name__ == '__main__':
</span><span class="line">    for line in fileinput.input():
</span><span class="line">        sys.stdout.write(line)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但有时候会碰到UnicodeDecodeError:</p>

<p>比如执行:</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo -e "foo\x80bar" |python3 testinput.py
</span><span class="line">
</span><span class="line">...
</span><span class="line">UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 3: invalid start byte</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种错误还不好用<code>try .. catch</code>忽略掉，因为它是在fileinput模块中自己parse的；</p>

<p>Python2的时候很罗嗦，需要自己用codecs去判断之后，才能parse;</p>

<p>Python3总算是引入了一个openhook参数，可以自己hook处理了；</p>

<p>最简单的处理方式:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import fileinput
</span><span class="line">import io
</span><span class="line">import sys
</span><span class="line">
</span><span class="line">if __name__ == '__main__':
</span><span class="line">    sys.stdin = io.TextIOWrapper(sys.stdin.buffer, errors='replace')
</span><span class="line">    for line in fileinput.input(openhook=fileinput.hook_encoded("utf-8")):
</span><span class="line">        sys.stdout.write(line)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>参考:</p>

<p>https://stackoverflow.com/questions/24754861/unicode-file-with-python-and-fileinput</p>

<p>https://bugs.python.org/issue26756</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吴恩达机器学习笔记-1]]></title>
    <link href="https://happy123.me/blog/2019/09/01/wu-en-da-ji-qi-xue-xi-bi-ji/"/>
    <updated>2019-09-01T15:59:41+08:00</updated>
    <id>https://happy123.me/blog/2019/09/01/wu-en-da-ji-qi-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p class="info">这个系列教程大名鼎鼎，之前我都是用到啥就瞎试一通；最近花了两个周，认认真真把这些基础知识重新学了一遍；做个笔记；
苏老泉二十七始发愤，我这比他还落后；不过求知的旅途，上路永远不嫌晚，我一直在路上；</p>

<!-- more -->

<h2 id="supervised-learning">1-监督学习（Supervised Learning)</h2>

<p>根据训练数据是否拥有标记信息，学习任务可大致被分为两类：</p>

<ul>
  <li>
    <p>监督学习（Supervised Learning）监督学习的代表是回归和分类。</p>

    <ul>
      <li>回归:预测连续值的模型: 已知房子大小和房价数据集，预测某一房子的价格</li>
      <li>分类:预测离散值的模型: 已知肿瘤性质和大小数据集，预测肿瘤是否良性</li>
    </ul>
  </li>
  <li>
    <p>无监督学习（Unsupervised Learning） 无监督学习的代表是聚类。</p>
  </li>
</ul>

<h2 id="section">2-单变量线性回归</h2>

<h4 id="section-1">模型表示</h4>

<script type="math/tex; mode=display">
h_{\theta}(x) = \theta_{0} + \theta_{1}x
</script>

<h4 id="section-2">代价函数</h4>

<p>求两个值，使模型最为匹配当前数据集；求解匹配度的过程提炼出代价函数；代价函数值越小，匹配度越高</p>

<script type="math/tex; mode=display">
J(\theta_{0}, \theta_{1}) = \frac{1}{2m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^{2}
</script>

<p>当𝜃1=0时，代价函数为一抛物线；
当𝜃0，𝜃1都不为0时，代价函数为一三维曲面；</p>

<h4 id="section-3">自动求解代价函数</h4>

<p>我们我们有函数  𝐽(𝜃0,𝜃1) , 可以不断的调整  𝜃0  和  𝜃1 , 来使得  𝐽(𝜃0,𝜃1)  , 直到  𝐽(𝜃0,𝜃1)  达到最小值为止</p>

<p>梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数 𝐽(𝜃0,𝜃1) 的最小值。</p>

<p>梯度下降背后的思想是：开始时我们随机选择一个参数的组合 (𝜃0,𝜃1,……,𝜃𝑛)  ，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。我们持续这么做直到抵达一个局部最小值（local minimum），因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是全局最小值（global minimum），选择不同的初始参数组合，可能会找到不同的局部最小值。</p>

<p>帅气的梯度下降算法公式:</p>

<script type="math/tex; mode=display">
\theta_{j} := \theta_{j} - \alpha\frac{\partial}{\partial{\theta_{j}}}J(\theta)
</script>

<p>对 𝜃 赋值，使得  𝐽(𝜃) 按梯度下降最快方向进行，一直迭代下去，最终得到局部最小值。其中 𝛼 是学习率（learning rate），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大。</p>

<ul>
  <li>如果 𝛼 太小了，即我的学习速率太小，可能会很慢，因为它会一点点挪动，它会需要很多步才能到达全局最低点。</li>
  <li>如果 𝛼 太大，那么梯度下降法可能会越过最低点，下一次迭代又移动了一大步，越过一次，又越过一次，一次次越过最低点，直到你发现实际上离最低点越来越远，最终会导致无法收敛，甚至发散。</li>
</ul>

<h2 id="section-4">3-矩阵和向量</h2>

<h4 id="x2">一个2X2矩阵</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">a=np.array([[1, 2], [3, 4]])
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-5">向量是列数为1的特殊矩阵:</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">b = np.array(np.zeros((3,1)))
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">矩阵的加法</h4>

<p>行列数相等的才可以做加法，两个矩阵相加就是行列对应的元素相加。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">a = np.mat([[1,0],[2,5],[3,1]])
</span><span class="line">b = np.mat([[4,0.5],[2,5],[0,1]])
</span><span class="line">print ("a: \n",a, "\nb: \n",b)
</span><span class="line">print ("a+b: \n",a+b)  # a + b，矩阵相加
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-7">矩阵的标量乘法</h4>

<p>矩阵和标量的乘法也很简单,就是矩阵的每个元素都与标量相乘。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">print ("a: \n",a)
</span><span class="line">print ("3*a: \n",3* a)  #矩阵标量乘法
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-8">向量乘法</h4>
<p>m×n 的矩阵乘以 n×1 的向量，得到的是 m×1 的向量</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">a = np.mat([[-1,2],[2,3]])
</span><span class="line">c = np.mat([[3],[4]])
</span><span class="line">ac = a * c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-9">矩阵乘法的性质</h4>
<ul>
  <li>矩阵的乘法不满足交换律： 𝐴×𝐵≠𝐵×𝐴</li>
  <li>矩阵的乘法满足结合律。即： 𝐴×（𝐵×𝐶）=（𝐴×𝐵）×𝐶</li>
  <li>在矩阵的乘法中，有一种矩阵起着特殊的作用，如同数的乘法中的 1,我们称这种矩阵为单位矩阵．它是个方阵，一般用 I 或者 E 表示，本讲义都用 I 代表单位矩阵，从左上角到右下角的对角线（称为主对角线）上的元素均为 1 以外全都为 0。</li>
</ul>

<h4 id="section-10">逆矩阵</h4>

<p>矩阵 A 是一个 m×m 矩阵（方阵），如果有逆矩阵，则：𝐴𝐴−1=𝐴−1𝐴=𝐼</p>

<p>没有逆矩阵的矩阵, 称为奇异 (singlar/degenerate)矩阵</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import numpy as np
</span><span class="line">
</span><span class="line">a = np.mat([[1,2],[3,4]])
</span><span class="line">print ('a:\n',a)
</span><span class="line">res = np.linalg.inv(a)
</span><span class="line">print('a inverse:\n', res)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>备注: 再octave中，可以用pinv函数(伪逆矩阵)对奇异矩阵求逆；</p>

<h4 id="section-11">矩阵转置</h4>

<p>设 A 为 m×n 阶矩阵（即 m 行 n 列），第 i 行 j 列的元素是 a(i,j)，即：A=a(i,j) 定义 A 的转置为这样一个 n×m 阶矩阵 B，满足 B=a(j,i)，即 b (i,j)=a (j,i)（B 的第 i 行第 j 列元素是 A 的第 j 行第 i 列元素），记  𝐴𝑇=𝐵 。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a = np.mat([[1,2],[3,4]])
</span><span class="line">print ('a:\n',a)
</span><span class="line">res = a.T
</span><span class="line">print('a transpose:\n', res)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-12">4-多变量线性回归</h2>

<ul>
  <li>引入多种特征后的假设h模型</li>
</ul>

<script type="math/tex; mode=display">
h_{\theta}(x) = \theta_{0} + \theta_{1}x_{1} + \theta_{2}x_{2} + ... + \theta_{n}x_{n}
</script>

<p>此时模型中的参数是一个 n+1 维的向量，任何一个训练实例也都是 n+1 维的向量，特征矩阵 X 的维度是 m*(n+1)。 因此公式可以简化为：</p>

<script type="math/tex; mode=display">
h_{\theta}(x) = \theta^TX
</script>

<h4 id="section-13">多变量梯度下降</h4>

<p>与单变量线性回归类似，在多变量线性回归中，我们也构建一个代价函数，则这个代价 函数是所有建模误差的平方和，即：</p>

<script type="math/tex; mode=display">
J(\theta_{0}, \theta_{1}...\theta_{n}) = \frac{1}{2m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^{2}
</script>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 代价函数的python代码实现
</span><span class="line">def Cost(X, y, theta):
</span><span class="line">    inner = np.power(((X * theta.T) - y), 2)
</span><span class="line">    return np.sum(inner) / (2 * len(X))
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-14">梯度下降 - 特征缩放</h4>

<p>在我们面对多维特征问题的时候，我们要保证这些特征都具有相近的尺度，这可以帮助梯度下降算法更快地收敛。</p>

<p>解决的方法是尝试将所有特征的尺度都尽量缩放到-1 到 1 之间。</p>

<p>最简单的方法是令：</p>

<script type="math/tex; mode=display">
x_n = \frac{x_n - \mu_n}{s_n}
</script>

<p>其中,  𝜇𝑛 是平均值， 𝑠𝑛 是标准差。</p>

<h4 id="section-15">梯度下降 - 学习率</h4>

<ul>
  <li>如果学习率 𝛼 过小，则达到收敛所需的迭代次数会非常高；</li>
  <li>如果学习率 𝛼 过大，每次迭代可能不会减小代价函数，可能会越过局部最小值导致无法收敛。</li>
</ul>

<p>通常可以考虑尝试些学习率： 0.01，0.03，0.1，0.3，1，3，10; 3倍增长</p>

<h4 id="section-16">特征与多项式回归</h4>

<p>如果我们采用多项式回归模型，在运行梯度下降算法前，特征缩放非常有必要。因为幂运算很容易拉大特征之间尺度的差距</p>

<h4 id="section-17">正规方程</h4>

<p>假设我们的训练集特征矩阵为 X（包含了 𝑥0=1 ）并且我们的训练集结果为向量 y， 则利用正规方程解出向量</p>

<script type="math/tex; mode=display">
\theta = (X^TX)^{-1}X^Ty
</script>

<p>只要特征变量的数目并不大，标准方程是一个很好的计算参数 𝜃 的替代方法。具体地说，只要特征变量的数量小于一万，通常使用标准方程法，而不使用梯度下降法。</p>
]]></content>
  </entry>
  
</feed>
