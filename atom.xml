<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Living a Simple Life is a Happy Life]]></title>
  <link href="https://brain-zhang.github.io/atom.xml" rel="self"/>
  <link href="https://brain-zhang.github.io/"/>
  <updated>2023-01-24T11:08:07+08:00</updated>
  <id>https://brain-zhang.github.io/</id>
  <author>
    <name><![CDATA[brain-zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrate PVE Storage From ZFS to Lvm]]></title>
    <link href="https://brain-zhang.github.io/blog/2023/01/18/migrate-pve-storage-zfs-to-lvm/"/>
    <updated>2023-01-18T10:21:13+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2023/01/18/migrate-pve-storage-zfs-to-lvm</id>
    <content type="html"><![CDATA[<p>之前PVE的存储我用ZFS做了三个pool，一个RaidZ1，两个Raid0；</p>

<p>我的PVE内核版本为 <code>5.13.19-6-pve</code>;</p>

<p>实际用下来有一个大槽点；</p>

<p>就是对于12T以上的单盘，ZFS每次写入的时候都会炒豆子音大爆发，放在家里实在不是什么好体验；而且我一直有个困扰已久的问题没有解决；就是ZFS强壮是强壮；但是对于其dataset的管理方式，无论是send还是destroy，每个操作都会有长时间的卡顿lock；另外相对于读性能，不知道为什么，我的RaidZ1写性能一直没有达到单盘读写能力，我加了ARC、ZIL，各种方法都折腾了一遍，但是效果都不好；
还有一个最大的问题，就是虚拟机多了之后，比如我同时对20台虚拟机做硬盘迁移操作；ZFS的lock太严重了，比如我同时delete两个虚拟硬盘，必定lock timeout;这个lock timeout 60s的限制，没有找到设置的地方，只能硬改代码，非常tricky；而不用后台命令，PVE的web UI对于并行操作的支持不好，所以降低磁盘并行操作的locktime非常必要；</p>

<!-- more -->

<p>当然实际使用上，ZFS的优点也很突出:</p>

<ul>
  <li>透明压缩、文件去重；太有用了，尤其是PVE 创建LXC容器，文件存储直接继承ZFS的所有能力</li>
  <li>dataset级别的存储操作；这种块级别管理文件的方式，对于大规模数据迁移很有用，而且可以针对不同的需求对每一个dataset参数调整</li>
  <li>快照；ZFS的杀手特性</li>
</ul>

<p>总之折腾了一年多，我已经把ZFS的手册翻了好几遍了，我已经理解这个文件系统的使用方式了；</p>

<p>但是为了静音，我打算切换到PVE 源远流长的LVM存储管理；鉴于现在我的忘性越来越大，我想用尽可能简单的方式，来描述PVE如何使用LVM的；以后随时能扫一眼回忆回忆；</p>

<h2 id="lvm">几句话过一下LVM</h2>

<ul>
  <li>LVM是整个一套管理磁盘存储的机制；包括分区扩容缩减，替换磁盘等等等等</li>
  <li>一个物理磁盘称之为PhysicalStorageMedia</li>
  <li>LVM最底层的设备称之为PV(物理卷)， 物理卷可以是一组raid盘，可以是单个物理硬盘，可以是一个分区(比如/dev/sda1)</li>
  <li>多个PV组成了VG(卷组)，一个VG对外表现就是一个块设备，就像一块硬盘一样</li>
  <li>一个VG可以划分为多个LV(逻辑卷)；其表现就跟一块硬盘划分多个分区是一样的</li>
  <li>有一种特殊的LV，称之为Thinly-Provisioned Logical Volumes(精简模式LVM)；</li>
  <li>thin LV支持COW(快照方便)和动态存储分配空间(按需分配而不是虚拟之指定的磁盘大小，节约空间)，跟ZFS一样，适合云环境</li>
  <li>创建thinLV之前，必须先创建一个thinpool，次序依次是 创建PV-&gt;创建VG-&gt;在此VG上创建thinpool-&gt;在此thinpool上创建thin LV；</li>
  <li>LVM可以动态缩减空间，增删硬盘</li>
  <li>一个VG可以单个PV，也可以多个PV组成</li>
  <li>一个VG可以包含多个thinpool+多个普通LV</li>
  <li>VG可以动态扩展，空间可以动态调整</li>
  <li>LV空间可以动态调整</li>
</ul>

<h2 id="pvelvm">PVE中的LVM</h2>

<ul>
  <li>PVE上后台用命令行可以支持所有LVM特性</li>
  <li>PVE Web界面功能比较弱，只支持
    <ul>
      <li>将一个PV划分为一个VG</li>
      <li>将一个VG划分为一个thinpool，即lvm-thin</li>
      <li>Web UI不可以组合划分</li>
    </ul>
  </li>
</ul>

<p>参考了一篇非常详细的文章，人家写的很清楚，就不啰嗦了:</p>

<p>https://codeantenna.com/a/SG6LHk1x9s</p>

<h2 id="section">规划</h2>

<ul>
  <li>三块硬盘，分成三个VG</li>
  <li>两个VG做成thin pool，只有lvm thin，分别用于存储LXC容器和VM</li>
  <li>一个VG 用来做文件服务器</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rsync Cheat]]></title>
    <link href="https://brain-zhang.github.io/blog/2022/07/26/rsync-cheat/"/>
    <updated>2022-07-26T15:35:51+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2022/07/26/rsync-cheat</id>
    <content type="html"><![CDATA[<p>这条命令我用了不下百次了，但是每次还得查，老年痴呆的前兆，/(ㄒoㄒ)/~~</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rsync -acvruP --progress /opt/src1 /opt/src2  /mnt/dest/</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>-c, –checksum 打开校验开关，强制对文件传输进行校验; 开了前置计算会很慢，文件多的时候不要用</li>
  <li>-a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD</li>
  <li>-r, –recursive 对子目录以递归模式处理</li>
  <li>-u, –update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)；已经有拷贝了一半的文件的情况下不要用，不会自动更新</li>
</ul>

<p>最后，要注意路径中的斜杠处理:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rsync -acvruP --progress /opt/src1 /mnt/dest/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>与下面的命令是不一样的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rsync -acvruP --progress /opt/src1/ /mnt/dest/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>前者会拷贝src1目录，后者会拷贝src1目录下的文件，但是不会带src1</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZFS Cheat]]></title>
    <link href="https://brain-zhang.github.io/blog/2022/07/26/zfs-cheat/"/>
    <updated>2022-07-26T15:14:19+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2022/07/26/zfs-cheat</id>
    <content type="html"><![CDATA[<h2 id="section">特别提示</h2>

<p>在各种折腾之前，先看看你买的大容量硬盘自带的缓存开了没有；有一些矿盘，不知道是何原因，默认缓存没有开</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 查看是否开了写缓存
</span><span class="line">$ hdparm -W /dev/sdx
</span><span class="line">
</span><span class="line"># 开启
</span><span class="line">$ hdparm -W1 /dev/sdx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后，看看你的SATA接口当前速率是2.0还是3.0，有人就是这么粗心，拿着3.0的盘，插着2.0的线；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ smartctl -a /dev/sdx</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="zfs-">ZFS 使用命令小集</h2>

<h4 id="zpool">列出zpool磁盘</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs list</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pool">查看pool状态</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zpool status</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->

<h4 id="section-1">替换坏掉的硬盘</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zpool replace -f pool0 /dev/sdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">查看是否开启重复数据删除</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs get dedup pool1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">开启重复数据删除</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs set dedup=on pool1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">获取去重比例</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># zpool get dedupratio pool1
</span><span class="line">
</span><span class="line">NAME  PROPERTY    VALUE  SOURCE
</span><span class="line">tank  dedupratio  1.42x  -</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-5">查看是否开启压缩</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs get compress pool1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">开启压缩</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs set compress=lz4 pool1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>或者</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs set compress=on pool1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从2015年zfs版本后，默认压缩为lz4格式， compresss=on 即代表压缩为lz4， <a href="!http://open-zfs.org/wiki/Performance_tuning#Compression">参考</a></p>

<h4 id="section-7">获取压缩比例</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ypcpve:~# zfs get compressratio zpool0
</span><span class="line">NAME    PROPERTY       VALUE  SOURCE
</span><span class="line">zpool0  compressratio  1.15x  -</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-8">强制删除不用的硬盘</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs destroy -f zpool0/vm-102-disk-2</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-9">数据集迁移</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs snapshot oldpool/mydataset@snapshot1
</span><span class="line">zfs send oldpool/mydataset@snapshot1 | zfs receive newpool/mydataset
</span><span class="line">zfs snapshot oldpool/mydataset@snapshot2
</span><span class="line">zfs send -i oldpool/mydataset@snapshot1 oldpool/mydataset@snapshot2 | zfs receive newpool/mydataset</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="sparse">开启空间自动回收机制(sparse)</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs set refreservation=0G NVMe/vm-901-disk-0</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-10">查看磁盘负载</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zpool iostat</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-11">查看磁盘状态及容量</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@proxmox4 ~ &gt; zfs list rpool/data/vm-100-disk-1
</span><span class="line">NAME                       USED  AVAIL  REFER  MOUNTPOINT
</span><span class="line">rpool/data/vm-100-disk-1   132G   832G    64K  -
</span><span class="line">
</span><span class="line">root@proxmox4 ~ &gt; zfs get all rpool/data/vm-100-disk-1
</span><span class="line">NAME                      PROPERTY              VALUE                 SOURCE
</span><span class="line">rpool/data/vm-100-disk-1  type                  volume                -
</span><span class="line">rpool/data/vm-100-disk-1  creation              Mi Feb 21 13:29 2018  -
</span><span class="line">rpool/data/vm-100-disk-1  used                  132G                  -</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="arc-">查看 ARC 缓存大小</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 得到MB
</span><span class="line">root@proxmox4 ~ &gt; awk '/^size/ { print $1 " " $3 / 1048576 }' &lt; /proc/spl/kstat/zfs/arcstats
</span><span class="line">
</span><span class="line"># 查看最大设置，默认0代表使用系统的一半内存
</span><span class="line">root@proxmox4 ~ &gt; cat /sys/module/zfs/parameters/zfs_arc_max</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pve">pve规划</h2>

<p>pve 为每个虚拟机以及容器在zpool上直接创建sub vol； 这样不利于管理；最好为每一类虚拟机单独创建一个dataset；例如:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 为每种虚机按用途分别归类dataset
</span><span class="line">
</span><span class="line">zfs create zpool0/linuxdateset
</span><span class="line">zfs create zpool0/windataset
</span><span class="line">zfs create zpool0/lxcdataset
</span><span class="line">zfs create zpool0/productdataset
</span><span class="line">zfs create zpool0/testdataset
</span><span class="line">
</span><span class="line"># 查看所有dataset
</span><span class="line">pvesm zfsscan</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>建立这些dataset后，要到PVE的管理界面上 <code>Datacenter-&gt;Stortage</code> 添加相应的挂载点，然后把虚拟机的硬盘分门别类存放</p>

<p>这样就可以为每个dataset设置不同的属性；比如我们测试环境的数据可靠性要求比较低，我们为zpool0/testdataset 关闭同步功能，这样会大幅提升读写性能</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zfs set sync=disabled zpool0/testdataset</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="ssdzil">在SSD上分配ZIL缓存</h2>

<p>在SSD上创建log, read缓存，为zfs pool 机械盘加速</p>

<h4 id="section-12">建立缓存文件并挂载</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkidr /zcache &amp;&amp; cd /zcache
</span><span class="line">fallocate -l 16G zfs-log-cache.img
</span><span class="line">fallocate -l 16G zfs-read-cache.img
</span><span class="line">
</span><span class="line">losetup -fP zfs-log-cache.img
</span><span class="line">losetup -fP zfs-log-read.img</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-13">查看挂载情况</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">losetup -a
</span><span class="line">
</span><span class="line">/dev/loop0: [66306]:37691140 (/zcache/zfs-log-cache.img)
</span><span class="line">/dev/loop1: [66306]:37691139 (/zcache/zfs-read-cache.img)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="zpool-1">添加到zpool</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zpool add zpool0 log /dev/loop0
</span><span class="line">zpool add zpool0 read /dev/loop1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-14">检查使用情况</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">watch "zpool iostat -v"</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-15">移除</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zpool remove zpool0 /dev/loop0
</span><span class="line">zpool remove zpool0 /dev/loop1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-16">开机自动挂载</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/fstab
</span><span class="line">
</span><span class="line"># 添加
</span><span class="line">/zcache/zfs-log-cache.img       /dev/loop0       ext4       loop       0 0
</span><span class="line">/zcache/zfs-read-cache.img      /dev/loop1       ext4       loop       0 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-17">磁盘替换</h2>

<p>大容量磁盘RaidZx重建是一个极其缓慢的过程；实测我的12T X3 Raidz1阵列，替换一块坏盘重建花了三天；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo zpool offline zpool0 ata-TOSHIBA01
</span><span class="line">$ sudo zpool online zpool0 ata-TOSHIBA02
</span><span class="line">$ sudo zpool replace ata-TOSHIBA01 ata-TOSHIBA02</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Limit Exists Running Docker Container Cpus]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/11/07/how-to-limit-docker-cpus/"/>
    <updated>2021-11-07T11:05:44+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/11/07/how-to-limit-docker-cpus</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">docker update --cpu-period=100000 --cpu-quota=40000  &lt;container&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>意思是cpu时间切分为100000份，指定容器占用40000份，即cpu占用率最高40%</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lnd Low Rescan Speed for Startup]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/06/05/lnd-low-rescan-speed-for-startup/"/>
    <updated>2021-06-05T17:31:07+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/06/05/lnd-low-rescan-speed-for-startup</id>
    <content type="html"><![CDATA[<p>Lnd启动的时候需要扫描最近数百个区块来验证安全性，做rescan动作的时候慢的出奇，有时候需要30分钟才能完成这个动作：</p>

<p>https://github.com/lightningnetwork/lnd/issues/760</p>

<p>如果单独启动Lnd可以耐着性子等，但是如果用Lit(lightning-network-termial) 启动的话，因为它集成了数个服务，所以在等Lnd RPC服务就绪前，往往等不到扫描完毕就超时退出了…</p>

<p>因为Lit Debug Log没有打全，我对于这个问题百思不得其解，其在bitcoin Regnet, Testnet, Mainnet上面的表现各不相同….</p>

<p>最后找到的一劳永逸的解决办法有两个：</p>

<ol>
  <li>
    <p>换btcd，不要用bitcoin core了</p>
  </li>
  <li>
    <p>换ssd硬盘，花钱解决</p>
  </li>
</ol>

<p>话说，bitcoin core还好一点，Ethereum一个全节点的成本已经越来越高了，硬盘需求已经直奔2T SSD了；对于个人来说，在AWS上启动一个2T云硬盘的vps着实花费不小；</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Allow Non-root Process to Bind to Low-numbered Ports]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/06/01/how-to-allow-non-root-process-to-bind-to-low-numbered-ports/"/>
    <updated>2021-06-01T16:32:31+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/06/01/how-to-allow-non-root-process-to-bind-to-low-numbered-ports</id>
    <content type="html"><![CDATA[<h4 id="use-capnetbindservice-to-grant-low-numbered-port-access-to-a-process">Use CAP_NET_BIND_SERVICE to grant low-numbered port access to a process:</h4>

<p>With this you can grant permanent access to a specific binary to bind to low-numbered ports via the setcap command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo setcap CAP_NET_BIND_SERVICE=+eip /path/to/binary</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For more details on the e/i/p part, see cap_from_text.</p>

<p>After doing this, /path/to/binary will be able to bind to low-numbered ports. Note that you must use setcap on the binary itself rather than a symlink.</p>

<p>FROM:</p>

<p>https://superuser.com/questions/710253/allow-non-root-process-to-bind-to-port-80-and-443</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Hide a Password Passed as Command Line Argument?]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/05/22/how-to-hide-a-password-passed-as-command-line-argument/"/>
    <updated>2021-05-22T17:22:37+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/05/22/how-to-hide-a-password-passed-as-command-line-argument</id>
    <content type="html"><![CDATA[<p>有部分软件设计的时候没有考虑命令行参数之外传递密码的途径，无法用环境变量或配置传递密码；导致任何用户用ps一看都能看到，这是重大的安全隐患；</p>

<p>解决方法很tricky:</p>

<p>https://serverfault.com/questions/592744/how-to-hide-a-password-passed-as-command-line-argument</p>

<p>https://stackoverflow.com/questions/3830823/hiding-secret-from-command-line-parameter-on-unix</p>

<p>做软件设计的时候一定要考虑命令行传递密码的替代方案；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Become Superuser on Ubuntu Linux]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/05/17/how-to-become-superuser-on-ubuntu-linux/"/>
    <updated>2021-05-17T17:31:30+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/05/17/how-to-become-superuser-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo passwd root
</span><span class="line">
</span><span class="line">su -</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Enable VNC+xfce on Ubuntu16]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/05/17/how-to-enable-vnc-plus-xfce-on-ubuntu16/"/>
    <updated>2021-05-17T17:13:32+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/05/17/how-to-enable-vnc-plus-xfce-on-ubuntu16</id>
    <content type="html"><![CDATA[<h4 id="vncserver">安装桌面环境和vncserver</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get install xfce4 vnc4server</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="vncserver-1">启动vncserver</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vncserver</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section">修改配置文件</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim ~/.vnc/xstartup
</span><span class="line">
</span><span class="line">
</span><span class="line">#!/bin/sh
</span><span class="line">unset SESSION_MANAGER
</span><span class="line">unset DBUS_SESSION_BUS_ADDRESS
</span><span class="line">startxfce4 &amp;
</span><span class="line">
</span><span class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup
</span><span class="line">[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources
</span><span class="line">xsetroot -solid grey</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">修改配置文件后，运行如下命令结束掉之前产生的窗口:1</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vncserver -kill :1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="vnc-clienttab">用vnc client连接后，tab键自动补全用不了，可以进行如下设置</h4>

<p>settings -&gt; window manager -&gt; keyboard -&gt; switch window for same application -&gt; clear</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下块设备缓存Bcache设置]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi/"/>
    <updated>2021-04-22T10:04:17+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/04/22/linuxxia-kuai-she-bei-huan-cun-bcacheshe-zhi</id>
    <content type="html"><![CDATA[<h2 id="bcache">Bcache简介</h2>

<p>Bcache是Linux内核块设备层cache，支持多块HDD使用同一块SSD作为缓存盘。它让SSD作为HDD的缓存成为了可能。由于SSD价格昂贵，存储空间小，而HDD价格低廉，存储空间大，因此采用SSD作为缓存，HDD作为数据存储盘，既解决了SSD容量太小，又解决了HDD运行速度太慢的问题。</p>

<p>Bcache是从Linux-3.10开始正式并入内核主线的，因此，要使用Bcache，需要将内核升级到3.10及以上版本才行。</p>

<!-- more -->

<h2 id="bcache-1">Bcache缓存策略</h2>

<p>Bcache支持三种缓存策略，分别是：writeback、writethrough、writearoud，默认使用writethrough，缓存策略可动态修改。</p>

<ul>
  <li>
    <p>writeback 回写策略：回写策略默认是关闭的，如果开启此策略，则所有的数据将先写入缓存盘，然后等待系统将数据回写入后端数据盘中。</p>
  </li>
  <li>
    <p>writethrough 写通策略：默认的就是写通策略，此模式下，数据将会同时写入缓存盘和后端数据盘。</p>
  </li>
  <li>
    <p>writearoud ：选择此策略，数据将直接写入后端磁盘。</p>
  </li>
</ul>

<p>Write-misses写缺失(写入的数据不在缓存中)有两种处理方式：</p>

<pre><code>* Write allocate方式将写入位置读入缓存，然后采用write-hit（缓存命中写入）操作。写缺失操作与读缺失操作类似。

* No-write allocate方式并不将写入位置读入缓存，而是直接将数据写入存储。这种方式下，只有读操作会被缓存。
</code></pre>

<p>无论是Write-through还是Write-back都可以使用写缺失的两种方式之一。只是通常Write-back采用Write allocate方式，而Write-through采用No-write allocate方式；因为多次写入同一缓存时，Write allocate配合Write-back可以提升性能；而对于Write-through则没有帮助。</p>

<h2 id="section">安装</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install bcache-tools</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">操作</h2>

<p>假设我们的HDD设备为/dev/sdb， SSD设备为/dev/sdc，我们需要用SSD加速HDD</p>

<h4 id="section-2">擦除磁盘中的超级块信息</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># wipefs -a /dev/sdb
</span><span class="line"># wipefs -a /dev/sdc</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hdd">创建后端磁盘(HDD)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">make-bcache -B /dev/sdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="ssd">创建缓存盘(SSD)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">make-bcache -C /dev/sdc  -b1M --writeback</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">添加缓存盘</h4>

<p>要为bcache后端磁盘添加缓存盘，在创建缓存盘成功之后，首先需要获取该缓存盘的cset.uuid</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># ls /sys/fs/bcache/
</span><span class="line">5d9e80f1-e4b7-48f5-ace2-f2f391877ea7
</span><span class="line">
</span><span class="line"># bash -c 'echo 5d9e80f1-e4b7-48f5-ace2-f2f391877ea7 &gt; /sys/block/bcache0/bcache/attach'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意，写入UUID必须以root身份才能执行，在zsh里面sudo可能会出现权限不够的问题，所以直接用<code>bash -c</code>来做</p>

<h4 id="section-4">看一下块设备结构</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># lsblk
</span><span class="line">
</span><span class="line">sdb         8:16   0 1000G  0 disk
</span><span class="line">└─bcache0 251:0    0 1000G  0 disk
</span><span class="line">sdc         8:32   0  300G  0 disk
</span><span class="line">└─bcache0 251:0    0 1000G  0 disk
</span><span class="line">
</span><span class="line">ls /sys/block/sdb/bcache/dev/slaves</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-5">查看缓存模式</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># cat /sys/block/bcache0/bcache/cache_mode
</span><span class="line">
</span><span class="line">[writethrough] writeback writearound none
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">更改缓存模式</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo writeback &gt; /sys/block/bcache0/bcache/cache_mode
</span><span class="line"># cat /sys/block/bcache0/bcache/cache_mode
</span><span class="line">
</span><span class="line">writethrough [writeback] writearound none
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-7">查看缓存数据量</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># cat /sys/block/bcache0/bcache/dirty_data
</span><span class="line">
</span><span class="line">4.1G</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-8">格式化、挂载</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># mkfs.ext4 /dev/bcache0
</span><span class="line"># mount /dev/bcache0 /opt</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-9">开机自动挂载</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo "/dev/bcache0 /opt ext4 rw 0 0" &gt;&gt; /etc/fstab</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-10">测试性能</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># fio -filename=/dev/sdb -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=16k -size=2G -numjobs=10 -runtime=60 -group_reporting -name=mytest</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="bcache-2">停用Bcache</h2>

<h4 id="section-11">卸载</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">umount /dev/bcache0</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-12">注销缓存盘</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo 1 &gt;/sys/fs/bcache/5d9e80f1-e4b7-48f5-ace2-f2f391877ea7/unregister</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-13">停用后端磁盘</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo 1 &gt; /sys/block/bcache0/bcache/stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="lsblk">操作完成后，通过lsblk命令查看结果</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># lsblk /dev/sdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>停用之后，后端磁盘的数据是不会丢的，只不过加速功能没有了；当然，注销缓存盘的时候，缓存盘不能有数据读写操作</p>

<h2 id="section-14">参考</h2>

<p>https://wiki.ubuntu.com/ServerTeam/Bcache</p>

<p>https://askubuntu.com/questions/523817/how-to-setup-bcache</p>

<p>https://markrepo.github.io/maintenance/2018/09/10/bcache/</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Split a File Into Equal Parts Without Breaking Individual Lines?]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines/"/>
    <updated>2021-04-19T17:26:06+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/04/19/how-to-split-a-file-into-equal-parts-without-breaking-individual-lines</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">split -n l/5 your_file.txt</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意 l/5 前面是小写的L;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remove All Non-ascii Content From a Workflow (File)]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file/"/>
    <updated>2021-04-17T09:46:10+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/04/17/how-to-remove-all-non-ascii-content-from-a-workflow-file</id>
    <content type="html"><![CDATA[<h4 id="grep-remove-lines">grep remove lines</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep --colour='auto' -P '[^\x00-\x7]' file</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="tr-remove-characters">tr remove characters</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LC_ALL=C tr -dc '\0-\177' &lt;file &gt;newfile</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="ignore-invalid-or-incomplete-multibyte-or-wide-character">ignore Invalid or incomplete multibyte or wide character</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cat $file|iconv -f utf8 -c -t ascii//IGNORE</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Modify an Invalid '/etc/sudoers' File?]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/01/09/how-to-modify-an-invalid-slash-etc-slash-sudoers-file/"/>
    <updated>2021-01-09T16:16:31+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/01/09/how-to-modify-an-invalid-slash-etc-slash-sudoers-file</id>
    <content type="html"><![CDATA[<p>刚说小心驶得万年船，就想自己偷奸耍滑，手工裸编辑 <code>/etc/sudoers</code> 文件把sudo权限搞挂了…-_-</p>

<p>仔细瞅了瞅，少加了一个冒号，导致现在进退两难…</p>

<!-- more -->

<p>解决这个问题的标准方法是pkexec，参考：</p>

<p>https://askubuntu.com/questions/73864/how-to-modify-an-invalid-etc-sudoers-file</p>

<p>但是执行pkexec的时候又暴露了一个问题:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">polkit-agent-helper-1: error response to PolicyKit daemon: GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed: No session for cookie
</span><span class="line">==== AUTHENTICATION FAILED ===
</span><span class="line">Error executing command as another user: Not authorized</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后解决需要一点小技巧:</p>

<ol>
  <li>
    <p>在第一个shell种执行:<code>echo $$</code>，得到PID</p>
  </li>
  <li>
    <p>再开一个shell，再执行<code>pkttyagent --process PID</code></p>
  </li>
  <li>
    <p>再回到第一个shell执行<code>pkexec visudo</code></p>
  </li>
</ol>

<p>参考：</p>

<p>https://github.com/NixOS/nixpkgs/issues/18012</p>

<p>最后的教训是：人就是这样，要求别人头头是道，轮到自己偷奸耍滑；早用<code>visudo</code>还有这种事吗？</p>

<p>三省吾身，不说了，我得赶紧检查下自己其它耍滑头找方便留下的口子;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux服务器极简安全配置]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi/"/>
    <updated>2021-01-06T17:33:38+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/01/06/linuxfu-wu-qi-de-ji-jian-an-quan-pei-zhi</id>
    <content type="html"><![CDATA[<p>网络知识了解的越多，就越胆小；也许，这就是江湖吧；</p>

<p>当配置一台新的Linux服务器并上线时，其实就是将Server暴露到了炮火横飞的战场上，任何的大意都会让其万劫不复；但由于永恒的人性的弱点，我们总是在安全和便利之间摇摆；</p>

<p>本文希望能提供一种最简单的办法，帮助我们抵抗大多数的炮火；</p>

<!-- more -->

<h4 id="section">用户管理</h4>

<p>最重要的就是不要用root用户操作，当一台服务器部署初期，为不同用途划分不同用户组以及用户能避免绝大多数悲剧；</p>

<ol>
  <li>
    <p>增加一个用户组 <code>develop</code></p>

    <p><code>
 groupadd develop
</code></p>
  </li>
  <li>
    <p>增加一个用户<code>brain</code>，设置密码，并把他加入到组 <code>develop</code></p>

    <p><code>
 useradd -d /home/brain -s /bin/bash -m brain
</code></p>

    <p><code>
 passwd brain
</code></p>

    <p><code>
 usermod -a -G develop brain
</code></p>
  </li>
  <li>
    <p>允许用户登录</p>

    <p><code>
 vim /etc/sudoers
</code></p>

    <p>找到类似下面的一行，并在后面增加一行</p>

    <p><code>
 root     ALL=(ALL:ALL) ALL
</code></p>

    <p><code>
 brain    ALL=(ALL) NOPASSWD: ALL
</code></p>

    <p>上面的NOPASSWD表示，切换sudo的时候，不需要输入密码，这样比较省事。如果出于安全考虑，也可以强制要求输入密码。</p>

    <p><code>
 root    ALL=(ALL:ALL) ALL
</code></p>

    <p><code>
 brain    ALL=(ALL:ALL) ALL
</code></p>

    <p>然后，切换到新用户的身份，检查到这一步为止，是否一切正常。</p>

    <p><code>
 su brain
</code></p>
  </li>
</ol>

<h4 id="section-1">防火墙</h4>

<p>防火墙为我们抵抗绝大多数的脚本小子的攻击，是最省力，性价比最高的配置，切勿偷懒;</p>

<p>几乎所有的公有云都提供了非常傻瓜化的web 操作界面，来设置防火墙规则，一般情况下这些设置足够了；</p>

<p>设置第一原则是：只开放必要的端口</p>

<p>如果是自己设置防火墙，iptable的使用比较复杂，我们采用最简单的规则链:</p>

<p>待整理……</p>

<h4 id="sshd">sshd配置</h4>

<p>几条最简单的配置，即能避免90%以上的恶意嗅探；</p>

<ol>
  <li>
    <p>修改默认端口</p>

    <p><code>
 vim /etc/ssh/sshd_config
</code></p>

    <p>找到默认的22端口</p>

    <p><code>
 Port 22
</code></p>

    <p>修改为</p>

    <p><code>
 Port 12222
</code></p>
  </li>
  <li>
    <p>DNS</p>

    <p><code>
 UseDNS no
</code>
 提升ssh连接速度</p>
  </li>
  <li>
    <p>Key</p>

    <p>首先，确定有SSH公钥（一般是文件~/.ssh/id_rsa.pub），如果没有的话，使用ssh-keygen命令生成一个</p>

    <p><code>
 echo "ssh-rsa [your public key]" &gt; ~/.ssh/authorized_keys
</code></p>

    <p><code>
 sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/
</code></p>

    <p>修改/etc/ssh/sshd_config</p>

    <p><code>
 PermitRootLogin no
</code></p>

    <p><code>
 PermitEmptyPasswords no
</code></p>

    <p><code>
 PasswordAuthentication no
</code></p>

    <p><code>
 RSAAuthentication yes
</code></p>

    <p><code>
 PubkeyAuthentication yes
</code></p>

    <p><code>
 AuthorizedKeysFile .ssh/authorized_keys
</code></p>
  </li>
  <li>
    <p>重新启动sshd服务让配置生效</p>

    <p><code>
 systemctl restart sshd
</code></p>
  </li>
  <li>
    <p>验证</p>

    <p>注意，此时不要退出终端；而是另开一个终端，验证配置无误，可以正常登陆后再关闭老终端；</p>

    <p>如果出现什么问题无法登录，而之前的终端窗口又关闭了，如果是远程机房，那就有得麻烦了。所以一切验证无误后再收工，是个好习惯。</p>
  </li>
</ol>

<h4 id="fail2ban">Fail2Ban</h4>

<p>警惕那些不怀好意的撞库者，用Fail2Ban 将尝试暴力破解的脚本小子自动封禁</p>

<ul>
  <li>
    <p>安装</p>

    <p>centos:
  <code>
  yum -y install epel-release
 </code></p>

    <p><code>
  sudo yum install fail2ban
 </code></p>

    <p>ubuntu:
  <code>
  sudo apt-get install fail2ban
 </code></p>
  </li>
  <li>
    <p>编辑规则文件</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/fail2ban/jail.local
</span><span class="line">[DEFAULT]
</span><span class="line">ignoreip = 127.0.0.1/8
</span><span class="line">bantime  = 86400
</span><span class="line">maxretry = 5
</span><span class="line">findtime = 1800
</span><span class="line">destemail = xxxx@xxx.com
</span><span class="line">sender = xxxx@gmail.com
</span><span class="line">mta = mail
</span><span class="line">protocol = tcp
</span><span class="line">banaction = firewallcmd-ipset
</span><span class="line">action = %(action_mwl)s
</span><span class="line">
</span><span class="line">[sshd]
</span><span class="line">enabled = true
</span><span class="line">filter  = sshd
</span><span class="line">port    = 12222
</span><span class="line">action = %(action_mwl)s
</span><span class="line">logpath = /var/log/secure</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>设定邮件转发</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/nail.rc
</span><span class="line">
</span><span class="line">## Add sendmail settings
</span><span class="line">set from=xxxx@gmail.com
</span><span class="line">set smtp=smtps:smtp.gmail.com:587
</span><span class="line">set smtp-auth-user=xxxx@gmail.com
</span><span class="line">set smtp-auth-password=xxxxx
</span><span class="line">set smtp-auth=login
</span><span class="line">set ssl-verify=ignore
</span><span class="line">set nss-config-dir=/etc/pki/nssdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>设定邮件模板</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> vim /etc/fail2ban/action.d/mail-whois-lines.conf
</span><span class="line">
</span><span class="line"># Fail2Ban configuration file
</span><span class="line">#
</span><span class="line"># Author: Cyril Jaquier
</span><span class="line">#
</span><span class="line">#
</span><span class="line">
</span><span class="line">[Definition]
</span><span class="line">
</span><span class="line"># Option: actionstart
</span><span class="line"># Notes.: command executed once at the start of Fail2Ban.
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionstart = printf %%b "Hi,\n The jail &lt;name&gt; has been started successfully.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: started on `uname -n`" &lt;dest&gt;
</span><span class="line">
</span><span class="line"># Option: actionstop
</span><span class="line"># Notes.: command executed once at the end of Fail2Ban
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionstop = printf %%b "Hi,\n The jail &lt;name&gt; has been stopped.\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: stopped on `uname -n`" &lt;dest&gt;
</span><span class="line">
</span><span class="line"># Option: actioncheck
</span><span class="line"># Notes.: command executed once before each actionban command
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actioncheck =
</span><span class="line">
</span><span class="line"># Option: actionban
</span><span class="line"># Notes.: command executed when banning an IP. Take care that the
</span><span class="line"># command is executed with Fail2Ban user rights.
</span><span class="line"># Tags: See jail.conf(5) man page
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionban = printf %%b "Hi,\n The IP &lt;ip&gt; has just been banned by Fail2Ban after &lt;failures&gt; attempts against &lt;name&gt;.\n\n Here are more information about &lt;ip&gt;:\n `whois &lt;ip&gt;`\n `/bin/curl http://ip.taobao.com/service/getIpInfo.php?ip=&lt;ip&gt;`\n\n Regards,\n Fail2Ban"|mail -s "[Fail2Ban] &lt;name&gt;: banned &lt;ip&gt; from `uname -n`" &lt;dest&gt;
</span><span class="line">
</span><span class="line"># Option: actionunban
</span><span class="line"># Notes.: command executed when unbanning an IP. Take care that the
</span><span class="line"># command is executed with Fail2Ban user rights.
</span><span class="line"># Tags: See jail.conf(5) man page
</span><span class="line"># Values: CMD
</span><span class="line">#
</span><span class="line">actionunban =
</span><span class="line">
</span><span class="line">[Init]
</span><span class="line">
</span><span class="line"># Default name of the chain
</span><span class="line">#
</span><span class="line">name = default
</span><span class="line">
</span><span class="line"># Destination/Addressee of the mail
</span><span class="line">#
</span><span class="line">dest = root
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>启动服务，查看状态</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl start fail2ban
</span><span class="line">systemctl status fail2ban
</span><span class="line">fail2ban-client status</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Close Lightning Channels by Lnd-cli?]]></title>
    <link href="https://brain-zhang.github.io/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli/"/>
    <updated>2021-01-03T16:54:10+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2021/01/03/how-to-close-lightning-channels-by-lnd-cli</id>
    <content type="html"><![CDATA[<p>越来越有老年痴呆的倾向，这个命令至少Google过3次了，每次都忘，被自己蠢哭了~~</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lncli closechannel &lt;fund_txid&gt; [fund_tx_vout_NO]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不要忘了vout_NO，不然会报错”channel not found”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Systemd Startup Script for Bitcoind?]]></title>
    <link href="https://brain-zhang.github.io/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind/"/>
    <updated>2020-12-29T16:22:42+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2020/12/29/how-to-set-systemd-startup-script-for-bitcoind</id>
    <content type="html"><![CDATA[<h2 id="setup-bitcoindservice">setup bitcoind.service</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/systemd/system/bitcoind.service</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[Unit]
</span><span class="line">Description=Bitcoin daemon
</span><span class="line">After=network.target
</span><span class="line">
</span><span class="line">[Service]
</span><span class="line">ExecStart=/opt/node/bitcoin/bin/bitcoind -daemon -conf=/opt/node/bitcoin/blockdata/bitcoin.conf -pid=/run/bitcoind/bitcoind.pid
</span><span class="line"># Creates /run/bitcoind owned by bitcoin
</span><span class="line">RuntimeDirectory=bitcoind
</span><span class="line">RuntimeDirectoryPreserve=yes
</span><span class="line">User=ubuntu
</span><span class="line">Type=forking
</span><span class="line">PIDFile=/run/bitcoind/bitcoind.pid
</span><span class="line">Restart=on-failure
</span><span class="line">StandardOutput=/var/log/bitcoind.log
</span><span class="line">StandardError=/var/log/bitcoind.log
</span><span class="line">
</span><span class="line"># Hardening measures
</span><span class="line">####################
</span><span class="line">
</span><span class="line"># Provide a private /tmp and /var/tmp.
</span><span class="line">PrivateTmp=true
</span><span class="line">
</span><span class="line"># Mount /usr, /boot/ and /etc read-only for the process.
</span><span class="line">ProtectSystem=full
</span><span class="line">
</span><span class="line"># Disallow the process and all of its children to gain
</span><span class="line"># new privileges through execve().
</span><span class="line">NoNewPrivileges=true
</span><span class="line">
</span><span class="line"># Use a new /dev namespace only populated with API pseudo devices
</span><span class="line"># such as /dev/null, /dev/zero and /dev/random.
</span><span class="line">PrivateDevices=true
</span><span class="line">
</span><span class="line">[Install]
</span><span class="line">WantedBy=multi-user.target
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reload-systemctl-daemon">Reload systemctl daemon</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl daemon-reload</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="enabled-new-bitcoind-service">Enabled new bitcoind service</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl enable bitcoind</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="commands-to-start-or-stop-the-service">Commands to start or stop the service</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl stop bitcoind
</span><span class="line">systemctl start bitcoind</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="show-service-status">Show service status</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">systemctl status bitcoind.service</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>More info in:</p>

<p>https://github.com/bitcoin/bitcoin/tree/master/contrib/init</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Sort by Length of String Followed by Alphabetical Order]]></title>
    <link href="https://brain-zhang.github.io/blog/2020/08/17/how-to-sort-by-length-of-string-followed-by-alphabetical-order/"/>
    <updated>2020-08-17T08:34:52+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2020/08/17/how-to-sort-by-length-of-string-followed-by-alphabetical-order</id>
    <content type="html"><![CDATA[<p>shell中，多行文本，先按照字母长度排序，相同长度再按照字母序排列；</p>

<p>做了很多次，隔几天就忘，让人绝望：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cat /tmp/xxx.txt|sort -u | awk '{print length($0), $0}'  | sort -k2,2n -k1,1n -k3,3 |cut -d" " -f2-|less</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xargs Sh -c Skipping the First Argument]]></title>
    <link href="https://brain-zhang.github.io/blog/2020/08/12/xargs-sh-c-skipping-the-first-argument/"/>
    <updated>2020-08-12T16:46:27+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2020/08/12/xargs-sh-c-skipping-the-first-argument</id>
    <content type="html"><![CDATA[<p>其实这个问题已经见过很多次了，但是知其然不知其所以然；今天偶尔在stackoverflow上看到了，记录一下；</p>

<h4 id="shellarg1-arg2">shell中的arg1, arg2…</h4>

<p>在bash shell中，<code>$1</code>, <code>$2</code>代表arg1, arg2，比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs echo $1 $2
</span><span class="line">
</span><span class="line">hello world</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p><code>$0</code> 代表执行环境，如果是一个执行脚本的话，<code>$0</code> 代表其脚本名；比如下面这个脚本hello.sh:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash
</span><span class="line">
</span><span class="line">echo $0
</span><span class="line">echo $1
</span><span class="line">echo $2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># ./hello.sh arg1 arg2
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>会输出</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./hello.sh
</span><span class="line">arg1
</span><span class="line">arg2</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="xargs-sh--c-arg">xargs 调用sh -c 中的arg</h4>

<p>但是使用<code>xargs sh -c</code>时会出现一个比较疑惑的情况，比如执行:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs sh -c 'echo $1 $2'
</span><span class="line">
</span><span class="line">world</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时<code>$1</code>代表world，<code>$2</code>已经没有值了；而执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs sh -c 'echo $0 $1'
</span><span class="line">
</span><span class="line">hello world</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>反而得到了正确结果；</p>

<h4 id="why">why</h4>

<p>之前我一直认为<code>xargs sh -c</code>调用的时候吃掉了<code>$0</code>，不求甚解；偶尔读了一下sh的手册才发现玄机:</p>

<blockquote>
  <p>From the documentation for the -c option:</p>
</blockquote>

<blockquote>
  <p>Read commands from the command_string operand. Set the value of special parameter 0 (see Special Parameters) from the value of the command_name operand and the positional parameters ($1, $2, and so on) in sequence from the remaining argument operands.</p>
</blockquote>

<p>就是说在上面这条命令中，其实是没有找到要执行的命令，或者说要执行的命令为空，而hello world作为<code>$1</code>, <code>$2</code>传给一个空命令了；</p>

<p>后面追加一个dummy的命令会看的更清楚:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo hello world|xargs sh -c 'echo $1 $2' _
</span><span class="line">
</span><span class="line">hello world</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>后面我加了一条下划线作为xargs的dummy command，这样<code>$1</code>, <code>$2</code>就恢复正常了；</p>

<h4 id="section">总结</h4>

<p>虽然这是一个啥用也没有的Magic Topic，但是搞明白之后还是挺有意思的，娱乐用；</p>

<p>另外隐隐约约觉得这里面隐含着一些安全方面的问题，暂时只是一种感觉，将来需要留意有没有这方面的hack手段;</p>

<h4 id="section-1">引用</h4>

<p>https://stackoverflow.com/questions/41043163/xargs-sh-c-skipping-the-first-argument</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Logging on Solidity Contract With Truffle Suite]]></title>
    <link href="https://brain-zhang.github.io/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite/"/>
    <updated>2020-07-17T17:33:45+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2020/07/17/how-to-debug-solidity-contract-on-truffle-suite</id>
    <content type="html"><![CDATA[<p>Ethereum的智能合约调试起来很麻烦，到目前为止还是没有一个方便的类似于console.log()或printf的调用；</p>

<p>一般都是通过Event的方法来打印log；这种办法在写单元测试的时候很麻烦；</p>

<p>目前最接近于官方的手段是构造一个公用的Console库合约，然后链接到主合约里面来用；</p>

<p>https://github.com/trufflesuite/truffle-logger-example</p>

<p>这个PR一直没有Merge到TruffleSuite的新版本中，我们只能先临时手工Copy下代码来Monkey Patch一下；</p>

<p>步骤如下：</p>

<ul>
  <li>首先在主合约的同级目录添加Console.sol合约:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget https://raw.githubusercontent.com/trufflesuite/truffle/truffleLogger/packages/core/lib/logging/Console.sol</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>然后在部署脚本里面增加这个库的链接(以官方示例MetaCoin为例)</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim migrations/2_deploy_contracts.js</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const Console = artifacts.require("Console");
</span><span class="line">const MetaCoin = artifacts.require("MetaCoin");
</span><span class="line">
</span><span class="line">module.exports = function(deployer) {
</span><span class="line">      deployer.deploy(Console);
</span><span class="line">        deployer.link(Console, MetaCoin);
</span><span class="line">          deployer.deploy(MetaCoin);
</span><span class="line">          };
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>在需要打印log的单元测试中引入Console.sol</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim test/TestMetaCoin.sol</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import "../contracts/Console.sol";
</span><span class="line">
</span><span class="line">.....
</span><span class="line">    console.log("xxxxxx");</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十行代码挑战世界金融体系]]></title>
    <link href="https://brain-zhang.github.io/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi/"/>
    <updated>2020-04-23T15:47:39+08:00</updated>
    <id>https://brain-zhang.github.io/blog/2020/04/23/shi-xing-dai-ma-dian-fu-shi-jie-jin-rong-ti-xi</id>
    <content type="html"><![CDATA[<p>这个有点标题党了，但实话说许多”高科技”项目也是这种浮夸的宣传手段，且听我慢慢道来；</p>

<p>最近央行将推出数字货币（DCEP）的消息沸沸扬扬，在没有实际用过之前，我无意对其做过多揣测；</p>

<p>不过这个消息激起了我另一方面的兴趣，就是写一写那些在以太坊上面发行的各种山寨Token；</p>

<p>众所周知，自从Ethereum的<a href="https://github.com/ethereum/EIPs/issues/20">ERC20</a>、<a href="https://github.com/ethereum/EIPs/issues/223">ERC223</a>、<a href="https://github.com/ethereum/EIPs/issues/721">ERC721</a>、<a href="https://github.com/ethereum/EIPs/issues/777">ERC777</a>等Token合约标准诞生以来，在Ethereum上面发行一种货币的成本低的令人发指，我测算，按照现在的ETH汇率，大概10块人民币就能让你发行一个具有发行、转账、增发、销毁等基本功能的电子货币，如果导入OpenZeppelin程序库，在部署合约的时候多出100块钱左右，就可以拥有一个具有融资上限、拍卖、行权计划和其他更复杂的功能的货币。</p>

<p>先知Andreas M. Antonopoulos 曾经在2014年加拿大关于比特币的听证会上表示，未来的货币发行市场可能会超出所有人的想象，一个十几岁的屁大小子，用10行代码足以创造最灵活最有信用的货币；借助区块链的技术，一个幼儿园的童星创造的货币，可能比历史上最有权力的君王创造的货币用户更多；</p>

<p>虽然比特币发明以来，把它的代码Folk一份，修改两个参数就出来”颠覆世界”的山寨币已经数不胜数，但真正把”造币”这件事情变成无门槛，像吃棒棒糖一样容易的，还是得说以太坊的ERC20的横空出世；</p>

<p>那么，就先让我们体验一下，如何10行代码创造我们自己的棒棒糖币吧~~~</p>

<!-- more -->

<h3 id="section">前置技能</h3>

<p>虽然夸张的宣传是只需要十行代码，但是我们得懂一些前置技能:</p>

<ol>
  <li>会翻墙</li>
  <li>了解<a href="https://ethereum.org/">Ethereum</a>的基本原理，最好能把白皮书读明白</li>
  <li>学会<a href="https://github.com/ethereum/solidity/">solidity语言</a></li>
  <li>搞明白<a href="trufflesuite.com/">Truffle开发环境的使用</a></li>
  <li>会用Nodejs</li>
  <li>会用Npm安装包，因为相关代码迭代速度很快，有时候需要你自己解决一些依赖问题</li>
  <li>会一些基本的Linux命令</li>
</ol>

<p>好啦，相信老码农对于以上小门槛根本不屑一顾；</p>

<p>我们假设你满足了上面的前置条件，在一台能翻墙的Linux机器上部署了Nodejs, Geth, Truffle，让我们开干吧；</p>

<h3 id="section-1">初版</h3>

<ol>
  <li>
    <p>首先我们要完成Truffle的搭建，与我们本地运行的Geth联动，保证你的地址里面有一点ETH能支付Gas费用，这部分操作可以参考官方文档</p>
  </li>
  <li>
    <p>然后我们用Truffle命令建立一个简单的模板项目</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir CakeCoin
</span><span class="line">$ cd CakeCoin
</span><span class="line">$ truffle init</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>开始编辑我们的棒棒糖Token合约</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim contracts/CakeCoin.sol
</span><span class="line">
</span><span class="line">pragma solidity ^0.5.0;
</span><span class="line">contract CakeCoin {
</span><span class="line">    mapping (address =&gt; uint256) public balanceOf;
</span><span class="line">    constructor(uint256 initialSupply) public {
</span><span class="line">        balanceOf[msg.sender] = initialSupply;
</span><span class="line">    }
</span><span class="line">    function transfer(address _to, uint256 _value) public {
</span><span class="line">        require(balanceOf[msg.sender] &gt;= _value);
</span><span class="line">        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
</span><span class="line">        balanceOf[msg.sender] -= _value;
</span><span class="line">        balanceOf[_to] += _value;
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>编写一个部署脚本</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vim migrations/2_deploy_contact.js
</span><span class="line">
</span><span class="line">var CakeCoin = artifacts.require("CakeCoin");
</span><span class="line">module.exports = function(deployer) {
</span><span class="line">  deployer.deploy(CakeCoin);
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>编译部署上链</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ truffle migrate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>大功告成，在付出大概0.001ETH的Gas费用之后，你的私人货币就发行成功了，此时你有两项权力：</p>

<ul>
  <li>可以在部署的时候指定货币的总体供应量</li>
  <li>可以执行央行的角色，把货币分发给其他人；至于分发的方式，就看你的心情了
    <ul>
      <li>可以像以太坊众筹一样，为某个时间点的所有比特币持有者做个快照，然后按照比特币的持有量给所有持有人发币</li>
      <li>可以搞宣传诈骗，先创建一个美轮美奂的高大上的网站，然后引那些不明真相的群众花钱来买你成本只有0.001ETH的棒棒糖币</li>
      <li>纯粹为了玩，发行1000万亿货币随机分发给所有以太坊玩家；这也是大多数山寨Token的初始发行办法–先把场子热起来；</li>
    </ul>
  </li>
</ul>

<p>这个合虽然简单，但是已经完成了货币的基本功能：贮存和转移，而且是一个全球通用的，不需要任何组织背书，完全依赖于以太坊的数学体系运转的电子货币；</p>

<p>不要小看这10行代码哦，在所谓的“区块链技术”纷纷攘攘的日子里，很多所谓的金融创新就是靠着这样的代码，大肆圈钱；甚至有个国家，咱就不指明了，发行个啥石油币，本质上一样的套路；</p>

<h3 id="section-2">第二版</h3>

<p>虽然这个CakeCoin已经具备了最简单的发行和转账的功能，但是查询总发行量，账户持有量等等操作只能通过与合约交互来实现，对于非码农人士太困难了，我们需要增加必要的接口:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.5.0;
</span><span class="line">
</span><span class="line">contract CakeCoin {
</span><span class="line">/* This creates an array with all balances */
</span><span class="line">    mapping (address =&gt; uint256) public balanceOf;
</span><span class="line">    uint256 public totalSupply;
</span><span class="line">
</span><span class="line">    event TransferEvent(address indexed _from, address indexed _to, uint256 _value);
</span><span class="line">
</span><span class="line">    /* Initializes contract with initial supply tokens to the creator of the contract */
</span><span class="line">    constructor(uint256 initialSupply) public {
</span><span class="line">        balanceOf[msg.sender] = initialSupply;
</span><span class="line">        totalSupply = initialSupply;
</span><span class="line">        // Give the creator all initial tokens
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    /* Send coins */
</span><span class="line">    function transfer(address _to, uint256 _value) public {
</span><span class="line">        require(balanceOf[msg.sender] &gt;= _value);
</span><span class="line">        // Check if the sender has enough
</span><span class="line">        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);
</span><span class="line">        // Check for overflows
</span><span class="line">        balanceOf[msg.sender] -= _value;
</span><span class="line">        // Subtract from the sender
</span><span class="line">        balanceOf[_to] += _value;
</span><span class="line">        // Add the same to the recipient
</span><span class="line">        emit TransferEvent(msg.sender, _to, _value);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">        function getBalance(address addr) public view returns(uint) {
</span><span class="line">                return balanceOf[addr];
</span><span class="line">        }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后提供一个web UI操作界面，具体代码可以参考：</p>

<p>https://github.com/brain-zhang/CakeCoin/tree/branches/1.2/src</p>

<h3 id="erc20">第三版(ERC20)</h3>

<p>上面的货币虽然简单好用，但是有一些缺陷：</p>

<ul>
  <li>初始发行量定了就不能改了，以后不能再增发货币</li>
  <li>发行出去的货币无法注销</li>
  <li>初始发行者的权利不能转让</li>
  <li>无法开展融资等活动</li>
  <li>…..</li>
</ul>

<p>为了解决这些问题，我们想要一个更高级一点的糖果货币；毕竟，金融就是一件把事情越做越复杂的活儿，这样才好浑水摸鱼嘛^_^；</p>

<p>这么搞下来10行代码肯定不止了，但是程序员最大的特长就是造轮子，早就有人把这些东西封装成现成的库合约了,比如这个项目：</p>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts</p>

<p>我们引入一下，代码量反而更少了；</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.4.0;
</span><span class="line">
</span><span class="line">import 'openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
</span><span class="line">
</span><span class="line">contract CakeCoin is StandardToken {
</span><span class="line">    string public constant name = 'CakeCoin';
</span><span class="line">    string public constant symbol = 'CAKECOIN';
</span><span class="line">    uint8 public constant decimals = 2;
</span><span class="line">    uint constant _initial_supply = 10000;
</span><span class="line">
</span><span class="line">    function CakeCoin() public {
</span><span class="line">        totalSupply_ = _initial_supply;
</span><span class="line">        balances[msg.sender] = _initial_supply;
</span><span class="line">        emit Transfer(address(0), msg.sender, _initial_supply);
</span><span class="line">    }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上的合约相比我们第二版，可以一眼看出有几个变化:</p>

<ol>
  <li>有了个正式的名字 <code>CakeCoin</code>, 这是ERC20的规范</li>
  <li>有了个正式的货币符号 <code>CAKECOIN</code>, 这是ERC20的规范</li>
  <li>有了精度限制, 这是ERC20的规范</li>
  <li>有了初始发行量, 这是ERC20的规范</li>
  <li>有了以上这些明文约定的东西，就很容易被第三方的交易所解析，可以直接上架交易</li>
</ol>

<p><code>openzeppelin-contracts</code> 项目发展非常快，为了便于演示，我们先采用其早期版本作为基础库；其truffle-config.js配置如下：</p>

<p>https://github.com/brain-zhang/CakeCoin/blob/branches/1.3/truffle-config.js</p>

<p>执行下面命令重新部署:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle migrate --reset</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如此一来我们就有了一个完整的符合<a href="https://docs.openzeppelin.com/contracts/3.x/erc20">ERC20</a>规范的代币；让我们先在命令行里面体验一下其能力：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ truffle console
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.address
</span><span class="line">
</span><span class="line">'0xb634675Ea3B3aDBb2B72A975cD7Ed04Be79c4873'
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到了合约的部署地址，然后我们执行下列命令看一下货币发行总量:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let supply = await CakeCoin.deployed().then(instance =&gt; instance.totalSupply())
</span><span class="line">truffle(development)&gt; supply.toString()
</span><span class="line">
</span><span class="line">'10000'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接着，我们用本地的测试区块链上创建的账户进行一笔转账，并验证其余额:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let accounts;
</span><span class="line">truffle(development)&gt; web3.eth.getAccounts((err,res) =&gt; { accounts = res });
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 10000
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.transfer(accounts[1], 100) })
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 9900
</span><span class="line">
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[1]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 100
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK，验证完毕，这样我们创造了一个符合ERC20规范，可以直接上架交易所，具备基本的发行、转账功能的代币；但是我们得到的还不止于此~~~</p>

<p>ERC20最大的功能创新是使用了approve和transferFrom的两步式交易。这个流程允许代币的持有人授权其他地址操纵他们的代币。这通常用于授权给某一个合约地址，进行代币的分发，但也可以用于交易所的场景。</p>

<p>例如，某个公司正在销售ICO的代币，他们使用授权某个众筹合约的地址进行一定数量的代币分发。这个众筹合约就可以使用transferFrom把代币从持有人的余额中转账给ICO代币的买方;</p>

<p>下面我们就演示如何创建一个众筹合约来配合我们的CakeCoin实现一个自动化的代币分发</p>

<h4 id="cakecoindemo">首先我们需要建立一个接收CakeCoin的合约Demo</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pragma solidity ^0.4;
</span><span class="line">
</span><span class="line">import 'openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
</span><span class="line">
</span><span class="line">// A faucet for ERC20 token CakeCoin
</span><span class="line">contract CakeCoinFaucet {
</span><span class="line">
</span><span class="line">        StandardToken public CakeCoin;
</span><span class="line">        address public CakeCoinOwner;
</span><span class="line">
</span><span class="line">        // CakeCoinFaucet constructor, provide the address of CakeCoin contract and
</span><span class="line">        // the owner address we will be approved to transferFrom
</span><span class="line">        constructor(address _CakeCoin, address _CakeCoinOwner) public {
</span><span class="line">
</span><span class="line">                // Initialize the CakeCoin from the address provided
</span><span class="line">                CakeCoin = StandardToken(_CakeCoin);
</span><span class="line">                CakeCoinOwner = _CakeCoinOwner;
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        function withdraw(uint withdraw_amount) public {
</span><span class="line">
</span><span class="line">        // Limit withdrawal amount to 10 CakeCoin
</span><span class="line">        require(withdraw_amount &lt;= 1000);
</span><span class="line">
</span><span class="line">                // Use the transferFrom function of CakeCoin
</span><span class="line">                CakeCoin.transferFrom(CakeCoinOwner, msg.sender, withdraw_amount);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">        // REJECT any incoming ether
</span><span class="line">        function () public payable { revert(); }
</span><span class="line">
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个合约的作用非常简单，就是接收CakeCoin，然后允许接收者提现到指定地址；</p>

<h4 id="migratecakecoincakecoinfaucet">修改migrate同时部署CakeCoin以及CakeCoinFaucet</h4>

<p>因为CakeCoinFaucet依赖于CakeCoin合约的部署，所以我们修订之前的2_deploy_contracts.js为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const CakeCoin = artifacts.require("CakeCoin");
</span><span class="line">const CakeCoinFaucet = artifacts.require("CakeCoinFaucet");
</span><span class="line">
</span><span class="line">module.exports = function(deployer, network, accounts) {
</span><span class="line">  var owner = accounts[0];
</span><span class="line">  deployer.deploy(CakeCoin, {from:owner}).then(function(){
</span><span class="line">    // Then deploy CakeCoinFaucet and pass the address of CakeCoinToken  and the
</span><span class="line">    // address of the owner of all the CakeCoin who will approve CakeCoinFaucet
</span><span class="line">    console.log(CakeCoin.address);
</span><span class="line">    return deployer.deploy(CakeCoinFaucet, CakeCoin.address, owner);
</span><span class="line">  });
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意，CakeCoin部署完毕后，才能得到实际的合约地址，然后CakeCoinFaucet的合约部署需要传入这个地址；</p>

<h4 id="section-3">验证</h4>

<p>首先看一下CakeCoin初始发币数目:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; let accounts;
</span><span class="line">truffle(development)&gt; web3.eth.getAccounts((err,res) =&gt; { accounts = res });
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 10000</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看一下第二个测试地址的币:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[0]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好了，我们先批准CakeCoinFaucet合约对CakeCoin的控制</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.approve(CakeCoinFaucet.address, 10000) })</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>提现试一下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">truffle(development)&gt; CakeCoinFaucet.deployed().then(instance =&gt; { faucet = instance})
</span><span class="line">truffle(development)&gt; faucet.withdraw(1000, {from:web3.eth.accounts[1]})
</span><span class="line">truffle(development)&gt; CakeCoin.deployed().then(instance =&gt; { instance.balanceOf(accounts[1]).then((balance) =&gt; console.log(balance.toString())) })
</span><span class="line">truffle(development)&gt; 1000</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">功能增强</h4>

<p>翻阅<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol">ERC20基类代码</a>可以发现，它其实没有什么神奇之处，只不过是把各个电子货币的名称、发行量、支持接口标准化了而已，其中最重要的增强就是为其它合约支持ERC20代币提供了两个接口approve和trnasfrom；</p>

<p>我们当然可以在ERC20的标准之上添加其它增强功能</p>

<h5 id="section-5">比如创始人可以随时销毁这个合约</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">contract owned {
</span><span class="line">      address payable owner;
</span><span class="line">      // Contract constructor: set owner
</span><span class="line">      constructor() public {
</span><span class="line">              owner = msg.sender;
</span><span class="line">      }
</span><span class="line">      // Access control modifier
</span><span class="line">      modifier onlyOwner {
</span><span class="line">             require(msg.sender == owner,
</span><span class="line">                     "Only the contract owner can call this function");
</span><span class="line">           _;
</span><span class="line">      }
</span><span class="line">}
</span><span class="line">
</span><span class="line">contract CakeCoin is StandardToken, owned {
</span><span class="line">       // Contract destructor
</span><span class="line">       function destroy() public onlyOwner {
</span><span class="line">               selfdestruct(owner);
</span><span class="line">       }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="section-6">比如创始人可以销毁代币，或者增发代币</h5>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Burnable.sol</p>

<h5 id="section-7">比如创始人可以临时终止代币的使用</h5>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Pausable.sol</p>

<h4 id="section-8">甚至可以在某个合适的时间点对代币金融系统做个快照</h4>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Snapshot.sol</p>

<h4 id="section-9">妖魔横行</h4>

<p>我们用10行代码就创建了可以在技术层面媲美现代金融系统中最安全的电子货币，这一切是如此轻而易举，总觉得有哪些地方不大对劲~~~</p>

<p>是的，有的人认为这还是太麻烦了，最好有个web界面让我把币名、初始发行量、发行人等等信息填一下，最好加上两句蛊惑人心的宣传口号，然后一键发币~~</p>

<p>是的，这个要求很合理，于是诞生了像<a href="https://vittominacori.github.io/erc20-generator/">ERC20-Generator</a> 这样的开源平台，它真正做到了让幼儿园小朋友也能一键发币！</p>

<p>只要填写几个简单的参数，在安装MetaMask的浏览器中支付一点ETH Gas费用，人人都可以发币；</p>

<p>光发个币自娱自乐的人非常少，我们在之前的文章里面一再提醒，所谓的区块链领域，充斥着诈骗赌博投机者；不幸的是，这帮人对于新技术的利用和孜孜不倦的学习精神让真正的专家们汗颜；很快的，他们就把这项技术应用在割韭菜事业中~~~</p>

<p>光发币还不足以割韭菜，还记得我们之前的介绍blockchain的文章吗？里面提到了比特币的<a href="https://brain-zhang.github.io/blog/2019/01/23/bi-te-bi-de-blockchain-2/">侧链</a>技术，并预言基于Atomic Swap (原子交易)技术的交易所终将会大放光彩；</p>

<p>没错，以太坊作为技术急先锋试验场，诞生了像<a href="https://uniswap.org/">Uniswap</a> 这样的平台，它是完全去中心化的，开源的，可以自动上架ERC20代币，向全世界的ETH玩家们敞开了投机大门、并且是完全公正，没有人控制的一个交易平台(当然，它有没有漏洞、是不是万无一失还很难说)~~~</p>

<p>人人都能发币，发行的货币可以毫无限制、毫无门槛的上架全世界交易流通的去中心化交易所，这就像是一个不受监管、零门槛的IPO市场，会发生什么就不用再多说了吧;</p>

<p>这是一个完全颠覆传统证券市场、传统赌博行业的一个新兴割韭菜基地；赌博投机者以其敢为人先的魄力，绝对的技术Geek范、对新技术的开放心态、野兽般的学习进取精神，还有绝妙的工程能力让人肃然起敬；</p>

<h3 id="erc223">第四版(ERC223)</h3>

<p>ERC20已经非常方便了，但是它还有一个明显的缺陷，就是把ERC20 Token发送到一个不支持它的合约B时，并不会报错，而是悄无声息的把这些Token冻结在B合约中，永远无法使用了；</p>

<p>在合约开发中，一般开发者们都会充分的考虑到接收ETH的处理，即使不能返还，也很少发生冻结ETH的问题；但是为ERC20 Token的使用者们所做的考虑却不多；作为一个开发者的角度来说，我怎么才能为无穷尽的ERC20 Token去做适配呢？ 那些傻瓜持有者们乱发到我的合约里算他们自己倒霉，有人在大街上乱撒钱然后收不回来，责任只能自己承担嘛；</p>

<p>在ICO群魔乱舞的时候，数不清的小白还没搞明白他们买到的Token到底是个什么东西，就迫不及待的充值各种合约，企图投机大赚一笔，这样做的结果就是有许多设计不当的投机合约冻结了大笔资金，并且…..没有人能取出来，即使你是这些合约的拥有者也无济于事；粗略估计这些小白们损失的资金在几百万美元的量级，可以参考：</p>

<p>https://github.com/ethereum/EIPs/issues/223</p>

<p>为了解决这个问题，有人非常贴心的提出了ERC223改进方案，思路也非常简单：</p>

<ol>
  <li>实现ERC20 Token的时候，转账函数需要检测要发送的地址是不是有效的合约</li>
  <li>如果是有效的合约，需要调用一个约定好的函数(tokenFallback)看是否能处理我发送的Token</li>
</ol>

<p>如果不满足以上两个条件，则转账失败，Token不会实际发送；</p>

<p>ERC223标准尚未被广泛采用，有关这个方案的后向兼容性、实现的形态到底是在合约接口层还是在用户界面等问题仍旧是以太坊社区讨论的焦点。</p>

<h3 id="erc777">第五版(ERC777)</h3>

<p>同样的针对ERC223提出的问题，另一个改进提案是ERC777:</p>

<p>ERC777除了要解决误把Token发给不支持的合约之外，还做了我们上文提到过的一些增强，比如:</p>

<ul>
  <li>
    <p>为代币的生成和销毁提供特定事件。</p>
  </li>
  <li>
    <p>使运营方（可信第三方，旨在验证合约）代表代币持有者移动代币。</p>
  </li>
  <li>
    <p>在userData和operator数据字段中提供代币发送交易的元数据。</p>
  </li>
  <li>
    <p>通过调用接收方的tokensReceived函数使合约和地址能够通知代币收据，并通过要求合约提供tokensReceived函数来降低代币被锁定到合约的可能性。</p>
  </li>
  <li>
    <p>允许现有合约对tokensToSend和tokensReceived函数使用代理合约。</p>
  </li>
</ul>

<p>详细请参考：</p>

<p>http://github.com/ethereum/EIPs/issues/777</p>

<p>同样的，增强越多，实施就越慢，ERC777也还在社区讨论中……</p>

<p>注意，开发ERC777 Token上架UniSwap，如果代码处理不当，会有非常严重的安全风险，今年已经有无数Hack事件教用户做人了，请参考下面的最佳实践：</p>

<p>https://github.com/OpenZeppelin/exploit-uniswap</p>

<h3 id="erc721">番外篇(ERC721)</h3>

<p>当我们能随意发行代币之后，很容易就能扩展到金融行业另外的普遍需求，资产证券化；</p>

<p>最直观的就是我们之前的文交所、邮币卡之类的证券交易，还有房产证券化REITs等产品；而这些东西在智能合约的帮助下很容易实现；</p>

<p>可以预见，将来所有现实世界的融资手段或投机产品都能在区块链上找到对应的证券化模型；</p>

<p>好了，让我们看看如何将一件唯一的资产(比如名画)在智能合约上进行交易呢？</p>

<p>为了了解ERC20和ERC721的本质区别，我们只需要看一看ERC721的内部数据结构就可以了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Mapping from deed ID to ownermapping 
</span><span class="line">(uint256 =&gt; address) private deedOwner;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ERC20将所有者作为映射的主键，跟踪每个所有者的余额；而ERC721将合约ID作为映射的主键； 这样，我们只要创造一个智能合约，收录所有证券化的画作，并分配ID；就可以将其在链上进行交易了；</p>

<p>像ERC20规定了代币的标准化信息一样，ERC721也用一个Metadata提供了资产的标识信息，详细的实现请参考:</p>

<p>https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol</p>

<h3 id="erc1155">第六版(ERC1155)</h3>

<p>到目前为止，我们已经为所有现实世界中拥有的证券化手段搬上了区块链，但是注意到了吗？这一切还有局限：</p>

<p>从ERC20到ERC721，每个提案都是根据区块链应用的一步步发展慢慢提出草案来标准化的；刚开始大家想的比较简单，就是一类资产对应一个合约；但很快，就有了更大的愿景，比如：</p>

<p>如何在一个合约中发行多个代币，或多项资产？</p>

<p>最典型的场景，我们开发了一款RPG游戏(暗黑破坏神)；里面充斥着大量的装备以及游戏金币，现在我们想要把这一切搬到区块链上，玩家们可以将金币Token化，从而交易各类装备；</p>

<p>按照现有的实现，我们需要发行一个Token合约，以及好几个装备合约；这样无疑会增加交易的复杂度以及Gas成本；</p>

<p>为了解决这类问题，有人提出了ERC1155，ERC1155借鉴了ERC20，ERC721和ERC777的全部思想；可以在一个合约中发行多个代币及资产，交易的时候可以批量完成多个交换：</p>

<p>https://github.com/ethereum/eips/issues/1155</p>

<p>老实说，这个合约的实现我还没有研究过，现在此类的应用也不多，让我们留到下次再探讨吧。</p>

<h3 id="section-10">总结</h3>

<p>最后，也许你已经被这些名词、规范、绕来绕去的工具链给搞晕了；那么我们只需要认清一件事，就是这个领域在高速的发展，今天被热捧的概念，也许明天就会被抛弃；在这种蛮荒时代，骗子层出不穷，要当心啊~~~</p>
]]></content>
  </entry>
  
</feed>
